// --------------------------------------------------------------------------------------------
#region // Copyright (c) 2003, SIL International. All Rights Reserved.
// <copyright from='2003' to='2003' company='SIL International'>
//		Copyright (c) 2003, SIL International. All Rights Reserved.
//
//		Distributable under the terms of either the Common Public License or the
//		GNU Lesser General Public License, as specified in the LICENSING.txt file.
// </copyright>
#endregion
//-------------------------------------------------------------------------------
using System;
using System.IO;

using SIL.FieldWorks.FDO;
using SIL.FieldWorks.FDO.Cellar;
using System.Diagnostics;

using NUnit.Framework;

namespace SIL.FieldWorks.Common.FXT
{
	/// <summary>
	/// Test SFM export
	/// </summary>
	[TestFixture]
	[Category("ByHand")]
	public class StandardFormat : FxtTestBase
	{
		/// <summary>
		/// Location of simple test FXT files
		/// </summary>
		protected string m_testDir =
			SIL.FieldWorks.Common.Utils.DirectoryFinder.GetFWCodeSubDirectory(@"Language Explorer\Export Templates");
		/// -----------------------------------------------------------------------------------
		/// <summary>
		/// Initializes a new instance of the <see cref="SimpleTests"/> class.
		/// </summary>
		/// -----------------------------------------------------------------------------------
		public StandardFormat()
		{
		}
		[Test]
		public void MDF()
		{
			string sFxtPath = Path.Combine(m_testDir, "mdf.xml");
			string sAnswerFile = Path.Combine(m_sExpectedResultsPath, "TLPStandardFormatMDF.sfm");
			DoDump("TestLangProj", "MDF", sFxtPath, sAnswerFile);
		}
		[Test]
		public void RootBasedMDF()
		{
			string sFxtPath = Path.Combine(m_testDir, "RootBasedMdf.xml");
			string sAnswerFile = Path.Combine(m_sExpectedResultsPath, "TLPRootBasedMDF.sfm");
			DoDump("TestLangProj", "RootBasedMDF", sFxtPath, sAnswerFile);
		}
		[Test]
		public void TwoTimesSpeedTest()
		{
			string sFxtPath = Path.Combine(m_testDir, "mdf.xml");
			XDumper dumper = PrepareDumper("TestLangProj",sFxtPath, false);
			PerformDump(dumper, @"C:\first.txt", "TestLangProj", "first");
			PerformDump(dumper, @"C:\second.txt", "TestLangProj", "second");
			string sAnswerFile = Path.Combine(m_sExpectedResultsPath, "TLPStandardFormatMDF.sfm");
			CheckFilesEqual(sAnswerFile, @"C:\first.txt");
			CheckFilesEqual(@"C:\first.txt", @"C:\second.txt");
		}

		/// <summary>
		/// The expected results were generated by applying an Anywhere filter for "bo" on Headword in Sena3/Lexicon Edit, and
		/// exporting the default Configured Dictionary from the Dictionary tool. The final sfm (.db) file was hand edited, so that
		/// the abandoned fs feature information appears after the \ps [PartOfSpeech] on the preceeding line
		/// (e.g. "\ps N 5/6" for "bokho").
		///
		/// The test transforms the second phase of the configured dictionary export from .xml to .sfm,
		/// and checks the resulting transform against the hand edited sfm.
		///
		/// The expected results may need to be updated whenever the ConfiguredSfm.xsl is modified.
		/// </summary>
		[Test]
		public void ConfiguredDictionary_FsFeatStruc_LT5655()
		{
			string sXmlPhase2 = Path.Combine(m_sExpectedResultsPath, "Phase2-Sena3-bo-ConfiguredDictionary.xml");
			string sXsltSfm = Path.Combine(m_testDir, "ConfiguredSfm.xsl");
			string sAnswerFile = Path.Combine(m_sExpectedResultsPath, "Sena3-bo-ConfiguredDictionary.sfm");
			string sOutputFile = CreateTempFile("sfm");
			PerformTransform(sXsltSfm, sXmlPhase2, sOutputFile);
			CheckFilesEqual(sAnswerFile, sOutputFile);
		}

		public void CheckFilesEqual(string sAnswerPath, string outputPath)
		{
			StreamReader test;
			test = new StreamReader(outputPath);
			StreamReader control = new StreamReader(sAnswerPath);
			Assert.AreEqual(control.ReadToEnd(), test.ReadToEnd(),
				"FXT Output Differs. If you have done a model change, you can update the 'correct answer' xml files by runing fw\\bin\\FxtAnswersUpdate.bat.");
		}

	}
}
