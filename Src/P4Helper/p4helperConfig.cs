//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.288
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by xsd, Version=1.0.3705.288.
//
using System;
using System.Data;
using System.Xml;
using System.Runtime.Serialization;


[Serializable()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Diagnostics.DebuggerStepThrough()]
[System.ComponentModel.ToolboxItem(true)]
public class p4HelperConfig : DataSet {

	private skipDirsDataTable tableskipDirs;

	private dirDataTable tabledir;

	private skipNamePartsDataTable tableskipNameParts;

	private partDataTable tablepart;

	private DataRelation relationskipDirs_dir;

	private DataRelation relationskipNameParts_part;

	public p4HelperConfig() {
		this.InitClass();
		System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
		this.Tables.CollectionChanged += schemaChangedHandler;
		this.Relations.CollectionChanged += schemaChangedHandler;
	}

	protected p4HelperConfig(SerializationInfo info, StreamingContext context) {
		string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
		if ((strSchema != null)) {
			DataSet ds = new DataSet();
			ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
			if ((ds.Tables["skipDirs"] != null)) {
				this.Tables.Add(new skipDirsDataTable(ds.Tables["skipDirs"]));
			}
			if ((ds.Tables["dir"] != null)) {
				this.Tables.Add(new dirDataTable(ds.Tables["dir"]));
			}
			if ((ds.Tables["skipNameParts"] != null)) {
				this.Tables.Add(new skipNamePartsDataTable(ds.Tables["skipNameParts"]));
			}
			if ((ds.Tables["part"] != null)) {
				this.Tables.Add(new partDataTable(ds.Tables["part"]));
			}
			this.DataSetName = ds.DataSetName;
			this.Prefix = ds.Prefix;
			this.Namespace = ds.Namespace;
			this.Locale = ds.Locale;
			this.CaseSensitive = ds.CaseSensitive;
			this.EnforceConstraints = ds.EnforceConstraints;
			this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
			this.InitVars();
		}
		else {
			this.InitClass();
		}
		this.GetSerializationData(info, context);
		System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
		this.Tables.CollectionChanged += schemaChangedHandler;
		this.Relations.CollectionChanged += schemaChangedHandler;
	}

	[System.ComponentModel.Browsable(false)]
	[System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
	public skipDirsDataTable skipDirs {
		get {
			return this.tableskipDirs;
		}
	}

	[System.ComponentModel.Browsable(false)]
	[System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
	public dirDataTable dir {
		get {
			return this.tabledir;
		}
	}

	[System.ComponentModel.Browsable(false)]
	[System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
	public skipNamePartsDataTable skipNameParts {
		get {
			return this.tableskipNameParts;
		}
	}

	[System.ComponentModel.Browsable(false)]
	[System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
	public partDataTable part {
		get {
			return this.tablepart;
		}
	}

	public override DataSet Clone() {
		p4HelperConfig cln = ((p4HelperConfig)(base.Clone()));
		cln.InitVars();
		return cln;
	}

	protected override bool ShouldSerializeTables() {
		return false;
	}

	protected override bool ShouldSerializeRelations() {
		return false;
	}

	protected override void ReadXmlSerializable(XmlReader reader) {
		this.Reset();
		DataSet ds = new DataSet();
		ds.ReadXml(reader);
		if ((ds.Tables["skipDirs"] != null)) {
			this.Tables.Add(new skipDirsDataTable(ds.Tables["skipDirs"]));
		}
		if ((ds.Tables["dir"] != null)) {
			this.Tables.Add(new dirDataTable(ds.Tables["dir"]));
		}
		if ((ds.Tables["skipNameParts"] != null)) {
			this.Tables.Add(new skipNamePartsDataTable(ds.Tables["skipNameParts"]));
		}
		if ((ds.Tables["part"] != null)) {
			this.Tables.Add(new partDataTable(ds.Tables["part"]));
		}
		this.DataSetName = ds.DataSetName;
		this.Prefix = ds.Prefix;
		this.Namespace = ds.Namespace;
		this.Locale = ds.Locale;
		this.CaseSensitive = ds.CaseSensitive;
		this.EnforceConstraints = ds.EnforceConstraints;
		this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
		this.InitVars();
	}

	protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
		System.IO.MemoryStream stream = new System.IO.MemoryStream();
		this.WriteXmlSchema(new XmlTextWriter(stream, null));
		stream.Position = 0;
		return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
	}

	internal void InitVars() {
		this.tableskipDirs = ((skipDirsDataTable)(this.Tables["skipDirs"]));
		if ((this.tableskipDirs != null)) {
			this.tableskipDirs.InitVars();
		}
		this.tabledir = ((dirDataTable)(this.Tables["dir"]));
		if ((this.tabledir != null)) {
			this.tabledir.InitVars();
		}
		this.tableskipNameParts = ((skipNamePartsDataTable)(this.Tables["skipNameParts"]));
		if ((this.tableskipNameParts != null)) {
			this.tableskipNameParts.InitVars();
		}
		this.tablepart = ((partDataTable)(this.Tables["part"]));
		if ((this.tablepart != null)) {
			this.tablepart.InitVars();
		}
		this.relationskipDirs_dir = this.Relations["skipDirs_dir"];
		this.relationskipNameParts_part = this.Relations["skipNameParts_part"];
	}

	private void InitClass() {
		this.DataSetName = "p4HelperConfig";
		this.Prefix = "";
		this.Namespace = "";
		this.Locale = new System.Globalization.CultureInfo("en-US");
		this.CaseSensitive = false;
		this.EnforceConstraints = true;
		this.tableskipDirs = new skipDirsDataTable();
		this.Tables.Add(this.tableskipDirs);
		this.tabledir = new dirDataTable();
		this.Tables.Add(this.tabledir);
		this.tableskipNameParts = new skipNamePartsDataTable();
		this.Tables.Add(this.tableskipNameParts);
		this.tablepart = new partDataTable();
		this.Tables.Add(this.tablepart);
		ForeignKeyConstraint fkc;
		fkc = new ForeignKeyConstraint("skipDirs_dir", new DataColumn[] {
					this.tableskipDirs.skipDirs_IdColumn}, new DataColumn[] {
					this.tabledir.skipDirs_IdColumn});
		this.tabledir.Constraints.Add(fkc);
		fkc.AcceptRejectRule = AcceptRejectRule.None;
		fkc.DeleteRule = Rule.Cascade;
		fkc.UpdateRule = Rule.Cascade;
		fkc = new ForeignKeyConstraint("skipNameParts_part", new DataColumn[] {
					this.tableskipNameParts.skipNameParts_IdColumn}, new DataColumn[] {
					this.tablepart.skipNameParts_IdColumn});
		this.tablepart.Constraints.Add(fkc);
		fkc.AcceptRejectRule = AcceptRejectRule.None;
		fkc.DeleteRule = Rule.Cascade;
		fkc.UpdateRule = Rule.Cascade;
		this.relationskipDirs_dir = new DataRelation("skipDirs_dir", new DataColumn[] {
					this.tableskipDirs.skipDirs_IdColumn}, new DataColumn[] {
					this.tabledir.skipDirs_IdColumn}, false);
		this.relationskipDirs_dir.Nested = true;
		this.Relations.Add(this.relationskipDirs_dir);
		this.relationskipNameParts_part = new DataRelation("skipNameParts_part", new DataColumn[] {
					this.tableskipNameParts.skipNameParts_IdColumn}, new DataColumn[] {
					this.tablepart.skipNameParts_IdColumn}, false);
		this.relationskipNameParts_part.Nested = true;
		this.Relations.Add(this.relationskipNameParts_part);
	}

	private bool ShouldSerializeskipDirs() {
		return false;
	}

	private bool ShouldSerializedir() {
		return false;
	}

	private bool ShouldSerializeskipNameParts() {
		return false;
	}

	private bool ShouldSerializepart() {
		return false;
	}

	private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
		if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
			this.InitVars();
		}
	}

	public delegate void skipDirsRowChangeEventHandler(object sender, skipDirsRowChangeEvent e);

	public delegate void dirRowChangeEventHandler(object sender, dirRowChangeEvent e);

	public delegate void skipNamePartsRowChangeEventHandler(object sender, skipNamePartsRowChangeEvent e);

	public delegate void partRowChangeEventHandler(object sender, partRowChangeEvent e);

	[System.Diagnostics.DebuggerStepThrough()]
	public class skipDirsDataTable : DataTable, System.Collections.IEnumerable {

		private DataColumn columnskipDirs_Id;

		internal skipDirsDataTable() :
				base("skipDirs") {
			this.InitClass();
		}

		internal skipDirsDataTable(DataTable table) :
				base(table.TableName) {
			if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
				this.CaseSensitive = table.CaseSensitive;
			}
			if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
				this.Locale = table.Locale;
			}
			if ((table.Namespace != table.DataSet.Namespace)) {
				this.Namespace = table.Namespace;
			}
			this.Prefix = table.Prefix;
			this.MinimumCapacity = table.MinimumCapacity;
			this.DisplayExpression = table.DisplayExpression;
		}

		[System.ComponentModel.Browsable(false)]
		public int Count {
			get {
				return this.Rows.Count;
			}
		}

		internal DataColumn skipDirs_IdColumn {
			get {
				return this.columnskipDirs_Id;
			}
		}

		public skipDirsRow this[int index] {
			get {
				return ((skipDirsRow)(this.Rows[index]));
			}
		}

		public event skipDirsRowChangeEventHandler skipDirsRowChanged;

		public event skipDirsRowChangeEventHandler skipDirsRowChanging;

		public event skipDirsRowChangeEventHandler skipDirsRowDeleted;

		public event skipDirsRowChangeEventHandler skipDirsRowDeleting;

		public void AddskipDirsRow(skipDirsRow row) {
			this.Rows.Add(row);
		}

		public skipDirsRow AddskipDirsRow() {
			skipDirsRow rowskipDirsRow = ((skipDirsRow)(this.NewRow()));
			rowskipDirsRow.ItemArray = new object[] {
					null};
			this.Rows.Add(rowskipDirsRow);
			return rowskipDirsRow;
		}

		public System.Collections.IEnumerator GetEnumerator() {
			return this.Rows.GetEnumerator();
		}

		public override DataTable Clone() {
			skipDirsDataTable cln = ((skipDirsDataTable)(base.Clone()));
			cln.InitVars();
			return cln;
		}

		protected override DataTable CreateInstance() {
			return new skipDirsDataTable();
		}

		internal void InitVars() {
			this.columnskipDirs_Id = this.Columns["skipDirs_Id"];
		}

		private void InitClass() {
			this.columnskipDirs_Id = new DataColumn("skipDirs_Id", typeof(int), null, System.Data.MappingType.Hidden);
			this.Columns.Add(this.columnskipDirs_Id);
			this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
							this.columnskipDirs_Id}, true));
			this.columnskipDirs_Id.AutoIncrement = true;
			this.columnskipDirs_Id.AllowDBNull = false;
			this.columnskipDirs_Id.Unique = true;
		}

		public skipDirsRow NewskipDirsRow() {
			return ((skipDirsRow)(this.NewRow()));
		}

		protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
			return new skipDirsRow(builder);
		}

		protected override System.Type GetRowType() {
			return typeof(skipDirsRow);
		}

		protected override void OnRowChanged(DataRowChangeEventArgs e) {
			base.OnRowChanged(e);
			if ((this.skipDirsRowChanged != null)) {
				this.skipDirsRowChanged(this, new skipDirsRowChangeEvent(((skipDirsRow)(e.Row)), e.Action));
			}
		}

		protected override void OnRowChanging(DataRowChangeEventArgs e) {
			base.OnRowChanging(e);
			if ((this.skipDirsRowChanging != null)) {
				this.skipDirsRowChanging(this, new skipDirsRowChangeEvent(((skipDirsRow)(e.Row)), e.Action));
			}
		}

		protected override void OnRowDeleted(DataRowChangeEventArgs e) {
			base.OnRowDeleted(e);
			if ((this.skipDirsRowDeleted != null)) {
				this.skipDirsRowDeleted(this, new skipDirsRowChangeEvent(((skipDirsRow)(e.Row)), e.Action));
			}
		}

		protected override void OnRowDeleting(DataRowChangeEventArgs e) {
			base.OnRowDeleting(e);
			if ((this.skipDirsRowDeleting != null)) {
				this.skipDirsRowDeleting(this, new skipDirsRowChangeEvent(((skipDirsRow)(e.Row)), e.Action));
			}
		}

		public void RemoveskipDirsRow(skipDirsRow row) {
			this.Rows.Remove(row);
		}
	}

	[System.Diagnostics.DebuggerStepThrough()]
	public class skipDirsRow : DataRow {

		private skipDirsDataTable tableskipDirs;

		internal skipDirsRow(DataRowBuilder rb) :
				base(rb) {
			this.tableskipDirs = ((skipDirsDataTable)(this.Table));
		}

		public dirRow[] GetdirRows() {
			return ((dirRow[])(this.GetChildRows(this.Table.ChildRelations["skipDirs_dir"])));
		}
	}

	[System.Diagnostics.DebuggerStepThrough()]
	public class skipDirsRowChangeEvent : EventArgs {

		private skipDirsRow eventRow;

		private DataRowAction eventAction;

		public skipDirsRowChangeEvent(skipDirsRow row, DataRowAction action) {
			this.eventRow = row;
			this.eventAction = action;
		}

		public skipDirsRow Row {
			get {
				return this.eventRow;
			}
		}

		public DataRowAction Action {
			get {
				return this.eventAction;
			}
		}
	}

	[System.Diagnostics.DebuggerStepThrough()]
	public class dirDataTable : DataTable, System.Collections.IEnumerable {

		private DataColumn columnpath;

		private DataColumn columnskipDirs_Id;

		internal dirDataTable() :
				base("dir") {
			this.InitClass();
		}

		internal dirDataTable(DataTable table) :
				base(table.TableName) {
			if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
				this.CaseSensitive = table.CaseSensitive;
			}
			if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
				this.Locale = table.Locale;
			}
			if ((table.Namespace != table.DataSet.Namespace)) {
				this.Namespace = table.Namespace;
			}
			this.Prefix = table.Prefix;
			this.MinimumCapacity = table.MinimumCapacity;
			this.DisplayExpression = table.DisplayExpression;
		}

		[System.ComponentModel.Browsable(false)]
		public int Count {
			get {
				return this.Rows.Count;
			}
		}

		internal DataColumn pathColumn {
			get {
				return this.columnpath;
			}
		}

		internal DataColumn skipDirs_IdColumn {
			get {
				return this.columnskipDirs_Id;
			}
		}

		public dirRow this[int index] {
			get {
				return ((dirRow)(this.Rows[index]));
			}
		}

		public event dirRowChangeEventHandler dirRowChanged;

		public event dirRowChangeEventHandler dirRowChanging;

		public event dirRowChangeEventHandler dirRowDeleted;

		public event dirRowChangeEventHandler dirRowDeleting;

		public void AdddirRow(dirRow row) {
			this.Rows.Add(row);
		}

		public dirRow AdddirRow(string path, skipDirsRow parentskipDirsRowByskipDirs_dir) {
			dirRow rowdirRow = ((dirRow)(this.NewRow()));
			rowdirRow.ItemArray = new object[] {
					path,
					parentskipDirsRowByskipDirs_dir[0]};
			this.Rows.Add(rowdirRow);
			return rowdirRow;
		}

		public System.Collections.IEnumerator GetEnumerator() {
			return this.Rows.GetEnumerator();
		}

		public override DataTable Clone() {
			dirDataTable cln = ((dirDataTable)(base.Clone()));
			cln.InitVars();
			return cln;
		}

		protected override DataTable CreateInstance() {
			return new dirDataTable();
		}

		internal void InitVars() {
			this.columnpath = this.Columns["path"];
			this.columnskipDirs_Id = this.Columns["skipDirs_Id"];
		}

		private void InitClass() {
			this.columnpath = new DataColumn("path", typeof(string), null, System.Data.MappingType.Attribute);
			this.Columns.Add(this.columnpath);
			this.columnskipDirs_Id = new DataColumn("skipDirs_Id", typeof(int), null, System.Data.MappingType.Hidden);
			this.Columns.Add(this.columnskipDirs_Id);
			this.columnpath.AllowDBNull = false;
			this.columnpath.Namespace = "";
		}

		public dirRow NewdirRow() {
			return ((dirRow)(this.NewRow()));
		}

		protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
			return new dirRow(builder);
		}

		protected override System.Type GetRowType() {
			return typeof(dirRow);
		}

		protected override void OnRowChanged(DataRowChangeEventArgs e) {
			base.OnRowChanged(e);
			if ((this.dirRowChanged != null)) {
				this.dirRowChanged(this, new dirRowChangeEvent(((dirRow)(e.Row)), e.Action));
			}
		}

		protected override void OnRowChanging(DataRowChangeEventArgs e) {
			base.OnRowChanging(e);
			if ((this.dirRowChanging != null)) {
				this.dirRowChanging(this, new dirRowChangeEvent(((dirRow)(e.Row)), e.Action));
			}
		}

		protected override void OnRowDeleted(DataRowChangeEventArgs e) {
			base.OnRowDeleted(e);
			if ((this.dirRowDeleted != null)) {
				this.dirRowDeleted(this, new dirRowChangeEvent(((dirRow)(e.Row)), e.Action));
			}
		}

		protected override void OnRowDeleting(DataRowChangeEventArgs e) {
			base.OnRowDeleting(e);
			if ((this.dirRowDeleting != null)) {
				this.dirRowDeleting(this, new dirRowChangeEvent(((dirRow)(e.Row)), e.Action));
			}
		}

		public void RemovedirRow(dirRow row) {
			this.Rows.Remove(row);
		}
	}

	[System.Diagnostics.DebuggerStepThrough()]
	public class dirRow : DataRow {

		private dirDataTable tabledir;

		internal dirRow(DataRowBuilder rb) :
				base(rb) {
			this.tabledir = ((dirDataTable)(this.Table));
		}

		public string path {
			get {
				return ((string)(this[this.tabledir.pathColumn]));
			}
			set {
				this[this.tabledir.pathColumn] = value;
			}
		}

		public skipDirsRow skipDirsRow {
			get {
				return ((skipDirsRow)(this.GetParentRow(this.Table.ParentRelations["skipDirs_dir"])));
			}
			set {
				this.SetParentRow(value, this.Table.ParentRelations["skipDirs_dir"]);
			}
		}
	}

	[System.Diagnostics.DebuggerStepThrough()]
	public class dirRowChangeEvent : EventArgs {

		private dirRow eventRow;

		private DataRowAction eventAction;

		public dirRowChangeEvent(dirRow row, DataRowAction action) {
			this.eventRow = row;
			this.eventAction = action;
		}

		public dirRow Row {
			get {
				return this.eventRow;
			}
		}

		public DataRowAction Action {
			get {
				return this.eventAction;
			}
		}
	}

	[System.Diagnostics.DebuggerStepThrough()]
	public class skipNamePartsDataTable : DataTable, System.Collections.IEnumerable {

		private DataColumn columnskipNameParts_Id;

		internal skipNamePartsDataTable() :
				base("skipNameParts") {
			this.InitClass();
		}

		internal skipNamePartsDataTable(DataTable table) :
				base(table.TableName) {
			if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
				this.CaseSensitive = table.CaseSensitive;
			}
			if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
				this.Locale = table.Locale;
			}
			if ((table.Namespace != table.DataSet.Namespace)) {
				this.Namespace = table.Namespace;
			}
			this.Prefix = table.Prefix;
			this.MinimumCapacity = table.MinimumCapacity;
			this.DisplayExpression = table.DisplayExpression;
		}

		[System.ComponentModel.Browsable(false)]
		public int Count {
			get {
				return this.Rows.Count;
			}
		}

		internal DataColumn skipNameParts_IdColumn {
			get {
				return this.columnskipNameParts_Id;
			}
		}

		public skipNamePartsRow this[int index] {
			get {
				return ((skipNamePartsRow)(this.Rows[index]));
			}
		}

		public event skipNamePartsRowChangeEventHandler skipNamePartsRowChanged;

		public event skipNamePartsRowChangeEventHandler skipNamePartsRowChanging;

		public event skipNamePartsRowChangeEventHandler skipNamePartsRowDeleted;

		public event skipNamePartsRowChangeEventHandler skipNamePartsRowDeleting;

		public void AddskipNamePartsRow(skipNamePartsRow row) {
			this.Rows.Add(row);
		}

		public skipNamePartsRow AddskipNamePartsRow() {
			skipNamePartsRow rowskipNamePartsRow = ((skipNamePartsRow)(this.NewRow()));
			rowskipNamePartsRow.ItemArray = new object[] {
					null};
			this.Rows.Add(rowskipNamePartsRow);
			return rowskipNamePartsRow;
		}

		public System.Collections.IEnumerator GetEnumerator() {
			return this.Rows.GetEnumerator();
		}

		public override DataTable Clone() {
			skipNamePartsDataTable cln = ((skipNamePartsDataTable)(base.Clone()));
			cln.InitVars();
			return cln;
		}

		protected override DataTable CreateInstance() {
			return new skipNamePartsDataTable();
		}

		internal void InitVars() {
			this.columnskipNameParts_Id = this.Columns["skipNameParts_Id"];
		}

		private void InitClass() {
			this.columnskipNameParts_Id = new DataColumn("skipNameParts_Id", typeof(int), null, System.Data.MappingType.Hidden);
			this.Columns.Add(this.columnskipNameParts_Id);
			this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
							this.columnskipNameParts_Id}, true));
			this.columnskipNameParts_Id.AutoIncrement = true;
			this.columnskipNameParts_Id.AllowDBNull = false;
			this.columnskipNameParts_Id.Unique = true;
		}

		public skipNamePartsRow NewskipNamePartsRow() {
			return ((skipNamePartsRow)(this.NewRow()));
		}

		protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
			return new skipNamePartsRow(builder);
		}

		protected override System.Type GetRowType() {
			return typeof(skipNamePartsRow);
		}

		protected override void OnRowChanged(DataRowChangeEventArgs e) {
			base.OnRowChanged(e);
			if ((this.skipNamePartsRowChanged != null)) {
				this.skipNamePartsRowChanged(this, new skipNamePartsRowChangeEvent(((skipNamePartsRow)(e.Row)), e.Action));
			}
		}

		protected override void OnRowChanging(DataRowChangeEventArgs e) {
			base.OnRowChanging(e);
			if ((this.skipNamePartsRowChanging != null)) {
				this.skipNamePartsRowChanging(this, new skipNamePartsRowChangeEvent(((skipNamePartsRow)(e.Row)), e.Action));
			}
		}

		protected override void OnRowDeleted(DataRowChangeEventArgs e) {
			base.OnRowDeleted(e);
			if ((this.skipNamePartsRowDeleted != null)) {
				this.skipNamePartsRowDeleted(this, new skipNamePartsRowChangeEvent(((skipNamePartsRow)(e.Row)), e.Action));
			}
		}

		protected override void OnRowDeleting(DataRowChangeEventArgs e) {
			base.OnRowDeleting(e);
			if ((this.skipNamePartsRowDeleting != null)) {
				this.skipNamePartsRowDeleting(this, new skipNamePartsRowChangeEvent(((skipNamePartsRow)(e.Row)), e.Action));
			}
		}

		public void RemoveskipNamePartsRow(skipNamePartsRow row) {
			this.Rows.Remove(row);
		}
	}

	[System.Diagnostics.DebuggerStepThrough()]
	public class skipNamePartsRow : DataRow {

		private skipNamePartsDataTable tableskipNameParts;

		internal skipNamePartsRow(DataRowBuilder rb) :
				base(rb) {
			this.tableskipNameParts = ((skipNamePartsDataTable)(this.Table));
		}

		public partRow[] GetpartRows() {
			return ((partRow[])(this.GetChildRows(this.Table.ChildRelations["skipNameParts_part"])));
		}
	}

	[System.Diagnostics.DebuggerStepThrough()]
	public class skipNamePartsRowChangeEvent : EventArgs {

		private skipNamePartsRow eventRow;

		private DataRowAction eventAction;

		public skipNamePartsRowChangeEvent(skipNamePartsRow row, DataRowAction action) {
			this.eventRow = row;
			this.eventAction = action;
		}

		public skipNamePartsRow Row {
			get {
				return this.eventRow;
			}
		}

		public DataRowAction Action {
			get {
				return this.eventAction;
			}
		}
	}

	[System.Diagnostics.DebuggerStepThrough()]
	public class partDataTable : DataTable, System.Collections.IEnumerable {

		private DataColumn columntxt;

		private DataColumn columnskipNameParts_Id;

		internal partDataTable() :
				base("part") {
			this.InitClass();
		}

		internal partDataTable(DataTable table) :
				base(table.TableName) {
			if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
				this.CaseSensitive = table.CaseSensitive;
			}
			if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
				this.Locale = table.Locale;
			}
			if ((table.Namespace != table.DataSet.Namespace)) {
				this.Namespace = table.Namespace;
			}
			this.Prefix = table.Prefix;
			this.MinimumCapacity = table.MinimumCapacity;
			this.DisplayExpression = table.DisplayExpression;
		}

		[System.ComponentModel.Browsable(false)]
		public int Count {
			get {
				return this.Rows.Count;
			}
		}

		internal DataColumn txtColumn {
			get {
				return this.columntxt;
			}
		}

		internal DataColumn skipNameParts_IdColumn {
			get {
				return this.columnskipNameParts_Id;
			}
		}

		public partRow this[int index] {
			get {
				return ((partRow)(this.Rows[index]));
			}
		}

		public event partRowChangeEventHandler partRowChanged;

		public event partRowChangeEventHandler partRowChanging;

		public event partRowChangeEventHandler partRowDeleted;

		public event partRowChangeEventHandler partRowDeleting;

		public void AddpartRow(partRow row) {
			this.Rows.Add(row);
		}

		public partRow AddpartRow(string txt, skipNamePartsRow parentskipNamePartsRowByskipNameParts_part) {
			partRow rowpartRow = ((partRow)(this.NewRow()));
			rowpartRow.ItemArray = new object[] {
					txt,
					parentskipNamePartsRowByskipNameParts_part[0]};
			this.Rows.Add(rowpartRow);
			return rowpartRow;
		}

		public System.Collections.IEnumerator GetEnumerator() {
			return this.Rows.GetEnumerator();
		}

		public override DataTable Clone() {
			partDataTable cln = ((partDataTable)(base.Clone()));
			cln.InitVars();
			return cln;
		}

		protected override DataTable CreateInstance() {
			return new partDataTable();
		}

		internal void InitVars() {
			this.columntxt = this.Columns["txt"];
			this.columnskipNameParts_Id = this.Columns["skipNameParts_Id"];
		}

		private void InitClass() {
			this.columntxt = new DataColumn("txt", typeof(string), null, System.Data.MappingType.Attribute);
			this.Columns.Add(this.columntxt);
			this.columnskipNameParts_Id = new DataColumn("skipNameParts_Id", typeof(int), null, System.Data.MappingType.Hidden);
			this.Columns.Add(this.columnskipNameParts_Id);
			this.columntxt.AllowDBNull = false;
			this.columntxt.Namespace = "";
		}

		public partRow NewpartRow() {
			return ((partRow)(this.NewRow()));
		}

		protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
			return new partRow(builder);
		}

		protected override System.Type GetRowType() {
			return typeof(partRow);
		}

		protected override void OnRowChanged(DataRowChangeEventArgs e) {
			base.OnRowChanged(e);
			if ((this.partRowChanged != null)) {
				this.partRowChanged(this, new partRowChangeEvent(((partRow)(e.Row)), e.Action));
			}
		}

		protected override void OnRowChanging(DataRowChangeEventArgs e) {
			base.OnRowChanging(e);
			if ((this.partRowChanging != null)) {
				this.partRowChanging(this, new partRowChangeEvent(((partRow)(e.Row)), e.Action));
			}
		}

		protected override void OnRowDeleted(DataRowChangeEventArgs e) {
			base.OnRowDeleted(e);
			if ((this.partRowDeleted != null)) {
				this.partRowDeleted(this, new partRowChangeEvent(((partRow)(e.Row)), e.Action));
			}
		}

		protected override void OnRowDeleting(DataRowChangeEventArgs e) {
			base.OnRowDeleting(e);
			if ((this.partRowDeleting != null)) {
				this.partRowDeleting(this, new partRowChangeEvent(((partRow)(e.Row)), e.Action));
			}
		}

		public void RemovepartRow(partRow row) {
			this.Rows.Remove(row);
		}
	}

	[System.Diagnostics.DebuggerStepThrough()]
	public class partRow : DataRow {

		private partDataTable tablepart;

		internal partRow(DataRowBuilder rb) :
				base(rb) {
			this.tablepart = ((partDataTable)(this.Table));
		}

		public string txt {
			get {
				return ((string)(this[this.tablepart.txtColumn]));
			}
			set {
				this[this.tablepart.txtColumn] = value;
			}
		}

		public skipNamePartsRow skipNamePartsRow {
			get {
				return ((skipNamePartsRow)(this.GetParentRow(this.Table.ParentRelations["skipNameParts_part"])));
			}
			set {
				this.SetParentRow(value, this.Table.ParentRelations["skipNameParts_part"]);
			}
		}
	}

	[System.Diagnostics.DebuggerStepThrough()]
	public class partRowChangeEvent : EventArgs {

		private partRow eventRow;

		private DataRowAction eventAction;

		public partRowChangeEvent(partRow row, DataRowAction action) {
			this.eventRow = row;
			this.eventAction = action;
		}

		public partRow Row {
			get {
				return this.eventRow;
			}
		}

		public DataRowAction Action {
			get {
				return this.eventAction;
			}
		}
	}
}
