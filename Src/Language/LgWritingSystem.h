/*--------------------------------------------------------------------*//*:Ignore this sentence.
Copyright (C) 2003 SIL International. All rights reserved.

Distributable under the terms of either the Common Public License or the
GNU Lesser General Public License, as specified in the LICENSING.txt file.

File: LgWritingSystem.h
Responsibility: ?? (last worked on by Steve McConnel)
Last reviewed:

	This file was initially generated by the conceptual model code generator: cmcg.exe.
	It may be hand edited.

	Note that the interface is declared in Language.idh, but the conceptual model (and hence
	the database schema) is defined in Cellar.cm, since Language does not have a conceptual
	model directory of its own.
-------------------------------------------------------------------------------*//*:End Ignore*/
#pragma once
#ifndef __LgWritingSystem_H
#define __LgWritingSystem_H

/*----------------------------------------------------------------------------------------------
	An WritingSystem represents one way of writing system data in a
	particular language (or dialect). It has a collection of old writing systems, each
	representing one way of displaying this data (together with behaviors related to that),
	plus a number of engines which implement behavior not dependent on old writing system.

	Hungarian: wseng
----------------------------------------------------------------------------------------------*/
class WritingSystem : public IWritingSystem
{
public:
	static void CreateCom(IUnknown *punkCtl, REFIID riid, void ** ppv);
	static void Create(ILgWritingSystemFactory * pwsf, WritingSystem ** pwsm);

	//:> IUnknown methods
	STDMETHOD(QueryInterface)(REFIID iid, void ** ppv);
	STDMETHOD_(ULONG, AddRef)(void)
	{
		return InterlockedIncrement(&m_cref);
	}
	STDMETHOD_(ULONG, Release)(void)
	{
		long cref = InterlockedDecrement(&m_cref);
		if (cref == 0) {
			m_cref = 1;
			delete this;
		}
		return cref;
	}

	//:> IWritingSystem Methods
	STDMETHOD(get_WritingSystem)(int * pws);
	STDMETHOD(get_Name)(int ws, BSTR * pbstrName);
	STDMETHOD(put_Name)(int ws, BSTR bstrName);
	STDMETHOD(get_NameWsCount)(int * pcws);
	STDMETHOD(get_NameWss)(int cws, int * prgws);
	STDMETHOD(get_Locale)(int * pnLocale);
	STDMETHOD(put_Locale)(int nLocale);

	STDMETHOD(get_ConverterFrom)(int ws, ILgStringConverter ** ppstrconv);
	STDMETHOD(get_NormalizeEngine)(ILgStringConverter ** ppstrconv);
	STDMETHOD(get_WordBreakEngine)(ILgTokenizer ** pptoker);
	STDMETHOD(get_SpellCheckDictionary)(BSTR * pbstr);
	STDMETHOD(put_SpellCheckDictionary)(BSTR bstr);
	STDMETHOD(get_SearchEngine)(ILgSearchEngine ** ppsrcheng);
	STDMETHOD(CompileEngines)(void);
	STDMETHOD(get_Dirty)(ComBool * pf);
	STDMETHOD(put_Dirty)(ComBool fDirty);
	STDMETHOD(get_WritingSystemFactory)(ILgWritingSystemFactory ** pwsf);
	STDMETHOD(putref_WritingSystemFactory)(ILgWritingSystemFactory * pwsf);
	STDMETHOD(WriteAsXml)(IStream * pstrm, int nIndent);
	STDMETHOD(Serialize)(IStorage * pstg);
	STDMETHOD(Deserialize)(IStorage * pstg);

	STDMETHOD(get_RightToLeft)(ComBool * pfRightToLeft);
	STDMETHOD(put_RightToLeft)(ComBool fRightToLeft);
	STDMETHOD(get_Renderer)(IVwGraphics * pvg, IRenderEngine ** ppreneng);
	STDMETHOD(get_FontVariation)(BSTR * pbstr);
	STDMETHOD(put_FontVariation)(BSTR bstr);
	STDMETHOD(get_SansFontVariation)(BSTR * pbstr);
	STDMETHOD(put_SansFontVariation)(BSTR bstr);
	STDMETHOD(get_BodyFontFeatures)(BSTR * pbstr);
	STDMETHOD(put_BodyFontFeatures)(BSTR bstr);
	STDMETHOD(get_DefaultSerif)(BSTR * pbstr);
	STDMETHOD(put_DefaultSerif)(BSTR bstr);
	STDMETHOD(get_DefaultSansSerif)(BSTR * pbstr);
	STDMETHOD(put_DefaultSansSerif)(BSTR bstr);
	STDMETHOD(get_DefaultBodyFont)(BSTR * pbstr);
	STDMETHOD(put_DefaultBodyFont)(BSTR bstr);
	STDMETHOD(get_DefaultMonospace)(BSTR * pbstr);
	STDMETHOD(put_DefaultMonospace)(BSTR bstr);
	STDMETHOD(get_ValidChars)(BSTR * pbstr);
	STDMETHOD(put_ValidChars)(BSTR bstr);
	STDMETHOD(get_MatchedPairs)(BSTR * pbstr);
	STDMETHOD(put_MatchedPairs)(BSTR bstr);
	STDMETHOD(get_PunctuationPatterns)(BSTR * pbstr);
	STDMETHOD(put_PunctuationPatterns)(BSTR bstr);
	STDMETHOD(get_CapitalizationInfo)(BSTR * pbstr);
	STDMETHOD(put_CapitalizationInfo)(BSTR bstr);
	STDMETHOD(get_QuotationMarks)(BSTR * pbstr);
	STDMETHOD(put_QuotationMarks)(BSTR bstr);

	STDMETHOD(get_KeyMan)(ComBool * pf);
	STDMETHOD(put_KeyMan)(ComBool f);
	STDMETHOD(get_UiName)(int ws, BSTR * pbstr);

	STDMETHOD(get_CollationCount)(int * pccoll);
	STDMETHOD(get_Collation)(int icoll, ICollation ** ppcoll);
	STDMETHOD(putref_Collation)(int icoll, ICollation * pcoll);
	STDMETHOD(RemoveCollation)(int icoll);

	STDMETHOD(get_Abbr)(int ws, BSTR * pbstr);
	STDMETHOD(put_Abbr)(int ws, BSTR bstr);
	STDMETHOD(get_AbbrWsCount)(int * pcws);
	STDMETHOD(get_AbbrWss)(int cws, int * prgws);
	STDMETHOD(get_Description)(int ws, ITsString ** pptss);
	STDMETHOD(put_Description)(int ws, ITsString * ptss);
	STDMETHOD(get_DescriptionWsCount)(int * pcws);
	STDMETHOD(get_DescriptionWss)(int cws, int * prgws);
	STDMETHOD(get_CollatingEngine)(ILgCollatingEngine ** ppcoleng);
	STDMETHOD(get_CharPropEngine)(ILgCharacterPropertyEngine ** pppropeng);
	STDMETHOD(SetTracing)(int n);
	STDMETHOD(InterpretChrp)(LgCharRenderProps * pchrp);
	STDMETHOD(get_IcuLocale)(BSTR * pbstr);
	STDMETHOD(GetIcuLocaleParts)(BSTR * pbstrLanguage, BSTR * pbstrScript,
		BSTR * pbstrCountry, BSTR * pbstrVariant);
	STDMETHOD(put_IcuLocale)(BSTR bstr);
	STDMETHOD(get_LegacyMapping)(BSTR * pbstr);
	STDMETHOD(put_LegacyMapping)(BSTR bstr);
	STDMETHOD(get_KeymanKbdName)(BSTR * pbstr);
	STDMETHOD(put_KeymanKbdName)(BSTR bstr);
	STDMETHOD(get_LanguageName)(BSTR * pbstr);
	STDMETHOD(get_ScriptName)(BSTR * pbstr);
	STDMETHOD(get_CountryName)(BSTR * pbstr);
	STDMETHOD(get_VariantName)(BSTR * pbstr);
	STDMETHOD(get_LanguageAbbr)(BSTR * pbstr);
	STDMETHOD(get_ScriptAbbr)(BSTR * pbstr);
	STDMETHOD(get_CountryAbbr)(BSTR * pbstr);
	STDMETHOD(get_VariantAbbr)(BSTR * pbstr);
	STDMETHOD(SaveIfDirty)(IOleDbEncap * pode);
	STDMETHOD(InstallLanguage)(ComBool fForce);
	STDMETHOD(get_LastModified)(DATE * pdate);
	STDMETHOD(put_LastModified)(DATE date);
	STDMETHOD(get_CurrentInputLanguage)(int * pnLangId);
	STDMETHOD(put_CurrentInputLanguage)(int nLangId);

	// Set the default collater that should be used for text in this old writing system.
	void SetCollater(ILgCollatingEngine * pcoleng)
	{
		m_qcoleng = pcoleng;
		// Don't set dirty bit -- this isn't persisted in any form.
	}

	void SetHvo(int hvo);
	void Close();

protected:
	WritingSystem();
	~WritingSystem();

	long m_cref;
	// The database Id for the WritingSystem object. This doubles as the writing system code
	// that identifies this Writing System.
	long m_hvo;
	// Multilingual names of this WS, looked up by (possibly other) ws identifiers.
	HashMap<int, StrUni> m_hmwsstuName;
	// Multilingual abbreviations of this WS, looked up by (possibly other) ws identifiers.
	HashMap<int, StrUni> m_hmwsstuAbbr;
	// Review: Is this obsolete?  (MS Windows) Locale assigned to this writing system.
	int m_nLocale;
	bool m_fDirty;
	ILgWritingSystemFactoryPtr m_qwsf;

	bool m_fRightToLeft;
	IRenderEnginePtr m_qrenengUni; // default Uniscribe engine
	ComHashMapStrUni<IRenderEngine> m_hmstureEngines;
	StrUni m_stuFontVar;
	StrUni m_stuSansFontVar;
	StrUni m_stuBodyFontFeatures; // Features = Var. TODO FWM-123: data migration to change variation to features to be consistent with the UI.
	StrUni m_stuDefSerif;
	StrUni m_stuDefSans;
	StrUni m_stuDefBodyFont;
	StrUni m_stuDefMono;
	StrUni m_stuIcuLocale;
	StrUni m_stuLegacyMapping;
	StrUni m_stuKeymanKbdName;
	StrUni m_stuUiName; // Cache for UIName.
	StrUni m_stuValidChars;
	StrUni m_stuMatchedPairs;
	StrUni m_stuPunctuationPatterns;
	StrUni m_stuCapitalizationInfo;
	StrUni m_stuQuotationMarks;
	StrUni m_stuSpellCheckDictionary;
	ILgCharacterPropertyEnginePtr m_qcpe;

	bool m_fHaveModTime;
	bool m_fNewFile;
	SYSTEMTIME m_stModified;

	//>:	TODO 1437 (JohnT): remove these when we make the keyboarder into its own class.
	bool m_fKeyMan;

	bool m_fUseMetricsFromFont;
	int m_dSuperscriptYOffsetNumerator;
	int m_dSuperscriptYOffsetDenominator;
	int m_dSuperscriptSizeNumerator;
	int m_dSuperscriptSizeDenominator;
	int m_dSubscriptYOffsetNumerator;
	int m_dSubscriptYOffsetDenominator;
	int m_dSubscriptSizeNumerator;
	int m_dSubscriptSizeDenominator;


	LANGID m_currentLangId;

	ComVector<ICollation> m_vqcoll;		// Defined collations.
	// Multilingual descriptions of this WS, looked up by (possibly other) ws identifiers.
	ComHashMap<int, ITsString> m_hmwsqtssDescr;

	ILgCollatingEnginePtr m_qcoleng; // default collating engine
	bool ReplaceChrpFontName(LgCharRenderProps * pchrp);
	int m_nTraceSetting; // to set for newly created Graphite renderers.
	void ClearRenderers();
	void GetLanguageFileName(StrUni & stuFile);
	void SetLastModifiedTime();

	// The factory needs to create these directly.
	friend class LgWritingSystemFactory;

	// Let the unit tests create writing system objects directly.
	friend class TestLanguage::TestLgWritingSystem;
	friend class TestLanguage::TestLgWritingSystemFactory;
	friend HRESULT TestLanguage::CreateTestWritingSystem(ILgWritingSystemFactory * pwsf, int ws,
		const wchar * pszWs);
	void SaveToDatabase(IOleDbEncap * pode);
	void IcuInstallLanguage(bool fNewFile);
};
DEFINE_COM_PTR(WritingSystem);


#endif //!__LgWritingSystem_H
