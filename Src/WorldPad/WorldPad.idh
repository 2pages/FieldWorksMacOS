/*--------------------------------------------------------------------*//*:Ignore this sentence.
Copyright (C) 2000, 2001 SIL International. All rights reserved.

Distributable under the terms of either the Common Public License or the
GNU Lesser General Public License, as specified in the LICENSING.txt file.

File: WorldPad.idh
Responsibility: Sharon Correll
Last reviewed: never

Description:
	Type library info for the WorldPad application. Currently the only thing is that
	it implements the IFwTool interface.
	MarkS: Extended to expose WPX load and save.
-------------------------------------------------------------------------------*//*:End Ignore*/

//Forward declarations.
	interface IWpDa;
	interface ISimpleMainWnd;
	interface ISimpleStylesheet;
	interface IVwCacheDa;

#if WIN32
#ifndef NO_COCLASSES

DeclareCoClass(WorldPad, 3AF1D861-7231-4416-AB64-7A6871EF1409)
{
	interface IFwTool;
};

#endif // !NO_COCLASSES

#else // !WIN32

/**
 * Interface IWpDa
 * Interface to the WPX loading and saving parts of WorldPad.
 * @h3{Hungarian: wpda}
 */
DeclareInterface(WpDa, Unknown, 927e6afa-aed3-4bdb-898f-b08f960a00d4)
{

	/**
	 * @summary Loads a WPX document into this WpDa.
	 * @param bstrFile file to load
	 * @param pwpwnd arbitrary mainwnd with a stylesheet and margin and footer information.
	 * @param pwpwndLauncher
	 * @param pflsParsingResult the status of whether parsing was successful, the values of
	 *        which are enumerated in WpDa.h: kflsOkay, kflsPartial, kflsAborted.
	 */
	HRESULT LoadXml(
		[in] BSTR bstrFile,
		[in] ISimpleMainWnd * pwpwnd,
		[in] ISimpleMainWnd * pwpwndLauncher,
		[out, retval] int * pflsParsingResult);

	/**
	 * @summary Saves VwCacheDa content in this WpDa and style and margin and footer information
	 *          in pwpwnd to a WPX file.
	 * @param bstrFile Output file
	 * @param pwpwnd arbitrary mainwnd with a stylesheet and margin and footer information.
	 * @param fDtd
	 */
	HRESULT SaveXml(
		[in] BSTR bstrFile,
		[in] ISimpleMainWnd * pwpwnd,
		[in] ComBool fDtd);
};

#ifndef NO_COCLASSES
DeclareCoClass(WpDa, d506cd12-b203-41af-b408-7a7d597bc68a)
{
	interface IWpDa;
	interface ISilDataAccess;
	interface IVwCacheDa;
};
#endif // !NO_COCLASSES

/**
 * Interface SimpleMainWnd
 * Minimal necessary interface to a mainwnd, containing the needed methods during WPX
 * loading and saving.
 * TopMargin, PageHeader, etc get information about the page an associated document is on.
 * SetTopMargin, SetPageHeader, etc set information about the page an associated document is on.
 */
DeclareInterface(SimpleMainWnd, Unknown, b45f9ebf-d036-405f-aedc-9d62dfad08d5)
{
	HRESULT LauncherWindow(
		[out, retval] ISimpleMainWnd ** foo);
	/** @summary Gets the stylesheet associated with this mainwnd */
	HRESULT GetStylesheet(
		[out, retval] ISimpleStylesheet ** foo);

	HRESULT TopMargin([out,retval] int * foo);
	HRESULT BottomMargin([out,retval] int * foo);
	HRESULT LeftMargin([out,retval] int * foo);
	HRESULT RightMargin([out,retval] int * foo);
	HRESULT HeaderMargin([out,retval] int * foo);
	HRESULT FooterMargin([out,retval] int * foo);
	HRESULT PageSize([out,retval] int * foo);
	HRESULT PageHeight([out,retval] int * foo);
	HRESULT PageWidth([out,retval] int * foo);
	HRESULT PageOrientation([out,retval] int * foo);
	HRESULT PageHeader([out,retval] ITsString ** foo);
	HRESULT PageFooter([out,retval] ITsString ** foo);

	HRESULT SetTopMargin(int dymp);
	HRESULT SetBottomMargin(int dymp);
	HRESULT SetLeftMargin(int dxmp);
	HRESULT SetRightMargin(int dxmp);
	HRESULT SetHeaderMargin(int dymp);
	HRESULT SetFooterMargin(int dymp);
	HRESULT SetPageSize(int s);
	HRESULT SetPageHeight(int dymp);
	HRESULT SetPageWidth(int dxmp);
	HRESULT SetPageOrientation(int n);
	HRESULT SetPageHeader(ITsString * ptss);
	HRESULT SetPageFooter(ITsString * ptss);
};

/**
 * Interface ISimpleStylesheet
 * Stylesheet interface that contains methods needed by WPX C++ load+save code.
 */
DeclareInterface(SimpleStylesheet, Unknown, 744bb48c-b975-48e0-9879-ec64206f521e)
{
	/**
	 * @summary Get textprops for a style by name.
	 * @param cch size of prgchName
	 * @param prgchName name of style to get
	 * @param ppttp the textprops for the style requested, or <c>null</c> if the style isn't there.
	 */
	HRESULT GetStyleRgch(
		[in] int cch,
		[in,size_is(cch)] OLECHAR * prgchName,
		[out,retval] ITsTextProps ** ppttp);

	/**
	 * @summary Get all styles this stylesheet supports.
	 * @param styles Array of style HVOs
	 */
	HRESULT GetStyles(
		[out,retval]  void * styles);

#if !WIN32
	/**
	 * @summary Get all styles this stylesheet supports.
	 * @param maximumNumberOfStyleHvos Allocated length of styleHvos. Must be >=0.
	 * @param styleHvos An allocated int[] to store the style HVOs
	 * @throws ArgumentOutOfRangeException if maximumNumberOfStyleHvos is < 0
	 * @throws ArgumentOutOfRangeException if maximumNumberOfStyleHvos is too small to hold all HVOs
	 */
	HRESULT GetArrayOfStyleHvos(
		[in] int maximumNumberOfStyleHvos,
		[out, size_is(maximumNumberOfStyleHvos)] int * styleHvos);
#endif // !WIN32

	/**
	 * @summary Gets the next style HVO
	 */
	HRESULT NextStyleHVO(
		[out, retval] HVO * nextStyle);

	/**
	 * @summary Add styles in newStyleHvos to this stylesheet, and use nextStyleHvo as the stylesheet's next-style.
	 */
	HRESULT AddLoadedStyles(
		[in, size_is(newStyleHvos_length)] HVO * newStyleHvos,
		[in] int newStyleHvos_length,
		[in] int nextStyleHvo);

#if WIN32
	/**
	 * @summary Fix up the 'next' or 'basedOn' attributes in the styles
	 * @param flid attribute to set
	 * @param hmhvostu map containing the values ofthe attribute
	 */
	HRESULT FixStyleReferenceAttrs(
		[in] int flid,
		[in] void * hmhvostu); // Was HashMap<HVO, StrUni>&
#else // !WIN32
	// TODO-Linux: Shouldn't FixStyleReferenceAttrs be able to be defined two ways without error?

	/**
	 * @summary For each hvo in stylesToModify, set the attribute flid in the DA to be the hvo in
	 * attributeValuesToSet.
	 * This is called during wpx loading to set BasedOn and NextStyle attributes.
	 * @param flid attribute to set, such as 'next' or 'basedOn'
	 * @param stylesToModify array of hvos(styles) to modify
	 * @param attributeValuesToSet array of hvos of styles of which to write into the flid values of stylesToModify
	 * @param count length of each of stylesToModify and attributeValuesToSet
	 */
	HRESULT FixStyleReferenceAttrs(
		[in] int flid,
		[in, size_is(count)] int * stylesToModify,
		[in, size_is(count)] int * attributeValuesToSet,
		[in] int count);
#endif // !WIN32

	HRESULT FinalizeStyles();

	/**
	 * @summary Initializes the text props property on the given style.
	 */
	HRESULT AddEmptyTextProps(
		[in] HVO hvoStyle);

	/**
	 * @summary Gets the HVO of a style by name.
	 * @param styleName Name of style to look for
	 * @returns HVO of named style, or -1 if not found
	 */
	HRESULT GetStyleHvoByName(
		[in] BSTR styleName,
		[out, retval] HVO * hvo);
};
#endif
