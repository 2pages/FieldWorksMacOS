// Copyright (c) 2003-2019 SIL International
// This software is licensed under the LGPL, version 2.1 or later
// (http://www.gnu.org/licenses/lgpl-2.1.html)

using System;
using System.IO;
using System.Xml.Xsl;
using NUnit.Framework;
using SIL.FieldWorks.Common.FwUtils;
using SIL.LCModel;
using SIL.LCModel.Utils;

namespace LanguageExplorerTests.Areas
{
	/// <summary>
	/// Test SFM export
	/// </summary>
	[TestFixture]
	public class StandFormatExportTests : MemoryOnlyBackendProviderTestBase
	{
		/// <summary>
		/// The expected results were generated by applying an Anywhere filter for "bo" on Headword in Sena3/Lexicon Edit, and
		/// exporting the default Configured Dictionary from the Dictionary tool. The final sfm (.db) file was hand edited, so that
		/// the abandoned fs feature information appears after the \ps [PartOfSpeech] on the preceding line
		/// (e.g. "\ps N 5/6" for "bokho").
		///
		/// The test transforms the second phase of the configured dictionary export from .xml to .sfm,
		/// and checks the resulting transform against the hand edited sfm.
		///
		/// The expected results may need to be updated whenever the ConfiguredSfm.xsl is modified.
		/// And they HAVE been updated to include a couple of Custom fields in the bodzi-bodzi entry.
		/// </summary>
		[Test]
		public void ConfiguredDictionary_FsFeatStruc_LT5655()
		{
			var expectedResultsPath = Path.Combine(FwDirectoryFinder.SourceDirectory, "LanguageExplorerTests", "Areas", "ExpectedResults");
			var sXmlPhase2 = Path.Combine(expectedResultsPath, "Phase2-Sena3-bo-ConfiguredDictionary.xml");
			var sXsltSfm = Path.Combine(FwDirectoryFinder.FlexFolder, "Export Templates", "ConfiguredSfm.xsl");
			var sAnswerFile = Path.Combine(expectedResultsPath, "Sena3-bo-ConfiguredDictionary.sfm");
			var sOutputFile = FileUtils.GetTempFile("sfm");

			var transformer = new XslCompiledTransform();
			transformer.Load(sXsltSfm);
			transformer.Transform(sXmlPhase2, sOutputFile);

			using (var test = new StreamReader(sOutputFile))
			using (var control = new StreamReader(sAnswerFile))
			{
				var testResult = test.ReadToEnd();
				var expected = control.ReadToEnd();
				if (Environment.OSVersion.Platform == PlatformID.Unix)
				{
					// The xslt processor on linux inserts a BOM at the beginning, and writes \r\n for newlines.
					var iBegin = testResult.IndexOf("\\lx ");
					if (iBegin > 0 && iBegin < 6)
					{
						testResult = testResult.Substring(iBegin);
					}
					testResult = testResult.Replace("\r\n", "\n");
				}
				Assert.AreEqual(expected, testResult, "FXT Output Differs. If you have done a model change, you can update the 'correct answer' xml files by runing fw\\bin\\FxtAnswersUpdate.bat.");
			}
		}
	}
}