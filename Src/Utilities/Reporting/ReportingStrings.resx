<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ks_Ok" xml:space="preserve">
    <value>&amp;OK</value>
  </data>
  <data name="ksPleaseEMailThisTo0WithThisExactSubject12" xml:space="preserve">
    <value>Please email this to {0} with this exact subject:  {1}

{2}</value>
    <comment>{0}, {1}, and {2} will probably be in English, or at least be readable by English speakers.</comment>
  </data>
  <data name="kstidFieldWorksErrorCaption" xml:space="preserve">
    <value>FieldWorks Error</value>
    <comment>Caption for FieldWorks Error message box</comment>
  </data>
  <data name="kstidFieldWorksErrorExitInfo" xml:space="preserve">
    <value>This application must exit.</value>
    <comment>Hello. My name is Inigo Montoya. You killed my father. Prepare to die</comment>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="cc" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources/cc.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="ksHideDetails" xml:space="preserve">
    <value>Hide Details</value>
    <comment>Replaces "View Details" when showing.</comment>
  </data>
  <data name="ksSampleProblemReport" xml:space="preserve">
    <value>Example:
The Morph Type field cannot be set to Normally Hidden

Steps to reproduce:
1. Go to Lexicon Edit
2. Turn off Show Hidden Fields
3. In the Morph Type field, click the blue arrow, and select Field Visibility &gt; Normally Hidden

Expected result: the morph type field is no longer shown
Actual result: nothing happens.</value>
  </data>
  <data name="kstidGoalAndSuggestion" xml:space="preserve">
    <value>Please describe what you want to accomplish as well as how you would like the program changed:</value>
  </data>
  <data name="kstidMakeSuggestionCaption" xml:space="preserve">
    <value>Make a Suggestion</value>
  </data>
  <data name="kstidMakeSuggestionNotification" xml:space="preserve">
    <value>Thank you for making a suggestion. A detailed description will help us to improve the program</value>
  </data>
  <data name="kstidPleaseEmailThisTo0WithASuitableSubject" xml:space="preserve">
    <value>Please email this report to {0} with a suitable subject:

{1}</value>
    <comment>{1} will be a long string...don't leave it out.</comment>
  </data>
  <data name="kstidProblemAndSteps" xml:space="preserve">
    <value>Please describe the problem and the steps necessary to make it appear:</value>
    <comment>Replaces the second paragraph in the crash report dialog when used for the "Report Problem" menu option.</comment>
  </data>
  <data name="kstidReportProblemCaption" xml:space="preserve">
    <value>Report a Problem</value>
  </data>
  <data name="kstidReportProblemNotification" xml:space="preserve">
    <value>Thank you for reporting a problem. A detailed description will help us to improve the program.</value>
    <comment>Replaces the top line of the crash report dialog when used for the "Report Problem" menu option. </comment>
  </data>
  <data name="kstidSampleSuggestion" xml:space="preserve">
    <value>Example:
Please make interlinear suggestions pay attention to context

Goal:
I want to be able to interlinearize texts faster without having to make choices that I think the program should be able to guess if it considered surrounding words.

Suggestion: Add a field to Word Analyses view in which a regular expression can be specified. If the pattern matches the context in which the word appears, that analysis will be chosen as a suggestion. The pattern should include a special marker for where the word itself must appear.</value>
  </data>
  <data name="kstidSendFailed" xml:space="preserve">
    <value>FieldWorks was not able to send your message automatically. Please try copying it to the clipboard and sending it yourself.</value>
  </data>
  <data name="kstidSendFailedCaption" xml:space="preserve">
    <value>Send Message Failed</value>
  </data>
  <data name="kstidEmailReport" xml:space="preserve">
    <value>Please email this report to the development team: {0}</value>
  </data>
  <data name="kstidradEmail" xml:space="preserve">
    <value>&amp;Open an email containing this message using the default email client</value>
  </data>
  <data name="kstidradSelf" xml:space="preserve">
    <value>&amp;Copy this information to the clipboard and I will paste it into an email message myself.</value>
  </data>
  <data name="kstidViewDetailsLink" xml:space="preserve">
    <value>View Details</value>
  </data>
  <data name="kstidERProblemAndSteps" xml:space="preserve">
    <value>Please describe the steps necessary to make this problem appear:</value>
  </data>
  <data name="kstidERReportProblemNotification" xml:space="preserve">
    <value>An internal error has occurred. To help us fix the problem, please submit this error information to us.</value>
  </data>
  <data name="kstidERTexts" xml:space="preserve">
    <value>An error has occurred</value>
  </data>
  <data name="kstidAdditionalInfoSent" xml:space="preserve">
    <value>Additional information about your computer and project will be sent:</value>
  </data>
  <data name="kstidReportSeriousProblemDearFlex" xml:space="preserve">
    <value>Dear FLEx Team, 
FLEx has reported that my project contains duplicate GUIDs. Please contact me about fixing my database as soon as possible.
Thank you.</value>
  </data>
  <data name="kstidReportSeriousProblemNotification" xml:space="preserve">
    <value>Due to a previous bug in FieldWorks, your project contains some problems in the way the data is stored that will probably cause other errors, such as crashes.</value>
  </data>
  <data name="kstidReportSeriousProblemSteps" xml:space="preserve">
    <value>Please send us the email below so we can fix the data for you.</value>
  </data>
  <data name="kstidSeriousProblemCaption" xml:space="preserve">
    <value>Your Project Requires Technical Clean-up</value>
  </data>
</root>