# Copyright (C) 2003 SIL International
# Terms of use are in the file COPYING
#
# Program to collect tests written in the unit++ framework, writing the
# constructor for each test suite.  This requires that all the tests be
# written in header (.h) files.  This program is invoked like this:
#
#     gawk -f CollectUnit++Tests.awk testThis.h TestThat.h >Collection.cpp
#
# (Other implementations of awk like mawk may also work.)
# This does require a different approach to writing and organizing tests
# than the author of unit++ envisioned, one closer to the approach taken by
# the author of cxxtest.

BEGIN {
	fOpenNamespace = 0;
	fOpenClass = 0;
	printf("// AUTOMATICALLY GENERATED BY %s -f CollectUnit++Tests.awk\n",
		ARGV[0]);
	for (i = 1; i < ARGC; ++i) {
		file = ARGV[i];
		sub(/^.*[\/\\]/, "", file);
		printf("#include \"%s\"\n", file);
	}
}

# Write the namespace used for tests to the output file
# The empty namespace should work, at least if the opening brace is on the
# same line as the namespace keyword.

/^[ \t]*namespace[ \t]+[{a-zA-Z0-9_]/ {
	if ($2 != "unitpp" && $2 != "options_utils") {
		if (fOpenClass) {
			print "\t}"
				fOpenClass = 0;
		}
		if (fOpenNamespace) {
			if ($2 == namespace)
				next;
			print "}";
		}
		print $0;
		if ($0 !~ /{/)
			print "{";
		fOpenNamespace = 1;
		namespace = $2;
	}
	next
}

# Collect the test suite class, and write the first part of the constructor.
# If the test suite class begins with Test (eg, TestMyClass), the name used
# to invoke the suite will be minus the leading "Test" (eg, MyClass).  This
# doesn't work too well if the test suite class is merely Test!

/^[ \t]*class .*:.*suite/ {
	if (fOpenClass)
		print "\t}"
	testclass = $2;
	class = testclass;
	if (class ~ /^Test[A-Za-z_0-9]/)
		sub(/^Test/, "", class);
	printf("\nstatic %s * g_p%s = new %s;\n\n", $2, $2, $2);
	printf("\t%s::%s()\n\t\t: suite(\"unit++ test suite for %s\")\n",
		$2, $2, class);
	printf("\t{\n");
	printf("\t\tsuite::main().add(\"%s\", this);\n", class);
	fOpenClass = 1;
	next
}

# Collect an individual test, and add it to the suite's constructor.
# If the test names begins with test (eg, testMyMethod), the name used to
# invoke the individual test will be minus the leading "test" (eg, MyMethod).
# This doesn't work too well if the test method name is merely test!

/^[ \t]*void[ \t]+test[a-zA-Z0-9_]+[ \t]*([void \t]*)/ {
	testfunc = $2;
	sub(/\([void \t]*\)/, "", testfunc);
	test = testfunc;
	if (test ~ /^test[A-Za-z_0-9]/)
		sub(/^test/, "", test);
	printf("\t\tadd(\"%s\",\n", test);
	printf("\t\t\tunitpp::testcase(this, \"%s.%s\",\n", class, test);
	printf("\t\t\t\t&%s::%s));\n", testclass, testfunc);
	next
}

# Ignore most lines in the input
	{ next }

# Finish off any open constructor or namespace

END {
	if (fOpenClass)
		print "\t}"
	if (fOpenNamespace)
		print "}"
}
