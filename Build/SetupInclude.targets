<?xml version="1.0" encoding="utf-8"?>
<Project InitialTargets="Setup" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<PropertyGroup>
		<IcuVersion>70</IcuVersion>
		<IcuWinFwLibVersion>70.1.123</IcuWinFwLibVersion>
		<GitVersionMsBuildVersion>5.7.0</GitVersionMsBuildVersion>
		<NunitConsoleVersion>3.12.0</NunitConsoleVersion>
		<SilBuildTasksVersion>2.5.0</SilBuildTasksVersion>
		<SilLibVersion>6.0.11</SilLibVersion>

		<fwrt>$([System.IO.Directory]::GetParent($(MSBuildProjectDirectory)))</fwrt>
		<fwrt Condition="'$(fwrt)' == ''">$(MSBuildThisFileDirectory)..</fwrt>
		<IcuWinFwLibTargets>$(fwrt)/packages/Icu4c.Win.Fw.Lib.$(IcuWinFwLibVersion)/build/Icu4c.Win.Fw.Lib.props</IcuWinFwLibTargets>
		<GitVersionMsBuildProps>$(fwrt)/packages/GitVersion.MsBuild.$(GitVersionMsBuildVersion)/build/GitVersion.MsBuild.props</GitVersionMsBuildProps>
		<GitVersionMsBuildTargets>$(fwrt)/packages/GitVersion.MsBuild.$(GitVersionMsBuildVersion)/build/GitVersion.MsBuild.targets</GitVersionMsBuildTargets>
		<SilBuildTaskProps>$(fwrt)/packages/SIL.BuildTasks.$(SilBuildTasksVersion)/build/SIL.BuildTasks.props</SilBuildTaskProps>
		<NUnit3ConsolePath>$(fwrt)/packages/NUnit.ConsoleRunner.$(NunitConsoleVersion)/tools</NUnit3ConsolePath>
		<Nunit3Console>$(NUnit3ConsolePath)/nunit3-console.exe</Nunit3Console>

		<!--
			Check that all the nuget packages that we need in this build script exist in the
			correct version. Otherwise we'll have to install the package and then recursively
			call this build script again so that the files exist when we import them. If they
			all already exist we can just continue with our build.
		-->
		<RestartBuild Condition="(Exists('$(IcuWinFwLibTargets)') And Exists('$(GitVersionMsBuildProps)') And Exists('$(SilBuildTaskProps)') And Exists('$(NUnit3Console)')) Or '$(IsReentry)'=='true'">false</RestartBuild>
		<RestartBuild Condition="(!Exists('$(IcuWinFwLibTargets)') Or !Exists('$(GitVersionMsBuildProps)') Or !Exists('$(SilBuildTaskProps)') Or !Exists('$(NUnit3Console)')) And '$(IsReentry)'!='true'">true</RestartBuild>
	</PropertyGroup>

	<Import Project="$(IcuWinFwLibTargets)" Condition="Exists('$(IcuWinFwLibTargets)')" />
	<Import Project="$(GitVersionMsBuildProps)" Condition="Exists('$(GitVersionMsBuildProps)')" />
	<Import Project="$(GitVersionMsBuildTargets)" Condition="Exists('$(GitVersionMsBuildTargets)')" />
	<Import Project="$(SilBuildTaskProps)" Condition="Exists('$(SilBuildTaskProps)')" />

	<!-- config is generally either Debug or Release, but might be Bounds or Profile. -->
	<!-- if the user gives it lowercase, fix it to be capitalized -->
	<Choose>
		<When Condition="'$(config)'=='Debug'">
			<PropertyGroup>
				<config-lower>debug</config-lower>
				<config-capital>Debug</config-capital>
				<build-type>d</build-type>
			</PropertyGroup>
		</When>
		<When Condition="'$(config)'=='Release'">
			<PropertyGroup>
				<config-lower>release</config-lower>
				<config-capital>Release</config-capital>
				<build-type>r</build-type>
			</PropertyGroup>
		</When>
		<When Condition="'$(config)'=='Bounds'">
			<PropertyGroup>
				<config-lower>bounds</config-lower>
				<config-capital>Bounds</config-capital>
				<build-type>b</build-type>
			</PropertyGroup>
		</When>
		<When Condition="'$(config)'=='Profile'">
			<PropertyGroup>
				<config-lower>profile</config-lower>
				<config-capital>Profile</config-capital>
				<build-type>p</build-type>
			</PropertyGroup>
		</When>
		<When Condition="'$(config)'=='debug'">
			<PropertyGroup>
				<config-lower>debug</config-lower>
				<config-capital>Debug</config-capital>
				<build-type>d</build-type>
			</PropertyGroup>
		</When>
		<When Condition="'$(config)'=='release'">
			<PropertyGroup>
				<config-lower>release</config-lower>
				<config-capital>Release</config-capital>
				<build-type>r</build-type>
			</PropertyGroup>
		</When>
		<When Condition="'$(config)'=='bounds'">
			<PropertyGroup>
				<config-lower>bounds</config-lower>
				<config-capital>Bounds</config-capital>
				<build-type>b</build-type>
			</PropertyGroup>
		</When>
		<When Condition="'$(config)'=='profile'">
			<PropertyGroup>
				<config-lower>profile</config-lower>
				<config-capital>Profile</config-capital>
				<build-type>p</build-type>
			</PropertyGroup>
		</When>
		<Otherwise>
			<PropertyGroup>
				<config-lower>debug</config-lower>
				<config-capital>Debug</config-capital>
				<build-type>d</build-type>
			</PropertyGroup>
		</Otherwise>
	</Choose>

	<Target Name="Setup">
		<CallTarget Targets="RestoreBuildTasks" Condition="!Exists('$(FwBuildTasksProps)')"/>
		<CallTarget Targets="SetupInternal" Condition="!$(RestartBuild)" />
		<MSBuild Projects="$(MSBuildProjectFullPath)" Targets="SetupInternal"
			Properties="IsReentry=true" Condition="$(RestartBuild)" />
	</Target>

  <Target Name="SetupInternal" DependsOnTargets="RestoreBuildTasks"><!-- cannot depend on GenerateVersionFiles, because that creates a file in Output/Common which CleanAll deletes -->

	<!-- refresh the FieldWorks.targets file that gets loaded -->
	<GenerateFwTargets TimeoutValuesFilePath="$(MSBuildThisFileDirectory)/TestTimeoutValues.xml"
		NUnitConsolePath="$(MSBuildThisFileDirectory)../packages/NUnit.ConsoleRunner.$(NunitConsoleVersion)/tools"
		ContinueOnError="true" /> <!-- TODO (Hasso) 2022.10: remove this when errors are resolved -->

	<CpuArchitecture>
		<Output TaskParameter="Value" PropertyName="arch"/>
	</CpuArchitecture>

	<PropertyGroup>
		<dir-separator Condition="'$(OS)'!='Windows_NT'">/</dir-separator>
		<dir-separator Condition="'$(OS)'=='Windows_NT'">\</dir-separator>
		<dir-fwobj>$(fwrt)$(dir-separator)Obj_$(arch)</dir-fwobj>
		<dir-fwoutput Condition="'$(OS)'!='Windows_NT'">$(fwrt)/Output_$(arch)</dir-fwoutput>
		<dir-fwoutput Condition="'$(OS)'=='Windows_NT'">$(fwrt)\Output</dir-fwoutput>
		<dir-outputBase>$(dir-fwoutput)$(dir-separator)$(config-capital)</dir-outputBase>
		<dir-fwoutputCommon>$(dir-fwoutput)$(dir-separator)Common</dir-fwoutputCommon>
		<dir-buildOutputInterop>$(dir-outputBase)</dir-buildOutputInterop>
		<dir-fwoutputlib>$(fwrt)$(dir-separator)Lib</dir-fwoutputlib>
		<dir-fwoutputlibBase>$(dir-fwoutputlib)$(dir-separator)$(config-capital)</dir-fwoutputlibBase>
		<dir-fwoutputlibPlatform Condition="'$(OS)'!='Windows_NT'">$(dir-fwoutputlib)/linux</dir-fwoutputlibPlatform>
		<dir-fwoutputlibPlatform Condition="'$(OS)'=='Windows_NT'">$(dir-fwoutputlib)\windows</dir-fwoutputlibPlatform>
		<dir-fwinstall>$(dir-fwoutput)$(dir-separator)install</dir-fwinstall>
		<dir-fwdistfiles>$(fwrt)$(dir-separator)DistFiles</dir-fwdistfiles>
		<dir-fwdistfiles>$(fwrt)$(dir-separator)DistFiles</dir-fwdistfiles>
		<dir-icuData>$(dir-fwdistfiles)$(dir-separator)Icu$(IcuVersion)</dir-icuData>
		<!-- where to find the COM library on Linux -->
		<com_dir Condition="'$(OS)'!='Windows_NT'">$([System.IO.Directory]::GetParent($(fwrt)))/libcom/COM</com_dir>
		<com_lib Condition="'$(OS)'!='Windows_NT'">$(com_dir)/build$(arch)/src/.libs</com_lib>
		<!-- where to find the ICU files on Linux - requires libicu54-fw and icu54-bin-fw packages -->
		<icu_lib Condition="'$(OS)'!='Windows_NT'">/usr/lib/fieldworks/lib/</icu_lib>
		<icu_bin Condition="'$(OS)'!='Windows_NT'">/usr/lib/fieldworks/icu-bin/</icu_bin>
		<msbuild-props>Configuration=$(config-capital);ReferencePath=$(dir-outputBase);ResolveAssemblyWarnOrErrorOnTargetArchitectureMismatch=None</msbuild-props>

		<excludedCategories>LongRunning,ByHand,SmokeTest</excludedCategories>
		<excludedCategories Condition="'$(desktopNotAvailable)'=='true'">$(excludedCategories),DesktopRequired</excludedCategories>
		<excludedCategories Condition="'$(runAllTests)'!=''">ByHand,SmokeTest</excludedCategories>
		<excludedCategories Condition="'$(arch)'=='x86_64'">$(excludedCategories),ExcludeOnLinux64</excludedCategories>
	</PropertyGroup>
	<!-- Area of filesystem where FieldWorks and its dependencies are being installed. This
	is /usr when installed from a .deb package, or /app when using flatpak. -->
	<CreateProperty Condition="'$(OS)'!='Windows_NT'" Value="/usr">
	  <Output TaskParameter="Value" PropertyName="installation_prefix"/>
	</CreateProperty>
	<CreateProperty Condition="'$(OS)'=='Windows_NT'" Value="">
	  <Output TaskParameter="Value" PropertyName="installation_prefix"/>
	</CreateProperty>

	<!-- Set some environment variables needed by make (or nmake) -->
	<SetEnvVar Variable="PATH" Value="$(dir-outputBase):$(icu_lib):$(icu_bin):$(PATH)" Condition="'$(OS)'=='Unix'"/>
	<SetEnvVar Variable="PATH" Value="$(dir-outputBase);$(PATH);$(dir-outputBase)/lib/$(Arch)" Condition="'$(OS)'=='Windows_NT'"/>
	<SetEnvVar Variable="BUILD_TYPE" Value="$(build-type)"/>
	<SetEnvVar Variable="BUILD_CONFIG" Value="$(config-capital)" />
	<SetEnvVar Variable="BUILD_ROOT" Value="$(fwrt)" />
	<SetEnvVar Variable="ICU_DATA" Value="$(fwrt)/DistFiles/Icu$(IcuVersion)" />

	<!-- Set some environment variables needed on Linux. -->
	<SetEnvVar Variable="LD_LIBRARY_PATH" Value="$(com_lib):$(com_dir)/build$(arch)/lib:$(icu_lib):$(dir-outputBase):$(LD_LIBRARY_PATH)" Condition="'$(OS)'=='Unix'"/>
	<SetEnvVar Variable="MONO_PATH" Value="$(dir-fwdistfiles):$(dir-outputBase)" Condition="'$(OS)'=='Unix'"/>
	<SetEnvVar Variable="MONO_REGISTRY_PATH" Value="$(dir-fwoutput)/registry" Condition="'$(OS)'=='Unix'"/>
	<SetEnvVar Variable="COMPONENTS_MAP_PATH" Value="$(dir-outputBase)" Condition="'$(OS)'=='Unix'"/>
	<SetEnvVar Variable="MONO_RUNTIME_EXECUTABLE_PATH" Value="$(MONO_PREFIX)/bin/mono" Condition="'$(OS)'=='Unix'"/>

	<!-- Copy ICU header files -->
    <ItemGroup>
      <Icu4cIncludes Include="$(IcuFwIncludeDirectory)unicode/*.h" />
    </ItemGroup>
    <Copy SourceFiles="@(Icu4cIncludes)" DestinationFolder="$(fwrt)/Include/unicode" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" />

	<!-- Copy dependencies needed for ParatextPlugin -->
	<ItemGroup>
		<ParatextDeps Include="$(fwrt)/packages/SIL.Lib.$(SilLibVersion)/lib/net46/SIL.*" />
	</ItemGroup>
	<Copy SourceFiles="@(ParatextDeps)" DestinationFolder="$(dir-outputBase)/lib/ParatextDeps"
		SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true"/>

	<!-- Create the output directories if they don't already exist -->

	<Message Text="msbuild-target='$(msbuild-target)'; msbuild-props='$(msbuild-props)'"/>
  </Target>

  <Target Name="DeleteTestFiles">
	<ItemGroup>
		<TestFilesToDelete Include="$(dir-outputBase)\*-nunit-output.xml" />
	</ItemGroup>
	<Delete Files="@(TestFilesToDelete)" />
	<Message Text="Finished deleting NUnit report files." Importance="normal" />
  </Target>

  <Target Name="Initialize" DependsOnTargets="MakeDirs;GenerateVersionFiles"/>

  <Target Name="MakeDirs" DependsOnTargets="Setup;DeleteTestFiles" Condition="'$(action)'!='clean'">
	<MakeDir Directories="$(dir-fwobj);$(dir-outputBase);$(dir-fwoutputCommon)"/>
	<!-- extra directory (and symbolic links) needed for Linux -->
	<MakeDir Directories="$(fwrt)/Output" Condition="!Exists('$(fwrt)/Output') And '$(OS)'=='Unix'"/>
	<Exec Condition="!Exists('$(fwrt)/Output/$(config-capital)') And '$(OS)'=='Unix'"
	  Command="/bin/ln -T -sf $(dir-fwoutput)/$(config-capital) $(fwrt)/Output/$(config-capital)"/>
	<Exec Condition="!Exists('$(fwrt)/Output/$(config-lower)') And '$(OS)'=='Unix'"
	  Command="/bin/ln -T -sf $(dir-fwoutput)/$(config-capital) $(fwrt)/Output/$(config-lower)"/>
	<Exec Condition="!Exists('$(fwrt)/Output/Common') And '$(OS)'=='Unix'"
	  Command="/bin/ln -T -sf $(dir-fwoutput)/Common $(fwrt)/Output/Common"/>
	<Exec Condition="!Exists('$(fwrt)/Output/common') And '$(OS)'=='Unix'"
	  Command="/bin/ln -T -sf $(dir-fwoutput)/Common $(fwrt)/Output/common"/>
	<Exec Condition="!Exists('$(fwrt)/Output/XMI') And '$(OS)'=='Unix'"
	  Command="/bin/ln -T -sf $(dir-fwoutput)/XMI $(fwrt)/Output/XMI"/>
	<Exec Condition="!Exists('$(fwrt)/Output/xmi') And '$(OS)'=='Unix'"
	  Command="/bin/ln -T -sf $(dir-fwoutput)/XMI $(fwrt)/Output/xmi"/>
  </Target>

	<!-- Generate Output/Common/bldinc.h from Src/bldinc.h -->
	<ItemGroup>
		<BldIncTemplate Include="../Src/bldinc.h"/>
		<BldIncOutput Include="../Output/Common/bldinc.h"/>
		<VersionPropertiesFile Include="../Output/Common/Version.txt"/>
	</ItemGroup>
	<!--
		Don't use Inputs and Outputs on the GenerateVersionFiles Target.  (Substitute won't
		write the file if it hasn't changed, but the AssemblyFileVersion datestamp field should
		change once a day.)
	-->
	<Target Name="GenerateVersionFiles">
		<CallTarget Targets="GenerateVersionFilesInternal" Condition="!$(RestartBuild)" />
		<MSBuild Projects="$(MSBuildProjectFullPath)" Targets="GenerateVersionFilesInternal"
			Properties="IsReentry=true" Condition="$(RestartBuild)" />
	</Target>
	<Target Name="GenerateVersionFilesInternal" DependsOnTargets="MakeDirs;GetVersion" Condition="'$(action)'!='clean'">
		<WriteLinesToFile File="@(VersionPropertiesFile)" Lines="FWMAJOR=$(GitVersion_Major);FWMINOR=$(GitVersion_Minor);FWREVISION=$(GitVersion_Patch)" Overwrite="true" />
		<Substitute Template="@(BldIncTemplate)" Symbols="@(VersionPropertiesFile)"
			Output="@(BldIncOutput)" Condition="'$(action)'!='clean' And Exists('../Output/Common')"/>

		<Message Text="Updated bldinc.h"/>
	</Target>

  <PropertyGroup>
	<BUILD_LEVEL Condition="'$(BUILD_LEVEL)'==''">9</BUILD_LEVEL>
	<!-- action is one of the following: build test clean register unregister -->
	<action Condition="'$(action)'==''">build</action>
	<!-- target is one of the targets in the build system. -->
	<target Condition="'$(target)'==''">all</target>
	<platform Condition="'$(platform)'=='' And '$(OS)'!='Windows_NT'">UNIX</platform>
	<platform Condition="'$(platform)'=='' And '$(OS)'=='Windows_NT'">WIN32</platform>
	<verbose Condition="'$(verbose)'==''">false</verbose>
	<buildtlb Condition="'$(buildtlb)'==''">false</buildtlb>
	<!-- Gendarme rule set. See Build/Gendarme.MsBuild/fw-gendarme-rules.xml for possible values. -->
	<verifyset Condition="'$(verifyset)'==''">dispose</verifyset>
	<verifyset-test Condition="'$(verifyset-test)'==''">dispose-test</verifyset-test>
	<verifyfail Condition="'$(verifyfail)'==''">true</verifyfail>
	<autoUpdateIgnores Condition="'$(autoUpdateIgnores)'==''">false</autoUpdateIgnores>
	<!-- <warningsAsErrors Condition="'$(warningsAsErrors)'==''">TreatWarningsAsErrors=true</warningsAsErrors> -->
	<timeoutFudgeFactor Condition="'$(timeoutFudgeFactor)'==''">1</timeoutFudgeFactor>
	<useNUnit-x86 Condition="'$(OS)'=='Windows_NT' And '$(Platform)'!='x64'">true</useNUnit-x86>
	<useNUnit-x86 Condition="'$(OS)'!='Windows_NT' Or '$(Platform)'=='x64'">false</useNUnit-x86>
	<defines Condition="'$(config-lower)'=='release'">TRACE;CODE_ANALYSIS</defines>
	<defines Condition="'$(config-lower)'!='release'">DEBUG;TRACE;CODE_ANALYSIS</defines>
	<IcuFwLibDirectory Condition="'$(Platform)'!='x64'">$(IcuFwLibDirectoryx86)</IcuFwLibDirectory>
	<IcuFwLibDirectory Condition="'$(Platform)'=='x64'">$(IcuFwLibDirectoryx64)</IcuFwLibDirectory>
  </PropertyGroup>

  <Choose>
	<When Condition="'$(action)'=='build'">
	  <PropertyGroup>
		<msbuild-target>Restore;Build</msbuild-target>
		<make-target>all</make-target>
	  </PropertyGroup>
	</When>
	<When Condition="'$(action)'=='clean'">
	  <PropertyGroup>
		<msbuild-target>Clean</msbuild-target>
		<make-target>clean</make-target>
	  </PropertyGroup>
	</When>
	<When Condition="'$(action)'=='rebuild'">
	  <PropertyGroup>
		<msbuild-target>Restore;Rebuild</msbuild-target>
		<make-target>clean all</make-target>
	  </PropertyGroup>
	</When>
	<Otherwise>
	  <PropertyGroup>
		<msbuild-target>Restore;Build</msbuild-target>
		<make-target>all</make-target>
	  </PropertyGroup>
	</Otherwise>
  </Choose>

	<PropertyGroup>
		<!--
			Property for running on build agents. The environment variable BUILDAGENT_SUBKEY
			gets set by the Jenkins build.
			The strings need to be in sync with BasicUtilsTests/Attributes/RedirectHKCU.cs and
			Generic/RedirectHKCU.h
		-->
		<BUILDAGENT_HKCU Condition="'$(BUILDAGENT_SUBKEY)' != ''">Software\SIL\BuildAgents\$(BUILDAGENT_SUBKEY)\HKCU\</BUILDAGENT_HKCU>
	</PropertyGroup>

</Project>
