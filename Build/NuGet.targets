<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<PropertyGroup>
		<NuGetToolsPath>$(MSBuildThisFileDirectory)</NuGetToolsPath>

		<!-- NuGet command -->
		<NuGetExePath>$(NuGetToolsPath)nuget.exe</NuGetExePath>
		<NuGetCommand Condition="'$(OS)' == 'Windows_NT'">"$(NuGetExePath)"</NuGetCommand>
		<!--
		NuGet has trouble when Ubuntu 16.04 pbuilder sets the home directory to /nonexistent. Set a HOME for NuGet to use.
		-->
		<NuGetCommand Condition=" '$(OS)' != 'Windows_NT' ">[ -d $HOME ] || export HOME=`mktemp -d --tmpdir nuget_home.XXXXX`; mono $(NuGetExePath)</NuGetCommand>
	</PropertyGroup>

	<PropertyGroup>
		<NuGetUrl>https://dist.nuget.org/win-x86-commandline/latest/nuget.exe</NuGetUrl>
	</PropertyGroup>

	<Target Name="CheckPrerequisites">
		<!--
		Take advantage of MsBuild's build dependency tracking to make sure that we download nuget.exe only once ever.
		This effectively acts as a lock that makes sure that the download operation will only happen once and all
		parallel builds will have to wait for it to complete.
		-->
		<MSBuild Targets="_DownloadNuGet" Projects="$(MSBuildThisFileFullPath)" Properties="Configuration=NOT_IMPORTANT;" />
	</Target>

	<Target Name="_DownloadNuGet" Condition="!Exists('$(NuGetExePath)')">
		<Message Text="Downloading nuget.exe." />
		<DownloadNuGet OutputFilename="$(NuGetExePath)"
			Condition="'$(OS)' == 'Windows_NT'" />
		<Exec Command="wget $(NuGetUrl) || curl -O -L $(NuGetUrl)"
			WorkingDirectory="$(NuGetToolsPath)"
			Condition="'$(OS)' != 'Windows_NT'" />
	</Target>

	<Target Name="CleanNuGet">
		<ForceDelete Files="$(NuGetExePath)"/>
		<ForceDelete Files="$(fwrt)/packages/"/>
		<ForceDelete Files="$(dir-outputBase)/Firefox/"/>
		<ForceDelete Files="$(dir-outputBase)/Firefox-Linux64/"/>
		<ForceDelete Files="$(dir-outputBase)/Firefox-Linux32/"/>
		<ForceDelete Files="$(dir-outputBase)/Geckofx-*.*"/>
		<Message Text="cleaned $(NuGetExePath) et al."/>
	</Target>

	<UsingTask TaskName="DownloadNuGet" TaskFactory="CodeTaskFactory"
		AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll"
		Condition=" '$(OS)' == 'Windows_NT' ">
		<ParameterGroup>
			<OutputFilename ParameterType="System.String" Required="true" />
		</ParameterGroup>
		<Task>
			<Reference Include="System.Core" />
			<Using Namespace="System" />
			<Using Namespace="System.IO" />
			<Using Namespace="System.Net" />
			<Using Namespace="Microsoft.Build.Framework" />
			<Using Namespace="Microsoft.Build.Utilities" />
			<Code Type="Fragment" Language="cs">
				<![CDATA[
				try {
					OutputFilename = Path.GetFullPath(OutputFilename);

					Log.LogMessage("Downloading latest version of nuget.exe...");

					ServicePointManager.SecurityProtocol |= SecurityProtocolType.Tls12;
					Log.LogMessage("Enabled Protocols: " + ServicePointManager.SecurityProtocol);

					WebClient webClient = new WebClient();
					webClient.DownloadFile("$(NuGetUrl)", OutputFilename);

					return true;
				}
				catch (Exception ex) {
					Log.LogErrorFromException(ex);
					return false;
				}
			]]>
			</Code>
		</Task>
	</UsingTask>
</Project>
