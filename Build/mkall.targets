<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<!-- Make all of FieldWorks. -->
	<Target Name="mkall" DependsOnTargets="initLinux;initWindows;LinuxRegistry;allCpp;testSolution">
		<Message Text="Finished mkall Target."/>
		<ItemGroup>
			<NUnitReportFiles Include="$(dir-outputBase)/*-nunit-output.xml" />
		</ItemGroup>
		<GenerateNUnitReports Condition="'$(action)'=='test'" ReportFiles="@(NUnitReportFiles)"/>
	</Target>

	<Target Name="buildSolution">
		<MSBuild Projects="$(fwrt)/FW.sln" Targets="$(msbuild-target)" Properties="$(msbuild-props)"/>
	</Target>

	<Target Name="testSolution" DependsOnTargets="buildSolution">
		<CallTarget Targets="testOnly" />
		<Message Text="Finished building all projects." Condition="'$(action)'!='test'"/>
		<Message Text="Finished building all projects and running tests." Condition="'$(action)'=='test'"/>
	</Target>

	<Target Name="testOnly" DependsOnTargets="testOnlyManaged;testGenericLibTest;testViewsTest" Condition="'$(action)'=='test'"/>

	<Target Name="testOnlyManaged" Condition="'$(action)'=='test'">
		<ItemGroup>
			<TestAssemblies Include="$(dir-outputBase)/*Tests.dll" Exclude="$(dir-outputBase)/SIL.*" />
		</ItemGroup>
		<NUnit3
			Assemblies="@(TestAssemblies)"
			ToolPath="$(NUnit3ConsolePath)"
			WorkingDirectory="$(dir-outputBase)"
			OutputXmlFile="$(dir-outputBase)/All-nunit-output.xml"
			UseNUnit3Xml="false"
			Verbose="true"
			Force32Bit="$(useNUnit-x86)"
			ExcludeCategory="$(excludedCategories)"
			FudgeFactor="$(timeoutFudgeFactor)"
			Timeout="54000000">
			<Output TaskParameter="FailedSuites" ItemName="FailedSuites"/>
		</NUnit3>
	</Target>

	<Target Name="allCpp" DependsOnTargets="DebugProcs;GenericLib;testGenericLib;FwKernel;Views;testViews">
		<ItemGroup>
			<CompMapFiles Include="$(dir-outputBase)/*.compmap" />
		</ItemGroup>
		<CatenateFiles SourceFiles="@(CompMapFiles)" TargetFile="$(dir-outputBase)/components.map" Condition="'$(OS)'=='Unix'"/>
	</Target>
	<Target Name="allCppNoTest" DependsOnTargets="DebugProcs;GenericLib;FwKernel;Views">
		<ItemGroup>
			<CompMapFiles Include="$(dir-outputBase)/*.compmap" />
		</ItemGroup>
		<CatenateFiles SourceFiles="@(CompMapFiles)" TargetFile="$(dir-outputBase)/components.map" Condition="'$(OS)'=='Unix'"/>
	</Target>

	<Target Name="copyIcuFiles" Condition="'$(OS)'!='Unix'">
		<!-- Need these files in the lib/${Platform} folder for RegFree to load the FwKernel.dll and Views.dll successfully -->
		<ItemGroup Condition="'$(OS)'=='Windows_NT'">
			<IcuLibsX86 Include="$(IcuFwRuntimeWinX86)icu*.dll" />
			<IcuLibsX64 Include="$(IcuFwRuntimeWinX64)icu*.dll" />
		</ItemGroup>

		<Message Text="From $(fwrt)/packages/Icu4c.Win.Fw.Lib.$(IcuWinFwLibVersion)/runtimes/win7-$(Platform)/native/ to $(dir-outputBase)/lib/$(Platform)"/>
		<Copy SourceFiles="@(IcuLibsX86)" DestinationFolder="$(dir-outputBase)/lib/x86" SkipUnchangedFiles="true" />
		<Copy SourceFiles="@(IcuLibsX64)" DestinationFolder="$(dir-outputBase)/lib/x64" SkipUnchangedFiles="true" />

	</Target>

	<Target Name="CopyKernelInterfaces">
		<!--
			The reason for using Exec instead of MsBuild here is that the MsBuild task doesn't
			provide access to the restore flag, and passing the restore target won't try to
			reload .props files after the package restore, even when doing it in two MsBuild task
			calls.
		-->
		<Exec Command="msbuild /restore /t:GenerateCellarConstants /p:Configuration=$(config-capital) $(fwrt)/Src/ViewsInterfaces/ViewsInterfaces.csproj" WorkingDirectory="$(fwrt)/Src/ViewsInterfaces/" />
	</Target>

	<ItemGroup>
		<Fragments Include="$(dir-fwdistfiles)/*.fragment.manifest"/>
	</ItemGroup>
	<Target Name="regFreeCpp" DependsOnTargets="FwKernel;Views"
		AfterTargets="FwKernel;Views" Condition="'$(OS)'=='Windows_NT'">
		<!-- REVIEW (Hasso) 2022.09: should these be forward slashes -->
		<RegFree Executable="$(dir-outputBase)/FwKernel.dll" Output="$(dir-outputBase)/FieldWorks.Tests.manifest"
			Dlls="$(dir-outputBase)\FwKernel.dll;$(dir-outputBase)\Views.dll"
			Fragments="@(Fragments)" Platform="$(Platform)" MSBuildArchitecture="$(Platform)"/>
	</Target>

	<Target Name="DebugProcs" DependsOnTargets="initLinux;initWindows;CopyKernelInterfaces">
		<Make Condition="'$(OS)'=='Windows_NT'"
				Makefile="$(fwrt)\Src\DebugProcs\DebugProcs.mak"
				Configuration="$(config-capital)"
				BuildRoot="$(fwrt)"
				BuildArch="'$(Platform)'"
				Macros="EXTRA_INCLUDE=$(IcuFwIncludeDirectory) EXTRA_LINK_OPTS=/LIBPATH:$(IcuFwLibDirectory)"
				WorkingDirectory="$(fwrt)\Src\DebugProcs"/>
		<Make Condition="'$(OS)'=='Unix'"
				Makefile="$(fwrt)/Src/DebugProcs/Makefile"
				Configuration="$(config-capital)" Target="$(make-target)"
				BuildRoot="$(fwrt)"
				WorkingDirectory="$(fwrt)/Src/DebugProcs"/>
		<Message Text="Finished building DebugProcs."/>
	</Target>

	<Target Name="GenericLib" DependsOnTargets="DebugProcs">
		<Make Condition="'$(OS)'=='Windows_NT'"
				Makefile="$(fwrt)\Src\Generic\GenericLib.mak"
				Configuration="$(config-capital)"
				BuildRoot="$(fwrt)"
				BuildArch="'$(Platform)'"
				WorkingDirectory="$(fwrt)\Src\Generic"/>
		<Make Condition="'$(OS)'=='Unix'"
				Makefile="$(fwrt)/Src/Generic/Makefile"
				Configuration="$(config-capital)" Target="$(make-target)"
				BuildRoot="$(fwrt)"
				WorkingDirectory="$(fwrt)/Src/Generic"/>
		<Message Text="Finished building GenericLib."/>
	</Target>

	<Target Name="testGenericLib" DependsOnTargets="GenericLib;FwKernel;Views">
		<Make Condition="'$(OS)'=='Windows_NT'"
				Makefile="$(fwrt)\Src\Generic\Test\testGenericLib.mak"
				Configuration="$(config-capital)"
				BuildRoot="$(fwrt)"
				BuildArch="'$(Platform)'"
				Macros="EXTRA_INCLUDE=$(IcuFwIncludeDirectory) EXTRA_LINK_OPTS=/LIBPATH:$(IcuFwLibDirectory)"
				WorkingDirectory="$(fwrt)\Bin"/>
		<Make Condition="'$(OS)'=='Unix'"
				Makefile="$(fwrt)/Src/Generic/Test/Makefile"
				Configuration="$(config-capital)" Target="$(make-target)"
				BuildRoot="$(fwrt)"
				WorkingDirectory="$(fwrt)/Src/Generic/Test" />
		<RegFree Executable="$(dir-outputBase)\testGenericLib.exe"
				DependentAssemblies="$(dir-outputBase)\FwKernel.X.manifest;$(dir-outputBase)\Views.X.manifest"
				Condition="'$(OS)'=='Windows_NT'" Platform="$(Platform)" MSBuildArchitecture="$(Platform)"/>
		<Exec Command="set PATH=$(PATH) mt.exe -outputresource:$(dir-outputBase)\testGenericLib.exe -manifest $(dir-outputBase)\testGenericLib.exe.manifest"
				Condition="'$(OS)'=='Windows_NT'"/>
		<Message Text="Finished building testGenericLib." />
	</Target>

	<Target Name="testGenericLibTest" Condition="'$(action)'=='test'">
		<Unitpp FixturePath="$(dir-outputBase)/testGenericLib"
				FudgeFactor="$(timeoutFudgeFactor)"
				Timeout="60000">
			<Output TaskParameter="FailedSuites" ItemName="FailedSuites"/>
		</Unitpp>
		<Message Text="Finished running testGenericLib tests."/>
	</Target>

	<Target Name="FwKernel" DependsOnTargets="GenericLib;CopyKernelInterfaces;AppCore;createCompMaps;copyIcuFiles">
		<Message Text="FwKernel make-target='$(make-target)'"/>
		<Make Condition="'$(OS)'=='Windows_NT'"
			Makefile="$(fwrt)\Src\Kernel\FwKernel.mak"
			Configuration="$(config-capital)"
			BuildRoot="$(fwrt)"
			BuildArch="'$(Platform)'"
			Macros="EXTRA_INCLUDE=$(IcuFwIncludeDirectory) EXTRA_LINK_OPTS=/LIBPATH:$(IcuFwLibDirectory)"
			WorkingDirectory="$(fwrt)\Src\Kernel"/>
		<Make Condition="'$(OS)'=='Unix'"
			Makefile="$(fwrt)/Src/Kernel/Makefile"
			Configuration="$(config-capital)" Target="$(make-target)"
			BuildRoot="$(fwrt)"
			WorkingDirectory="$(fwrt)/Src/Kernel"/>
		<RegFree Executable="$(dir-outputBase)\FwKernel.dll" Output="$(dir-outputBase)\FwKernel.X.manifest" Condition="'$(OS)'=='Windows_NT'" Platform="$(Platform)"  MSBuildArchitecture="$(Platform)"/>
		<Message Text="Finished building FwKernel."/>
	</Target>

	<Target Name="AppCore" DependsOnTargets="DebugProcs;GenericLib">
		<Message Text="AppCore make-target='$(make-target)'"/>
		<Make Condition="'$(OS)'=='Unix'"
				Makefile="$(fwrt)/Src/AppCore/Makefile"
				Configuration="$(config-capital)" Target="$(make-target)"
				BuildRoot="$(fwrt)"
				WorkingDirectory="$(fwrt)/Src/AppCore"/>
		<Message Text="Finished building AppCore."/>
	</Target>

	<Target Name="Views" DependsOnTargets="GenericLib;FwKernel;CopyKernelInterfaces">
		<Make Condition="'$(OS)'=='Windows_NT'"
			Makefile="$(fwrt)\Src\views\Views.mak"
			Configuration="$(config-capital)"
			BuildRoot="$(fwrt)"
			BuildArch="'$(Platform)'"
			Macros="EXTRA_INCLUDE=$(IcuFwIncludeDirectory) EXTRA_LINK_OPTS=/LIBPATH:$(IcuFwLibDirectory)"
			WorkingDirectory="$(fwrt)\Src\views"/>
		<Make Condition="'$(OS)'=='Unix'"
			Makefile="$(fwrt)/Src/views/Makefile"
			Configuration="$(config-capital)" Target="$(make-target)"
			BuildRoot="$(fwrt)"
			WorkingDirectory="$(fwrt)/Src/views"/>
		<RegFree Executable="$(dir-outputBase)\Views.dll" Output="$(dir-outputBase)\Views.X.manifest" Condition="'$(OS)'=='Windows_NT'" Platform="$(Platform)" MSBuildArchitecture="$(Platform)"/>
		<Message Text="Finished building Views."/>
	</Target>

	<Target Name="testViews" DependsOnTargets="GenericLib;Views;RootSite;FwKernel">
		<Make Condition="'$(OS)'=='Windows_NT'"
				Makefile="$(fwrt)\Src\views\Test\testViews.mak"
				Configuration="$(config-capital)"
				BuildRoot="$(fwrt)"
				BuildArch="'$(Platform)'"
				Macros="EXTRA_INCLUDE=$(IcuFwIncludeDirectory) EXTRA_LINK_OPTS=/LIBPATH:$(IcuFwLibDirectory)"
				WorkingDirectory="$(fwrt)\Bin"/>
		<Make Condition="'$(OS)'=='Unix'"
				Makefile="$(fwrt)/Src/views/Test/Makefile"
				Configuration="$(config-capital)" Target="$(make-target)"
				BuildRoot="$(fwrt)"
				WorkingDirectory="$(fwrt)/Src/views/Test"/>
		<RegFree Executable="$(dir-outputBase)\testViews.exe"
				DependentAssemblies="$(dir-outputBase)\FwKernel.X.manifest;$(dir-outputBase)\Views.X.manifest"
				Condition="'$(OS)'=='Windows_NT'" Platform="$(Platform)" MSBuildArchitecture="$(Platform)"/>
		<Exec Command="mt.exe -outputresource:$(dir-outputBase)\testViews.exe -manifest $(dir-outputBase)\testViews.exe.manifest"
				Condition="'$(OS)'=='Windows_NT'"/>

		<ItemGroup>
			<ViewsCompMapFiles Include="$(dir-outputBase)/*.compmap" />
		</ItemGroup>
		<CatenateFiles SourceFiles="@(ViewsCompMapFiles)" TargetFile="$(dir-outputBase)/components.map" Condition="'$(OS)'=='Unix'"/>
		<Message Text="Finished building testViews."/>
	</Target>

	<Target Name="testViewsTest" Condition="'$(action)'=='test'">
		<Unitpp FixturePath="$(dir-outputBase)/testViews"
				FudgeFactor="$(timeoutFudgeFactor)"
				Timeout="250000">
			<Output TaskParameter="FailedSuites" ItemName="FailedSuites"/>
		</Unitpp>
		<Message Text="Finished running testViews tests." />
	</Target>

	<PropertyGroup>
		<Original-OBJ_DIR>$(OBJ_DIR)</Original-OBJ_DIR>
		<Original-BUILD4UX>$(BUILD4UX)</Original-BUILD4UX>
		<Original-ANAL_TYPE>$(ANAL_TYPE)</Original-ANAL_TYPE>
	</PropertyGroup>

	<Target Name="mktlbs" DependsOnTargets="ViewsInterfaces;FwKernel;Views">
		<SetEnvVar Variable="BUILD_OUTPUT" Value="$(dir-fwoutput)" />
		<SetEnvVar Variable="OBJ_DIR" Value="$(dir-fwobj)" />
		<SetEnvVar Variable="BUILD4UX" Value="$(build4ux)"/>
		<SetEnvVar Variable="ANAL_TYPE" Value="performance" Condition="'$(performance)'=='true'"/>
		<Make Condition="'$(OS)'=='Windows_NT'"
				Makefile="$(fwrt)\Src\Kernel\FwKernel.mak"
				Configuration="$(config-capital)"
				Target="dirs $(dir-fwoutputCommon)\FwKernelTlb.tlb"
				BuildRoot="$(fwrt)"
				BuildArch="'$(PLATFORM)'"
				WorkingDirectory="$(fwrt)"/>
		<Make Condition="'$(OS)'=='Windows_NT'"
				Makefile="$(fwrt)\Src\views\Views.mak"
				Configuration="$(config-capital)"
				Target="dirs $(dir-fwoutputCommon)\ViewsTlb.tlb"
				BuildRoot="$(fwrt)"
				WorkingDirectory="$(fwrt)"/>
		<SetEnvVar Variable="BUILD_OUTPUT" Value="$(Original-BUILD_OUTPUT)" />
		<SetEnvVar Variable="OBJ_DIR" Value="$(Original-OBJ_DIR)" />
		<SetEnvVar Variable="BUILD4UX" Value="$(Original-BUILD4UX)" />
		<SetEnvVar Variable="ANAL_TYPE" Value="$(Original-ANAL_TYPE)" />
	</Target>

	<Target Name="remakefw-impl" DependsOnTargets="CleanAll;Initialize;setRegistryValues;mkall"/>

	<Target Name="remakefw-internal">
		<CallTarget Targets="remakefw-impl" Condition="!$(RestartBuild)" />
		<MSBuild Projects="$(MSBuildProjectFullPath)" Targets="remakefw-impl" Properties="Configuration=$(Configuration);Action=$(Action);buildtlb=$(buildtlb)"
			Condition="$(RestartBuild)" />
	</Target>

	<Target Name="remakefw" DependsOnTargets="remakefw-internal">
		<!-- If tests were run on a developer machine, fail to alert the developer of any failures -->
		<Error Condition="'@(FailedSuites)'!=''" Text="The following projects had failing tests: @(FailedSuites)" />
	</Target>

	<Target Name="remakefw-jenkins" DependsOnTargets="remakefw-internal">
		<!-- Jenkins looks at the test output files to see if tests failed, so we don't have to fail on failed tests -->
		<Warning Condition="'@(FailedSuites)'!=''" Text="The following projects had failing tests: @(FailedSuites)" />
	</Target>

	<ItemGroup>
		<!-- Don't delete FieldWorks.targets - that has to be done separately, otherwise we
		delete the file we just create previously when we run remakefw -->
		<!--<GeneratedFiles Include="$(fwrt)/Build/FieldWorks.targets"/>-->
		<GeneratedFiles Include="$(fwrt)/Build/packages.config"/>
		<GeneratedFiles Include="$(fwrt)/Src/**/Collection.cpp"/>
		<GeneratedFiles Include="$(fwrt)/Src/**/asserts.log"/>
		<GeneratedFiles Include="$(fwrt)/Src/ViewsInterfaces/Views.cs"/>
		<GeneratedFiles Include="$(fwrt)/Lib/debug/unit++.lib"/>
		<GeneratedFiles Include="$(fwrt)/Lib/release/unit++.lib"/>
		<GeneratedFiles Include="$(fwrt)/DistFiles/Parts/GeneratedParts.xml"/>
		<GeneratedFiles Include="$(fwrt)/DistFiles/Parts/Generated.fwlayout"/>
	</ItemGroup>

	<Target Name="CleanDownloads">
		<ForceDelete Files="$(DownloadsDir)" />
	</Target>

	<Target Name="Clean" DependsOnTargets="CleanAll">
		<ForceDelete Files="$(fwrt)/Build/FieldWorks.targets"/>
	</Target>

	<Target Name="CleanAll" DependsOnTargets="cleanWindows;cleanLinux">
		<!-- remove the Obj and Output directories -->
		<ForceDelete Files="$(dir-fwobj);$(dir-fwoutput)" />
		<ForceDelete Files="$(fwrt)/Output" Condition="'$(OS)'=='Unix'" />
		<!-- remove other directories and files created during the build process -->
		<ForceDelete Files="@(GeneratedFiles)" />
		<!-- remove LCM files -->
		<ItemGroup>
			<LcmFilesToDelete Include="$(fwrt)/Src/Kernel/*.idh" />
			<LcmFilesToDelete Include="$(fwrt)/Src/Kernel/FwKernelTlb.idl" />
			<LcmFilesToDelete Include="$(fwrt)/DistFiles/Styles.dtd" />
			<LcmFilesToDelete Include="$(fwrt)/DistFiles/Templates/GOLDEtic.xml" />
			<LcmFilesToDelete Include="$(fwrt)/DistFiles/Templates/NewLangProj.fwdata" />
			<LcmFilesToDelete Include="$(fwrt)/DistFiles/Templates/POS.xml" />
			<LcmFilesToDelete Include="$(fwrt)/DistFiles/Templates/SemDom.xml" />
			<LcmFilesToDelete Include="$(dir-fwoutputCommon)/FwKernelTlb.json" />
		</ItemGroup>
		<ForceDelete Files="@(LcmFilesToDelete)" />
		<ForceDelete Files="$(fwrt)/DistFiles/Icu$(IcuVersion)" />
		<SetEnvVar Variable="LD_PRELOAD" Value="" Condition="'$(OS)'=='Unix'"/>
		<Message Text="Finished deleting the output directories!" />
	</Target>

	<PropertyGroup>
<<<<<<< HEAD
||||||| f013144d5
		<MasterVersionInfo>$(fwrt)/Src/MasterVersionInfo.txt</MasterVersionInfo>
		<TeamCityUrl>https://build.palaso.org/</TeamCityUrl>

		<!-- Chorus_Win32masterContinuous is the master branch build of Chorus for Windows development. Update when appropriate. -->
		<ChorusBuildType Condition="'$(OS)'=='Windows_NT'">Chorus_Win32masterContinuous</ChorusBuildType>
		<!-- Chorus_Linux64masterContinuous is the master branch build of Chorus for Linux development. Update when appropriate. -->
		<ChorusBuildType Condition="'$(OS)'=='Unix'">Chorus_Linux64masterContinuous</ChorusBuildType>
		<ChorusBuildTag>.lastSuccessful</ChorusBuildTag>
		<!-- Libpalaso_PalasoWinmasterContinuous is the master branch build of Palaso for Windows development. Update when appropriate. -->
		<PalasoBuildType Condition="'$(OS)'=='Windows_NT' AND '$(arch)'!='x64'">Libpalaso_PalasoWin32masterContinuous</PalasoBuildType>
		<PalasoBuildType Condition="'$(OS)'=='Windows_NT' AND '$(arch)'=='x64'">Libpalaso_PalasoWinmasterContinuous</PalasoBuildType>
		<!-- bt322 is the master branch build of Palaso for Linux development. Update when appropriate. -->
		<PalasoBuildType Condition="'$(OS)'=='Unix'">Libpalaso_PalasoLinux64masterContinuous</PalasoBuildType>
		<PalasoBuildTag>.lastSuccessful</PalasoBuildTag>
		<!--Todo: use PalasoBuildType, when it refers to somewhere that has the IPCFramework.-->
		<!-- bt278 is the develop branch build of IPCFramework for Windows development. Update when appropriate. -->
		<IPCFrameworkBuildType Condition="'$(OS)'=='Windows_NT'">bt278</IPCFrameworkBuildType>
		<!-- bt279 is the develop branch build of IPCFramework for Linux development. Update when appropriate. -->
		<IPCFrameworkBuildType Condition="'$(OS)'=='Unix'">bt279</IPCFrameworkBuildType>
		<!-- bt393 is the master branch build of ExCss for Windows development. Update when appropriate. -->
		<ExCssBuildType Condition="'$(OS)'=='Windows_NT'">bt393</ExCssBuildType>
		<ExCss Condition="'$(OS)'=='Windows_NT'">ExCss</ExCss>
		<!-- bt395 is the master branch build of ExCss for Linux development. Update when appropriate. -->
		<ExCssBuildType Condition="'$(OS)'=='Unix'">bt395</ExCssBuildType>
		<ExCss Condition="'$(OS)'=='Unix'">ExCSS</ExCss>
		<Icu4cBuildType32>Libraries_Icu4cWin32FieldWorksContinuous</Icu4cBuildType32>
		<Icu4cBuildType64>Libraries_Icu4cWin64FieldWorksContinuous</Icu4cBuildType64>
		<HermitCrabBuildType>bt410</HermitCrabBuildType>
		<HermitCrabBuildTag>.lastSuccessful</HermitCrabBuildTag>
		<DownloadsSilOrgDownloadUrl>http://downloads.sil.org/BuildDlls/FW8.1</DownloadsSilOrgDownloadUrl>
		<DownloadsSilOrgOSDownloadUrl Condition="'$(OS)'=='Windows_NT'">$(DownloadsSilOrgDownloadUrl)/Windows</DownloadsSilOrgOSDownloadUrl>
		<DownloadsSilOrgOSDownloadUrl Condition="'$(OS)'=='Unix'">$(DownloadsSilOrgDownloadUrl)/Linux</DownloadsSilOrgOSDownloadUrl>
		<NUnitDownloadUrl>https://github.com/nunit/nunitv2/releases/download/2.6.4/NUnit-2.6.4.zip</NUnitDownloadUrl>
		<LcmBuildType Condition="'$(OS)'=='Windows_NT' AND '$(arch)'!='x64'">Liblcm_LiblcmWin32masterContinuous</LcmBuildType>
		<LcmBuildType Condition="'$(OS)'=='Windows_NT' AND '$(arch)'=='x64'">Liblcm_LiblcmWin64masterContinuous</LcmBuildType>
		<LcmBuildType Condition="'$(OS)'=='Unix'">Liblcm_LiblcmLinux64masterContinuous</LcmBuildType>
		<LcmBuildTag>.lastSuccessful</LcmBuildTag>
		<!-- Windows/.Net and Linux/Mono use different extensions for debug information files. -->
		<DebugInfo Condition="'$(OS)'=='Unix'">dll.mdb</DebugInfo>
		<DebugInfo Condition="'$(OS)'=='Windows_NT'">pdb</DebugInfo>
=======
		<MasterVersionInfo>$(fwrt)/Src/MasterVersionInfo.txt</MasterVersionInfo>
		<TeamCityUrl>https://build.palaso.org/</TeamCityUrl>

		<!-- Versions of NuGet packages. These need to match the versions in nuget-common/packages.config -->
		<ChorusNugetVersion>5.0.0-beta0025</ChorusNugetVersion>
		<PalasoNugetVersion>10.1.0</PalasoNugetVersion>
		<Palaso4ParatextNugetVersion>8.1.0-beta0035</Palaso4ParatextNugetVersion>
		<ParatextNugetVersion>9.2.6.2</ParatextNugetVersion>
		<LcmNugetVersion>10.2.0-beta0053</LcmNugetVersion>
		<IcuNugetVersion>70.1.123</IcuNugetVersion>
		<!--Todo: use PalasoBuildType, when it refers to somewhere that has the IPCFramework.-->
		<!-- bt278 is the develop branch build of IPCFramework for Windows development. Update when appropriate. -->
		<IPCFrameworkBuildType Condition="'$(OS)'=='Windows_NT'">bt278</IPCFrameworkBuildType>
		<!-- bt279 is the develop branch build of IPCFramework for Linux development. Update when appropriate. -->
		<IPCFrameworkBuildType Condition="'$(OS)'=='Unix'">bt279</IPCFrameworkBuildType>
		<IPCFrameworkBuildTag>.lastSuccessful</IPCFrameworkBuildTag>
		<!-- bt393 is the master branch build of ExCss for Windows development. Update when appropriate. -->
		<ExCssBuildType Condition="'$(OS)'=='Windows_NT'">bt393</ExCssBuildType>
		<ExCss Condition="'$(OS)'=='Windows_NT'">ExCss</ExCss>
		<!-- bt395 is the master branch build of ExCss for Linux development. Update when appropriate. -->
		<ExCssBuildType Condition="'$(OS)'=='Unix'">bt395</ExCssBuildType>
		<ExCss Condition="'$(OS)'=='Unix'">ExCSS</ExCss>
		<ExCssBuildTag>.lastSuccessful</ExCssBuildTag>
		<HermitCrabBuildType>bt410</HermitCrabBuildType>
		<HermitCrabBuildTag>.lastSuccessful</HermitCrabBuildTag>
		<GeckoFxHtmlToPdfBuildType Condition="'$(OS)'=='Windows_NT' AND '$(Platform)'!='x64'">GeckofxHtmlToPdf_GeckofxHtmlToPdfGeckofx60Win32continuous</GeckoFxHtmlToPdfBuildType>
		<GeckoFxHtmlToPdfBuildType Condition="'$(OS)'=='Windows_NT' AND '$(Platform)'=='x64'">GeckofxHtmlToPdf_Win64_continuous</GeckoFxHtmlToPdfBuildType>
		<GeckoFxHtmlToPdfBuildType Condition="'$(OS)'=='Unix'">GeckofxHtmlToPdf_GeckofxHtmlToPdfXenial64Geckofx60continuous</GeckoFxHtmlToPdfBuildType>
		<GeckoFxHtmlToPdfBuildTag>.lastSuccessful</GeckoFxHtmlToPdfBuildTag>
		<!-- REVIEW (Hasso) 2022.07: we should move artifacts at this URL to a server that supports https (LT-21074) -->
		<DownloadsSilOrgDownloadUrl>http://downloads.sil.org/BuildDlls/FW8.1</DownloadsSilOrgDownloadUrl>
		<DownloadsSilOrgOSDownloadUrl Condition="'$(OS)'=='Windows_NT'">$(DownloadsSilOrgDownloadUrl)/Windows</DownloadsSilOrgOSDownloadUrl>
		<DownloadsSilOrgOSDownloadUrl Condition="'$(OS)'=='Unix'">$(DownloadsSilOrgDownloadUrl)/Linux</DownloadsSilOrgOSDownloadUrl>
		<!-- Windows/.Net and Linux/Mono use different extensions for debug information files. -->
		<DebugInfo Condition="'$(OS)'=='Unix'">dll.mdb</DebugInfo>
		<DebugInfo Condition="'$(OS)'=='Windows_NT'">pdb</DebugInfo>
>>>>>>> develop
		<DownloadsDir>$(fwrt)/Downloads</DownloadsDir>
		<PackagesDir>$(fwrt)/packages</PackagesDir>
	</PropertyGroup>

<<<<<<< HEAD
||||||| f013144d5
	<ItemGroup>
		<PalasoFiles Include="SIL.Core.dll"/>
		<PalasoFiles Include="SIL.Core.pdb"/>
		<PalasoFiles Include="SIL.Core.Desktop.dll"/>
		<PalasoFiles Include="SIL.Core.Desktop.pdb"/>
		<PalasoFiles Include="SIL.Lift.dll"/>
		<PalasoFiles Include="SIL.Lift.pdb"/>
		<PalasoFiles Include="SIL.Media.dll"/>
		<PalasoFiles Include="SIL.Media.dll.config" Condition="'$(OS)'=='Unix'"/>
		<PalasoFiles Include="SIL.Media.pdb"/>
		<PalasoFiles Include="SIL.Windows.Forms.dll"/>
		<PalasoFiles Include="SIL.Windows.Forms.pdb"/>
		<PalasoFiles Include="SIL.Windows.Forms.GeckoBrowserAdapter.dll"/>
		<PalasoFiles Include="SIL.Windows.Forms.GeckoBrowserAdapter.pdb"/>
		<PalasoFiles Include="SIL.Archiving.dll"/>
		<PalasoFiles Include="SIL.Archiving.dll.config" Condition="'$(OS)'=='Unix'"/>
		<PalasoFiles Include="SIL.Archiving.pdb"/>
		<PalasoFiles Include="Keyman10Interop.dll" Condition="'$(OS)'=='Windows_NT'"/>
		<PalasoFiles Include="Keyman7Interop.dll" Condition="'$(OS)'=='Windows_NT'"/>
		<PalasoFiles Include="KeymanLink.dll" Condition="'$(OS)'=='Windows_NT'"/>
		<PalasoFiles Include="SIL.WritingSystems.dll"/>
		<PalasoFiles Include="SIL.WritingSystems.pdb"/>
		<PalasoFiles Include="SIL.WritingSystems.Tests.dll"/>
		<PalasoFiles Include="SIL.WritingSystems.Tests.pdb"/>
		<PalasoFiles Include="SIL.Windows.Forms.WritingSystems.dll"/>
		<PalasoFiles Include="SIL.Windows.Forms.WritingSystems.pdb"/>
		<PalasoFiles Include="SIL.Windows.Forms.Keyboarding.dll"/>
		<PalasoFiles Include="SIL.Windows.Forms.Keyboarding.dll.config" Condition="'$(OS)'=='Unix'"/>
		<PalasoFiles Include="SIL.Windows.Forms.Keyboarding.pdb"/>
		<PalasoFiles Include="SIL.Lexicon.dll"/>
		<PalasoFiles Include="SIL.Lexicon.pdb"/>
		<PalasoFiles Include="SIL.Scripture.dll"/>
		<PalasoFiles Include="SIL.Scripture.pdb"/>
		<PalasoFiles Include="SIL.TestUtilities.dll"/>
		<PalasoFiles Include="L10NSharp.dll"/>
		<PalasoFiles Include="Commons.Xml.Relaxng.dll"/>
		<PalasoFiles Include="irrKlang.NET4.dll" Condition="'$(OS)'=='Windows_NT'"/>
		<PalasoFiles Include="Enchant.Net.dll"/>
		<PalasoFiles Include="Enchant.Net.dll.config" Condition="'$(OS)'=='Unix'"/>
		<PalasoFiles Include="NDesk.DBus.dll"/>
		<PalasoFiles Include="NDesk.DBus.dll.config"/>
		<PalasoFiles Include="taglib-sharp.dll"/>
		<PalasoFiles Include="Spart.dll"/>

		<ChorusFiles Include="Autofac.dll"/>
		<ChorusFiles Include="Chorus.exe"/>
		<ChorusFiles Include="ChorusHub.exe" Condition="'$(OS)'=='Unix'"/>
		<ChorusFiles Include="LibChorus.dll"/>
		<ChorusFiles Include="Vulcan.Uczniowie.HelpProvider.dll"/>

		<IcuFiles Include="gennorm2.exe"/>
		<IcuFiles Include="icudt$(IcuVersion).dll"/>
		<IcuFiles Include="icuin$(IcuVersion).dll"/>
		<IcuFiles Include="icutu$(IcuVersion).dll"/>
		<IcuFiles Include="icuuc$(IcuVersion).dll"/>
		<IcuFiles Include="icudt.lib"/>
		<IcuFiles Include="icuin.lib"/>
		<IcuFiles Include="icuuc.lib"/>

		<LcmOutputBaseFiles Include="ICSharpCode.SharpZipLib.dll" />
		<LcmOutputBaseFiles Include="Hunspellx86.dll" Condition="'$(OS)'=='Windows_NT' AND '$(Platform)'!='x64'"/>
		<LcmOutputBaseFiles Include="Hunspellx64.dll" Condition="'$(OS)'=='Windows_NT' AND '$(Platform)'=='x64'"/>
		<LcmOutputBaseFiles Include="NHunspell.dll" Condition="'$(OS)'=='Windows_NT'" />
		<LcmOutputBaseFiles Include="Microsoft.Practices.ServiceLocation.dll" />
		<LcmOutputBaseFiles Include="protobuf-net.dll" />
		<LcmOutputBaseFiles Include="StructureMap.dll" />
		<LcmOutputBaseFiles Include="Tools.dll" />
		<LcmOutputBaseFiles Include="SIL.LCModel.FixData.dll" />
		<LcmOutputBaseFiles Include="SIL.LCModel.FixData.pdb" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Utils.dll" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Utils.pdb" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Utils.Tests.dll" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Utils.Tests.dll.config" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Utils.Tests.pdb" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Core.dll" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Core.dll.config"/>
		<LcmOutputBaseFiles Include="SIL.LCModel.Core.pdb" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Core.Tests.dll" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Core.Tests.dll.config" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Core.Tests.pdb" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Build.Tasks.dll" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Build.Tasks.pdb" />
		<LcmOutputBaseFiles Include="SIL.LCModel.dll" />
		<LcmOutputBaseFiles Include="SIL.LCModel.dll.config" />
		<LcmOutputBaseFiles Include="SIL.LCModel.pdb" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Tests.dll" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Tests.dll.config" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Tests.pdb" />

		<LcmOutputCommonFiles Include="KernelInterfaces/FwKernelTlb.json" />

		<LcmFwKernelFiles Include="KernelInterfaces/common.idh" />
		<LcmFwKernelFiles Include="KernelInterfaces/FwKernel.idh" />
		<LcmFwKernelFiles Include="KernelInterfaces/Language.idh" />
		<LcmFwKernelFiles Include="KernelInterfaces/TextServ.idh" />
		<LcmFwKernelFiles Include="KernelInterfaces/FwKernelTlb.idl" />

		<LcmDistFiles Include="Styles.dtd" />

		<!-- GOLDEtic.xml is copied so that developers can use grammatical categories without building localizations.
			Building localizations will overwrite this file with the latest translations. -->
		<LcmTemplatesFiles Include="Templates/GOLDEtic.xml" />
		<LcmTemplatesFiles Include="Templates/NewLangProj.fwdata" />
		<LcmTemplatesFiles Include="Templates/POS.xml" />
		<LcmTemplatesFiles Include="Templates/SemDom.xml" />

		<LcmIcuDataFiles Include="IcuData/data/nfc.txt" />
		<LcmIcuDataFiles Include="IcuData/data/nfcHebrew.txt" />
		<LcmIcuDataFiles Include="IcuData/data/nfcOverrides.txt" />
		<LcmIcuDataFiles Include="IcuData/data/nfkc.txt" />
		<LcmIcuDataFiles Include="IcuData/data/nfkcOverrides.txt" />
		<LcmIcuDataFiles Include="IcuData/data/UnicodeDataOverrides.txt" />

		<LcmIcuNrmFiles Include="IcuData/icudt$(IcuVersion)l/nfc_fw.nrm" />
		<LcmIcuNrmFiles Include="IcuData/icudt$(IcuVersion)l/nfkc_fw.nrm" />
	</ItemGroup>

	<Target Name="downloadDlls" DependsOnTargets="RestoreNuGetPackages" Condition="'$(disableDownloads)'!='true'">
		<MakeDir Directories="$(DownloadsDir)"/>
		<MakeDir Directories="$(DownloadsDir)/lib"/>
		<MakeDir Directories="$(DownloadsDir)/lib/x64"/>
		<MakeDir Directories="$(DownloadsDir)/lib/x86"/>
		<Message Text="NOT" Condition="'$(UseLocalLibraries)'=='Y'"/>
		<Message Text="Downloading artifacts for Palaso, including  L10NSharp, Enchant.Net, ibusdotnet, NDesk.DBus, Spart, and Newtonsoft.Json."/>
		<DownloadFilesFromTeamCity Address="$(TeamCityUrl)" BuildType="$(PalasoBuildType)" VersionInfo="$(MasterVersionInfo)"
			Artifacts="@(PalasoFiles)" DownloadsDir="$(DownloadsDir)" Tag="$(PalasoBuildTag)" Condition="'$(UseLocalLibraries)'!='Y'"/>

		<Message Text="Downloading artifacts for Chorus."/>
		<DownloadFilesFromTeamCity Address="$(TeamCityUrl)" BuildType="$(ChorusBuildType)" VersionInfo="$(MasterVersionInfo)"
			Artifacts="@(ChorusFiles)" DownloadsDir="$(DownloadsDir)" Tag="$(ChorusBuildTag)" Condition="'$(UseLocalLibraries)'!='Y'"/>

		<Message Text="nor" Condition="'$(UseLocalLibraries)'=='Y'"/>
		<Message Text="Downloading artifacts for LCM." />
		<DownloadFilesFromTeamCity Address="$(TeamCityUrl)" BuildType="$(LcmBuildType)" VersionInfo="$(MasterVersionInfo)" Artifacts="LCM.zip" DownloadsDir="$(DownloadsDir)" Condition="'$(UseLocalLibraries)'!='Y'" Tag="$(LcmBuildTag)"/>
		<Message Text="(the above artifacts will be copied from $(PalasoArtifactsDir), $(ChorusArtifactsDir), and $(LcmArtifactsDir), respectively, as  specified in LibraryDevelopment.targets)" Condition="'$(UseLocalLibraries)'=='Y'"/>

		<Message Text="Downloading an artifact for IPCFramework."/>
		<DownloadFilesFromTeamCity Address="$(TeamCityUrl)" BuildType="$(IPCFrameworkBuildType)" VersionInfo="$(MasterVersionInfo)" Artifacts="IPCFramework.dll" DownloadsDir="$(DownloadsDir)"/>

		<!-- Due to platform-specific casing, ExCSS or ExCss is included in a variable -->
		<Message Text="Downloading artifacts for $(ExCss)."/>
		<DownloadFilesFromTeamCity Address="$(TeamCityUrl)" BuildType="$(ExCssBuildType)" VersionInfo="$(MasterVersionInfo)" Artifacts="$(ExCss).dll;$(ExCss).$(DebugInfo)" DownloadsDir="$(DownloadsDir)"/>

		<Message Text="Downloading artifacts for icu4c." Condition="'$(OS)'=='Windows_NT'"/>
		<DownloadFilesFromTeamCity Address="$(TeamCityUrl)" BuildType="$(Icu4cBuildType32)" VersionInfo="$(MasterVersionInfo)" Artifacts="@(IcuFiles)" DownloadsDir="$(DownloadsDir)/lib/x86" Condition="'$(OS)'=='Windows_NT'"/>
		<DownloadFilesFromTeamCity Address="$(TeamCityUrl)" BuildType="$(Icu4cBuildType64)" VersionInfo="$(MasterVersionInfo)" Artifacts="@(IcuFiles)" DownloadsDir="$(DownloadsDir)/lib/x64" Condition="'$(OS)'=='Windows_NT' AND '$(arch)'=='x64'"/>

		<Message Text="Downloading artifacts for HermitCrab." />
		<DownloadFilesFromTeamCity Address="$(TeamCityUrl)" BuildType="$(HermitCrabBuildType)" Tag="$(HermitCrabBuildTag)" VersionInfo="$(MasterVersionInfo)" Artifacts="QuickGraph.dll;SIL.Machine.dll;SIL.Collections.dll;SIL.HermitCrab.dll" DownloadsDir="$(DownloadsDir)"/>

		<Message Text="Downloading Paratext DLLs." />
		<DownloadFile Address="$(DownloadsSilOrgDownloadUrl)/Paratext.LexicalContracts.dll" DownloadsDir="$(DownloadsDir)"/>
		<DownloadFile Address="$(DownloadsSilOrgOSDownloadUrl)/FormattedEditor.dll" DownloadsDir="$(DownloadsDir)"/>
		<DownloadFile Address="$(DownloadsSilOrgOSDownloadUrl)/HelpSystem.dll" DownloadsDir="$(DownloadsDir)"/>
		<DownloadFile Address="$(DownloadsSilOrgOSDownloadUrl)/HtmlEditor.dll" DownloadsDir="$(DownloadsDir)"/>
		<DownloadFile Address="$(DownloadsSilOrgOSDownloadUrl)/NetLoc.dll" DownloadsDir="$(DownloadsDir)"/>
		<DownloadFile Address="$(DownloadsSilOrgOSDownloadUrl)/ParatextShared.dll" DownloadsDir="$(DownloadsDir)"/>
		<DownloadFile Address="$(DownloadsSilOrgOSDownloadUrl)/Utilities.dll" DownloadsDir="$(DownloadsDir)"/>

		<Message Text="Downloading NUnit." />
		<!-- Use wget to download nunit since mono 4.6 has TLS trouble. mono 5 is fine. -->
		<Exec Command="wget '$(NUnitDownloadUrl)' -O '$(DownloadsDir)/NUnit-2.6.4.zip'" Condition="'$(OS)'!='Windows_NT'"/>
		<DownloadFile Address="$(NUnitDownloadUrl)" DownloadsDir="$(DownloadsDir)"/>
	</Target>

	<!-- Setup source variables (to enable local development in libpalaso, chorus, and liblcm) -->
	<PropertyGroup>
		<PalasoArtifactsDir Condition="'$(PalasoArtifactsDir)'==''">$(DownloadsDir)</PalasoArtifactsDir>
		<ChorusArtifactsDir Condition="'$(ChorusArtifactsDir)'==''">$(DownloadsDir)</ChorusArtifactsDir>
		<LcmArtifactsDir Condition="'$(LcmArtifactsDir)'==''">$(DownloadsDir)/LCM</LcmArtifactsDir>
	</PropertyGroup>

	<!-- item group for downloads, to allow easy copying -->
	<!-- wildcards don't work unless the files have already been downloaded once -->
	<ItemGroup>
		<!-- we need to explicitly specify the important files, otherwise they'll be ignored
		if they don't exist by the time this ItemGroup is read -->
		<DownloadedFiles Include="$(DownloadsDir)/IPCFramework.dll"/>
		<!-- xBuild and MsBuild generate different case artifacts off the same solution file. (sigh) -->
		<DownloadedFiles Include="$(DownloadsDir)/$(ExCss).dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/$(ExCss).$(DebugInfo)"/>
		<DownloadedFiles Include="$(DownloadsDir)/FormattedEditor.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/HelpSystem.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/HtmlEditor.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/NetLoc.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/Paratext.LexicalContracts.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/ParatextShared.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/Utilities.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/QuickGraph.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.Machine.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.Collections.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.HermitCrab.dll"/>
	</ItemGroup>

	<Target Name="CopyDlls" DependsOnTargets="downloadDlls;copyLibL10ns">
		<!-- .Net assemblies -->
		<Copy SourceFiles="$(fwrt)/DistFiles/LinqBridge.dll" DestinationFolder="$(dir-outputBase)"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true"/>
		<Copy SourceFiles="$(fwrt)/DistFiles/log4net.dll" DestinationFolder="$(dir-outputBase)"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true"/>
		<Copy SourceFiles="$(fwrt)/Lib/Common/Interop.ResourceDriver.dll" DestinationFolder="$(dir-outputBase)"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true"/>
		<!-- Linux shared libraries -->
		<Copy SourceFiles="$(fwrt)/DistFiles/libxample32.so" DestinationFolder="$(dir-outputBase)"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Condition="'$(OS)'=='Unix'"/>
		<Copy SourceFiles="$(fwrt)/DistFiles/libxample64.so" DestinationFolder="$(dir-outputBase)"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Condition="'$(OS)'=='Unix'"/>
		<!-- Windows dynamically loaded libraries -->
		<Copy SourceFiles="$(fwrt)/DistFiles/xample32.dll" DestinationFiles="$(dir-outputBase)/xample.dll"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Condition="'$(OS)'=='Windows_NT'  AND '$(arch)'!='x64'"/>
		<Copy SourceFiles="$(fwrt)/DistFiles/xample64.dll" DestinationFiles="$(dir-outputBase)/xample.dll"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Condition="'$(OS)'=='Windows_NT' AND '$(arch)'=='x64'"/>
		<!-- ICU libs -->
		<Copy SourceFiles="$(DownloadsDir)/lib/$(arch)/icudt.lib" DestinationFolder="$(fwrt)/Lib"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Condition="'$(OS)'=='Windows_NT'"/>
		<Copy SourceFiles="$(DownloadsDir)/lib/$(arch)/icuin.lib" DestinationFolder="$(fwrt)/Lib"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Condition="'$(OS)'=='Windows_NT'"/>
		<Copy SourceFiles="$(DownloadsDir)/lib/$(arch)/icuuc.lib" DestinationFolder="$(fwrt)/Lib"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Condition="'$(OS)'=='Windows_NT'"/>
		<!-- Copy ICU dll's and exe's to lib/x64 and lib/x86. The ICU .lib files don't need included. -->
		<ItemGroup>
			<IcuFileSet32 Include="$(DownloadsDir)/lib/x86/icu*.dll" />
			<IcuFileSet32 Include="$(DownloadsDir)/lib/x86/gennorm2.exe" />
		</ItemGroup>
		<ItemGroup>
			<IcuFileSet64 Include="$(DownloadsDir)/lib/x64/icu*.dll" />
			<IcuFileSet64 Include="$(DownloadsDir)/lib/x64/gennorm2.exe" />
		</ItemGroup>
		<!-- Include 32-bit ICU, even if arch is x64, so we can provide 32-bit ICU for 32-bit Paratext to use when the tools interact. -->
		<Copy SourceFiles="@(IcuFileSet32)" DestinationFolder="$(dir-outputBase)/lib/x86" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Condition="'$(OS)'=='Windows_NT'" />
		<Copy SourceFiles="@(IcuFileSet64)" DestinationFolder="$(dir-outputBase)/lib/x64" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Condition="'$(OS)'=='Windows_NT' AND '$(arch)'=='x64'" />

		<!-- NUnit dlls -->
		<Unzip ZipFilename="$(DownloadsDir)/NUnit-2.6.4.zip" ToDir="$(DownloadsDir)/" />
		<CreateItem Include="$(DownloadsDir)/NUnit-2.6.4/**/*">
			<Output TaskParameter="Include" ItemName="NUnitFiles"/>
		</CreateItem>
		<Copy SourceFiles="@(NUnitFiles)" DestinationFolder="$(fwrt)/Bin/NUnit/%(RecursiveDir)"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true"/>
		<ForceDelete Files="$(DownloadsDir)/NUnit-2.6.4/" />

		<!-- LCM dlls -->
		<ForceDelete Files="$(DownloadsDir)/LCM/" />
		<Unzip ZipFilename="$(DownloadsDir)/LCM.zip" ToDir="$(DownloadsDir)/LCM/" Condition="'$(UseLocalLibraries)'!='Y'"/>
		<Copy SourceFiles="@(LcmOutputBaseFiles -> '$(LcmArtifactsDir)/%(Identity)')" DestinationFolder="$(dir-outputBase)" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" />
		<Copy SourceFiles="@(LcmOutputCommonFiles -> '$(LcmArtifactsDir)/%(Identity)')" DestinationFolder="$(dir-fwoutputCommon)" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" />
		<Copy SourceFiles="@(LcmFwKernelFiles -> '$(LcmArtifactsDir)/%(Identity)')" DestinationFolder="$(fwrt)/Src/Kernel" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" />
		<Copy SourceFiles="@(LcmDistFiles -> '$(LcmArtifactsDir)/%(Identity)')" DestinationFolder="$(fwrt)/DistFiles" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" />
		<Copy SourceFiles="@(LcmTemplatesFiles -> '$(LcmArtifactsDir)/%(Identity)')" DestinationFolder="$(fwrt)/DistFiles/Templates" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" />
		<Copy SourceFiles="@(LcmIcuDataFiles -> '$(LcmArtifactsDir)/%(Identity)')" DestinationFolder="$(fwrt)/DistFiles/Icu$(IcuVersion)/data" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" />
		<Copy SourceFiles="@(LcmIcuNrmFiles -> '$(LcmArtifactsDir)/%(Identity)')" DestinationFolder="$(fwrt)/DistFiles/Icu$(IcuVersion)/icudt$(IcuVersion)l" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" />

		<!-- Copy the downloaded artifacts -->
		<Copy SourceFiles="@(PalasoFiles -> '$(PalasoArtifactsDir)/%(Identity)')" DestinationFolder="$(dir-outputBase)" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" />
		<Copy SourceFiles="@(ChorusFiles -> '$(ChorusArtifactsDir)/%(Identity)')" DestinationFolder="$(dir-outputBase)" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" />
		<Copy SourceFiles="@(DownloadedFiles)" DestinationFolder="$(dir-outputBase)"
			SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true"/>

		<!-- Encoding Converters Files -->
		<Copy SourceFiles="@(ECWindowsFiles -> '$(fwrt)/packages/Encoding-Converters-Core.$(ECNugetVersion)/lib/net40/$(ECArch)/%(Identity)')"
			DestinationFolder="$(dir-outputBase)" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Condition="'$(OS)'=='Windows_NT'"/>
		<Copy SourceFiles="@(ECPlugins -> '$(fwrt)/packages/Encoding-Converters-Core.$(ECNugetVersion)/Plugins/%(Identity)')"
			DestinationFolder="$(dir-outputBase)/EC/Plugins" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Condition="'$(OS)'=='Windows_NT'"/>

		<!-- NuGet packages. Property- and ItemGroups are inside the target so $(arch) and *'s are read properly -->
		<PropertyGroup>
			<!-- Yes, the Windows version is missing the the OS and the 32-bit architecture. This package must be updated in encoding-converters-core also -->
			<GeckoDir Condition="'$(OS)'=='Windows_NT' AND '$(arch)'!='x64'">$(fwrt)/packages/Geckofx45.45.0.33</GeckoDir>
			<GeckoDir Condition="'$(OS)'=='Windows_NT' AND '$(arch)'=='x64'">$(fwrt)/packages/Geckofx45.64.45.0.33</GeckoDir>
			<Architecture Condition="'$(arch)'=='x86_64'">64</Architecture>
			<Architecture Condition="'$(arch)'!='x86_64'">32</Architecture>
			<GeckoDir Condition="'$(OS)'!='Windows_NT'">$(fwrt)/packages/Geckofx45.$(Architecture).Linux.45.0.36</GeckoDir>
		</PropertyGroup>
		<ItemGroup>
			<!-- The geckofx .dll files are actually pulled from the encoding converters package -->
			<NuGottenFiles Include="$(GeckoDir)/lib/net45/*.*" Exclude="Geckofx-Core.dll;Geckofx-Winforms.dll" Condition="'$(OS)'=='Windows_NT'"/>
			<NuGottenFiles Include="$(GeckoDir)/lib/net40/*.*" Condition="'$(OS)'!='Windows_NT'"/>
			<NuGottenFiles Include="$(GeckoDir)/build/Geckofx-Core.dll.config" Condition="'$(OS)'!='Windows_NT'"/>
			<NuGottenFiles Include="$(GeckoDir)/content/**/*.*"/>
			<NuGottenFiles Include="$(fwrt)/packages/DotNetZip.1.13.3/lib/net40/*.*"/>
			<NuGottenFiles Include="$(fwrt)/packages/NAudio.1.10.0/lib/net35/NAudio.dll"/>
			<NuGottenFiles Include="$(fwrt)/packages/NAudio.Lame.1.1.5/lib/netstandard2.0/NAudio.Lame.dll"/>
			<NuGottenFiles Condition="'$(OS)'=='Windows_NT' AND '$(arch)'!='x64'" Include="$(fwrt)/packages/NAudio.Lame.1.1.5/build/libmp3lame.32.dll"/>
			<NuGottenFiles Condition="'$(OS)'=='Windows_NT' AND '$(arch)'=='x64'" Include="$(fwrt)/packages/NAudio.Lame.1.1.5/build/libmp3lame.64.dll"/>
			<NuGottenFiles Include="$(fwrt)/packages/Newtonsoft.Json.12.0.3/lib/net45/Newtonsoft.Json.dll"/>
			<NuGottenFiles Include="$(fwrt)/packages/Microsoft.Extensions.DependencyModel.2.0.4/lib/net451/Microsoft.Extensions.DependencyModel.dll"/>
			<NuGottenFiles Include="$(fwrt)/packages/icu.net.2.5.4/lib/net451/icu.net.dll"/>
			<NuGottenFiles Include="$(fwrt)/packages/System.ValueTuple.4.5.0/lib/net461/System.ValueTuple.dll"/>
			<NuGottenFiles Include="$(fwrt)/packages\ParatextData.9.0.3\lib\net461\Paratext.LexicalContracts.dll" />
			<NuGottenFiles Include="$(fwrt)/packages\ParatextData.9.0.3\lib\net461\ParatextData.dll"/>
			<NuGottenFiles Include="$(fwrt)/packages\ParatextData.9.0.3\lib\net461\PtxUtils.dll"/>
		</ItemGroup>
		<Copy SourceFiles="@(NuGottenFiles)" DestinationFolder="$(dir-outputBase)/%(RecursiveDir)"
			SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true"/>
		<!-- Copy the libpalso dlls that ParatextData depends on -->
		<ItemGroup>
			<ParatextDeps Include="$(fwrt)/packages/SIL.Lib.6.0.11/lib/net46/SIL.*" />
		</ItemGroup>
		<Copy SourceFiles="@(ParatextDeps)" DestinationFolder="$(dir-outputBase)/lib/ParatextDeps"
			SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true"/>
	</Target>

=======
	<ItemGroup>
		<PalasoFiles Include="SIL.Core.dll"/>
		<PalasoFiles Include="SIL.Core.Desktop.dll"/>
		<PalasoFiles Include="SIL.Lift.dll"/>
		<PalasoFiles Include="SIL.Media.dll"/>
		<PalasoFiles Include="SIL.Media.dll.config" Condition="'$(OS)'=='Unix'"/>
		<PalasoFiles Include="SIL.Windows.Forms.dll"/>
		<PalasoFiles Include="SIL.Windows.Forms.GeckoBrowserAdapter.dll"/>
		<PalasoFiles Include="SIL.Archiving.dll"/>
		<PalasoFiles Include="SIL.Archiving.dll.config" Condition="'$(OS)'=='Unix'"/>
		<PalasoFiles Include="Keyman10Interop.dll" Condition="'$(OS)'=='Windows_NT'"/>
		<PalasoFiles Include="Keyman7Interop.dll" Condition="'$(OS)'=='Windows_NT'"/>
		<PalasoFiles Include="KeymanLink.dll" Condition="'$(OS)'=='Windows_NT'"/>
		<PalasoFiles Include="Mono.Unix.dll" Condition="'$(OS)'!='Windows_NT'" />
		<PalasoFiles Include="Mono.Unix.dll.config" Condition="'$(OS)'!='Windows_NT'" />
		<PalasoFiles Include="SIL.WritingSystems.dll"/>
		<PalasoFiles Include="SIL.WritingSystems.Tests.dll"/>
		<PalasoFiles Include="SIL.Windows.Forms.WritingSystems.dll"/>
		<PalasoFiles Include="SIL.Windows.Forms.Keyboarding.dll"/>
		<PalasoFiles Include="SIL.Windows.Forms.Keyboarding.dll.config" Condition="'$(OS)'=='Unix'"/>
		<PalasoFiles Include="SIL.Lexicon.dll"/>
		<PalasoFiles Include="SIL.TestUtilities.dll"/>
		<PalasoFiles Include="L10NSharp.dll"/>
		<PalasoFiles Include="lib/win-x86/irrKlang.NET4.dll" Condition="'$(OS)'=='Windows_NT' AND '$(Platform)'!='x64'"/>
		<PalasoFiles Include="lib/win-x64/irrKlang.NET4.dll" Condition="'$(OS)'=='Windows_NT' AND '$(Platform)'=='x64'"/>
		<PalasoFiles Include="Enchant.Net.dll"/>
		<PalasoFiles Include="Enchant.Net.dll.config" Condition="'$(OS)'=='Unix'"/>
		<PalasoFiles Include="NDesk.DBus.dll"/>
		<PalasoFiles Include="NDesk.DBus.dll.config"/>
		<PalasoFiles Include="TagLibSharp.dll"/>
		<PalasoFiles Include="Tenuto.dll"/>
		<PalasoFiles Include="relaxngDatatype.dll"/>
		<PalasoFiles Include="Spart.dll"/>
		<PalasoFiles Include="SIL.Core.pdb"/>
		<PalasoFiles Include="SIL.Core.Desktop.pdb"/>
		<PalasoFiles Include="SIL.Lift.pdb"/>
		<PalasoFiles Include="SIL.Media.pdb"/>
		<PalasoFiles Include="SIL.Windows.Forms.pdb"/>
		<PalasoFiles Include="SIL.Windows.Forms.GeckoBrowserAdapter.pdb"/>
		<PalasoFiles Include="SIL.Windows.Forms.WritingSystems.pdb"/>
		<PalasoFiles Include="SIL.Archiving.pdb"/>
		<PalasoFiles Include="SIL.WritingSystems.pdb"/>
		<PalasoFiles Include="SIL.WritingSystems.Tests.pdb"/>
		<PalasoFiles Include="SIL.Windows.Forms.Keyboarding.pdb"/>
		<PalasoFiles Include="SIL.Lexicon.pdb"/>

		<ChorusFiles Include="Autofac.dll"/>
		<ChorusFiles Include="Chorus.exe"/>
		<ChorusFiles Include="ChorusHub.exe" Condition="'$(OS)'=='Unix'"/>
		<ChorusFiles Include="LibChorus.dll"/>
		<ChorusFiles Include="Vulcan.Uczniowie.HelpProvider.dll"/>

		<IcuFiles Include="gennorm2.exe"/>
		<IcuFiles Include="icudt$(IcuVersion).dll"/>
		<IcuFiles Include="icuin$(IcuVersion).dll"/>
		<IcuFiles Include="icutu$(IcuVersion).dll"/>
		<IcuFiles Include="icuuc$(IcuVersion).dll"/>
		<IcuFiles Include="icudt.lib"/>
		<IcuFiles Include="icuin.lib"/>
		<IcuFiles Include="icuuc.lib"/>

		<LcmOutputBaseFiles Include="ICSharpCode.SharpZipLib.dll" />
		<LcmOutputBaseFiles Include="Hunspellx86.dll" Condition="'$(OS)'=='Windows_NT' AND '$(Platform)'!='x64'"/>
		<LcmOutputBaseFiles Include="Hunspellx64.dll" Condition="'$(OS)'=='Windows_NT' AND '$(Platform)'=='x64'"/>
		<LcmOutputBaseFiles Include="NHunspell.dll" Condition="'$(OS)'=='Windows_NT'" />
		<LcmOutputBaseFiles Include="CommonServiceLocator.dll" />
		<LcmOutputBaseFiles Include="protobuf-net.dll" />
		<LcmOutputBaseFiles Include="StructureMap.dll" />
		<LcmOutputBaseFiles Include="SIL.LCModel.FixData.dll" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Utils.dll" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Utils.Tests.dll" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Utils.Tests.dll.config" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Core.dll" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Core.dll.config"/>
		<LcmOutputBaseFiles Include="SIL.LCModel.Core.Tests.dll" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Core.Tests.dll.config" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Build.Tasks.dll" />
		<LcmOutputBaseFiles Include="SIL.LCModel.dll" />
		<LcmOutputBaseFiles Include="SIL.LCModel.dll.config" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Tools.dll" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Tests.dll" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Tests.dll.config" />
		<LcmOutputBaseFiles Include="SIL.LCModel.FixData.pdb" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Utils.pdb" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Utils.Tests.pdb" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Core.pdb" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Core.Tests.pdb" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Build.Tasks.pdb" />
		<LcmOutputBaseFiles Include="SIL.LCModel.pdb" />
		<LcmOutputBaseFiles Include="SIL.LCModel.Tests.pdb" />

		<LcmOutputCommonFiles Include="KernelInterfaces/FwKernelTlb.json" />

		<LcmFwKernelFiles Include="KernelInterfaces/common.idh" />
		<LcmFwKernelFiles Include="KernelInterfaces/FwKernel.idh" />
		<LcmFwKernelFiles Include="KernelInterfaces/Language.idh" />
		<LcmFwKernelFiles Include="KernelInterfaces/TextServ.idh" />
		<LcmFwKernelFiles Include="KernelInterfaces/FwKernelTlb.idl" />

		<LcmDistFiles Include="Styles.dtd" />

		<!-- GOLDEtic.xml is copied so that developers can use grammatical categories without building localizations.
			Building localizations will overwrite this file with the latest translations. -->
		<LcmTemplatesFiles Include="Templates/GOLDEtic.xml" />
		<LcmTemplatesFiles Include="Templates/NewLangProj.fwdata" />
		<LcmTemplatesFiles Include="Templates/POS.xml" />
		<LcmTemplatesFiles Include="Templates/SemDom.xml" />

		<LcmIcuDataFiles Include="IcuData/data/nfc.txt" />
		<LcmIcuDataFiles Include="IcuData/data/nfcHebrew.txt" />
		<LcmIcuDataFiles Include="IcuData/data/nfcOverrides.txt" />
		<LcmIcuDataFiles Include="IcuData/data/nfkc.txt" />
		<LcmIcuDataFiles Include="IcuData/data/nfkcOverrides.txt" />
		<LcmIcuDataFiles Include="IcuData/data/UnicodeDataOverrides.txt" />

		<LcmIcuNrmFiles Include="IcuData/icudt$(IcuVersion)l/nfc_fw.nrm" />
		<LcmIcuNrmFiles Include="IcuData/icudt$(IcuVersion)l/nfkc_fw.nrm" />
	</ItemGroup>

	<Target Name="downloadDlls" DependsOnTargets="RestoreNuGetPackages;CollectAssemblyAndPdbPaths" Condition="'$(disableDownloads)'!='true'">
		<MakeDir Directories="$(DownloadsDir)"/>
		<MakeDir Directories="$(DownloadsDir)/lib"/>
		<MakeDir Directories="$(DownloadsDir)/lib/x64"/>
		<MakeDir Directories="$(DownloadsDir)/lib/x86"/>

		<!-- TODO (Hasso) 2011.11: copy on Condition="'$(UseLocalLibraries)'!='Y'" -->
		<Message Text="Copying artifacts from Palaso, Chorus, LCM, and related packages to Downloads."/>
		<Copy SourceFiles="@(SILNugetFiles)" DestinationFolder="$(DownloadsDir)/%(RecursiveDir)" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true"/>
		<Message Text="(Palaso, Chorus, and LCM artifacts will be copied to Output from $(PalasoArtifactsDir), $(ChorusArtifactsDir), and $(LcmArtifactsDir), respectively, as  specified in LibraryDevelopment.targets)" Condition="'$(UseLocalLibraries)'=='Y'"/>
		<Message Text="Downloading an artifact for IPCFramework."/>
		<DownloadFilesFromTeamCity Address="$(TeamCityUrl)" BuildType="$(IPCFrameworkBuildType)" Tag="$(IPCFrameworkBuildTag)" Artifacts="IPCFramework.dll" DownloadsDir="$(DownloadsDir)"/>

		<!-- Due to platform-specific casing, ExCSS or ExCss is included in a variable -->
		<Message Text="Downloading artifacts for $(ExCss)."/>
		<DownloadFilesFromTeamCity Address="$(TeamCityUrl)" BuildType="$(ExCssBuildType)" Tag="$(ExCssBuildTag)" Artifacts="$(ExCss).dll;$(ExCss).$(DebugInfo)" DownloadsDir="$(DownloadsDir)"/>

		<Message Text="Downloading artifacts for HermitCrab." />
		<DownloadFilesFromTeamCity Address="$(TeamCityUrl)" BuildType="$(HermitCrabBuildType)" Tag="$(HermitCrabBuildTag)" Artifacts="QuickGraph.dll;SIL.Machine.dll;SIL.Collections.dll;SIL.HermitCrab.dll" DownloadsDir="$(DownloadsDir)"/>

		<Message Text="Downloading artifacts for geckofxHtmlToPdf." />
		<DownloadFilesFromTeamCity Address="$(TeamCityUrl)" BuildType="$(GeckoFxHtmlToPdfBuildType)" Tag="$(GeckoFxHtmlToPdfBuildTag)" Artifacts="GeckofxHtmlToPdf.exe;GeckofxHtmlToPdf.exe.config;Args.dll" DownloadsDir="$(DownloadsDir)"/>

		<!-- REVIEW (Hasso) 2022.07: Are these available in NuGet packages? (LT-21074) -->
		<Message Text="Downloading Paratext DLLs." />
		<DownloadFile Address="$(DownloadsSilOrgOSDownloadUrl)/FormattedEditor.dll" DownloadsDir="$(DownloadsDir)"/>
		<DownloadFile Address="$(DownloadsSilOrgOSDownloadUrl)/HelpSystem.dll" DownloadsDir="$(DownloadsDir)"/>
		<DownloadFile Address="$(DownloadsSilOrgOSDownloadUrl)/HtmlEditor.dll" DownloadsDir="$(DownloadsDir)"/>
		<DownloadFile Address="$(DownloadsSilOrgOSDownloadUrl)/NetLoc.dll" DownloadsDir="$(DownloadsDir)"/>
		<DownloadFile Address="$(DownloadsSilOrgOSDownloadUrl)/ParatextShared.dll" DownloadsDir="$(DownloadsDir)"/>
		<DownloadFile Address="$(DownloadsSilOrgOSDownloadUrl)/Utilities.dll" DownloadsDir="$(DownloadsDir)"/>
	</Target>

	<Target Name="CollectAssemblyAndPdbPaths" DependsOnTargets="DefineNugetPackages" Outputs="%(SILNugetPackages.Identity)">
		<MakeDir Directories="$(DownloadsDir)/symbols"/>
		<DownloadFile Address="https://www.nuget.org/api/v2/symbolpackage/%(SILNugetPackages.Identity)/%(SILNugetPackages.Version)"
			DownloadsDir="$(DownloadsDir)/symbols" LocalFilename="%(SILNugetPackages.Identity).snupkg" Condition="'%(SILNugetPackages.NoSymbols)' != 'true'" />
		<Unzip ZipFilename="$(DownloadsDir)/symbols/%(SILNugetPackages.Identity).snupkg" ToDir="$(DownloadsDir)/symbols/%(SILNugetPackages.Identity).%(SILNugetPackages.Version)" Condition="'%(SILNugetPackages.NoSymbols)' != 'true'" />
		<ItemGroup>
		<SILNugetFiles Include="$(PackagesDir)/%(SILNugetPackages.Identity).%(SILNugetPackages.Version)/%(SILNugetPackages.Path)" />
		<SILNugetFiles Include="$(DownloadsDir)/symbols/%(SILNugetPackages.Identity).%(SILNugetPackages.Version)/%(SILNugetPackages.Path)" Condition="'%(SILNugetPackages.NoSymbols)' != 'true'" />
		</ItemGroup>
	</Target>

	<Target Name="DefineNugetPackages">
		<ItemGroup>
			<!-- We had been downloading these Nuget packages from TeamCity. Because our copyDlls target can copy either downloaded or locally-built artifacts, copy them all to Downloads so the directory structure matches (locally-built artifacts have no separate packages). -->
			<SILNugetPackages Include="Icu4c.Win.Fw.Bin" Condition="'$(OS)'=='Windows_NT'"><Version>$(IcuNugetVersion)</Version><Path>build/**/*.*</Path><NoSymbols>true</NoSymbols></SILNugetPackages>
			<SILNugetPackages Include="Icu4c.Win.Fw.Lib" Condition="'$(OS)'=='Windows_NT'"><Version>$(IcuNugetVersion)</Version><Path>runtimes/**/*.*</Path><NoSymbols>true</NoSymbols></SILNugetPackages>
			<SILNugetPackages Include="Icu4c.Win.Fw.Lib"><Version>$(IcuNugetVersion)</Version><Path>build/native/**/*.*</Path><NoSymbols>true</NoSymbols></SILNugetPackages>
			<!-- LCM and related packages -->
			<SILNugetPackages Include="SIL.LCModel"><Version>$(LcmNugetVersion)</Version><Path>lib/net461/*.*</Path></SILNugetPackages>
			<SILNugetPackages Include="SIL.LCModel"><Version>$(LcmNugetVersion)</Version><Path>contentFiles/**/*.*</Path></SILNugetPackages>
			<SILNugetPackages Include="SIL.LCModel.Build.Tasks"><Version>$(LcmNugetVersion)</Version><Path>tools/net461/*.*</Path></SILNugetPackages>
			<SILNugetPackages Include="SIL.LCModel.Core"><Version>$(LcmNugetVersion)</Version><Path>lib/net461/*.*</Path></SILNugetPackages>
			<SILNugetPackages Include="SIL.LCModel.Core"><Version>$(LcmNugetVersion)</Version><Path>contentFiles/**/*.*</Path></SILNugetPackages>
			<SILNugetPackages Include="SIL.LCModel.Core.Tests"><Version>$(LcmNugetVersion)</Version><Path>lib/net461/*.*</Path></SILNugetPackages>
			<SILNugetPackages Include="SIL.LCModel.FixData"><Version>$(LcmNugetVersion)</Version><Path>lib/net461/*.*</Path></SILNugetPackages>
			<SILNugetPackages Include="SIL.LCModel.Utils"><Version>$(LcmNugetVersion)</Version><Path>lib/net461/*.*</Path></SILNugetPackages>
			<SILNugetPackages Include="SIL.LCModel.Utils.Tests"><Version>$(LcmNugetVersion)</Version><Path>lib/net461/*.*</Path></SILNugetPackages>
			<SILNugetPackages Include="SIL.LCModel.Tests"><Version>$(LcmNugetVersion)</Version><Path>lib/net461/*.*</Path></SILNugetPackages>
			<SILNugetPackages Include="SIL.LCModel.Tools"><Version>$(LcmNugetVersion)</Version><Path>lib/net461/*.*</Path></SILNugetPackages>
			<SILNugetPackages Include="CommonServiceLocator"><Version>1.4.0</Version><Path>lib/net45/*.*</Path><NoSymbols>true</NoSymbols></SILNugetPackages>
			<SILNugetPackages Include="Mono.Unix" Condition="'$(OS)'!='Windows_NT'"><Version>7.1.0-final.1.21458.1</Version><Path>lib/net45/*.*</Path><NoSymbols>true</NoSymbols></SILNugetPackages>
			<SILNugetPackages Include="NHunspell.Patched"><Version>1.2.5554</Version><Path>lib/net/*.*</Path><NoSymbols>true</NoSymbols></SILNugetPackages>
			<SILNugetPackages Include="NHunspell.Patched"><Version>1.2.5554</Version><Path>runtimes/win7-$(Platform)/native/*.*</Path><NoSymbols>true</NoSymbols></SILNugetPackages>
			<SILNugetPackages Include="protobuf-net"><Version>2.4.6</Version><Path>lib/net40/*.*</Path><NoSymbols>true</NoSymbols></SILNugetPackages>
			<SILNugetPackages Include="SharpZipLib"><Version>1.0.0</Version><Path>lib/net45/*.*</Path><NoSymbols>true</NoSymbols></SILNugetPackages>
			<SILNugetPackages Include="structuremap.patched"><Version>4.7.3</Version><Path>lib/net45/*.*</Path><NoSymbols>true</NoSymbols></SILNugetPackages>
			<SILNugetPackages Include="System.CodeDom"><Version>4.4.0</Version><Path>lib/netstandard2.0/*.*</Path><NoSymbols>true</NoSymbols></SILNugetPackages>
			<!-- Palaso and related packages -->
			<SILNugetPackages Include="SIL.Archiving"><Version>$(PalasoNugetVersion)</Version><Path>lib/net461/*.*</Path></SILNugetPackages>
			<SILNugetPackages Include="SIL.Archiving"><Version>$(PalasoNugetVersion)</Version><Path>contentFiles/any/any/*.*</Path><NoSymbols>true</NoSymbols></SILNugetPackages>
			<SILNugetPackages Include="SIL.Core"><Version>$(PalasoNugetVersion)</Version><Path>lib/net461/*.*</Path></SILNugetPackages>
			<SILNugetPackages Include="SIL.Core.Desktop"><Version>$(PalasoNugetVersion)</Version><Path>lib/net461/*.*</Path></SILNugetPackages>
			<SILNugetPackages Include="SIL.Media"><Version>$(PalasoNugetVersion)</Version><Path>build/**/*.*</Path><NoSymbols>true</NoSymbols></SILNugetPackages>
			<SILNugetPackages Include="SIL.Media"><Version>$(PalasoNugetVersion)</Version><Path>lib/net461/*.*</Path></SILNugetPackages>
			<SILNugetPackages Include="SIL.Media"><Version>$(PalasoNugetVersion)</Version><Path>contentFiles/any/any/*.*</Path><NoSymbols>true</NoSymbols></SILNugetPackages>
			<SILNugetPackages Include="SIL.Lift"><Version>$(PalasoNugetVersion)</Version><Path>lib/net461/*.*</Path></SILNugetPackages>
			<SILNugetPackages Include="SIL.Lexicon"><Version>$(PalasoNugetVersion)</Version><Path>lib/net461/*.*</Path></SILNugetPackages>
			<SILNugetPackages Include="SIL.TestUtilities"><Version>$(PalasoNugetVersion)</Version><Path>lib/net461/*.*</Path></SILNugetPackages>
			<SILNugetPackages Include="SIL.Windows.Forms"><Version>$(PalasoNugetVersion)</Version><Path>lib/net461/*.*</Path></SILNugetPackages>
			<SILNugetPackages Include="SIL.Windows.Forms.Keyboarding"><Version>$(PalasoNugetVersion)</Version><Path>lib/net461/*.*</Path></SILNugetPackages>
			<SILNugetPackages Include="SIL.Windows.Forms.Keyboarding"><Version>$(PalasoNugetVersion)</Version><Path>build/*.*</Path><NoSymbols>true</NoSymbols></SILNugetPackages>
			<SILNugetPackages Include="SIL.Windows.Forms.Keyboarding"><Version>$(PalasoNugetVersion)</Version><Path>contentFiles/any/any/*.*</Path><NoSymbols>true</NoSymbols></SILNugetPackages>
			<SILNugetPackages Include="SIL.Windows.Forms.GeckoBrowserAdapter"><Version>$(PalasoNugetVersion)</Version><Path>lib/net461/*.*</Path></SILNugetPackages>
			<SILNugetPackages Include="SIL.Windows.Forms.WritingSystems"><Version>$(PalasoNugetVersion)</Version><Path>lib/net461/*.*</Path></SILNugetPackages>
			<SILNugetPackages Include="SIL.WritingSystems"><Version>$(PalasoNugetVersion)</Version><Path>lib/net461/*.*</Path></SILNugetPackages>
			<SILNugetPackages Include="SIL.WritingSystems.Tests"><Version>$(PalasoNugetVersion)</Version><Path>lib/net461/*.*</Path></SILNugetPackages>
			<SILNugetPackages Include="L10NSharp"><Version>5.0.0-beta0059</Version><Path>lib/net461/*.*</Path></SILNugetPackages>
			<SILNugetPackages Include="Enchant.Net"><Version>1.4.3-beta0010</Version><Path>lib/net461/*.*</Path></SILNugetPackages>
			<SILNugetPackages Include="Enchant.Net"><Version>1.4.3-beta0010</Version><Path>contentFiles/any/any/*.*</Path><NoSymbols>true</NoSymbols></SILNugetPackages>
			<SILNugetPackages Include="NDesk.DBus"><Version>0.15.0</Version><Path>lib/*.*</Path><NoSymbols>true</NoSymbols></SILNugetPackages>
			<SILNugetPackages Include="Spart"><Version>1.0.0</Version><Path>lib/net461/*.*</Path><NoSymbols>true</NoSymbols></SILNugetPackages>
			<SILNugetPackages Include="TagLibSharp"><Version>2.2.0</Version><Path>lib/net45/*.*</Path><NoSymbols>true</NoSymbols></SILNugetPackages>
			<SILNugetPackages Include="Tenuto"><Version>1.0.0.39</Version><Path>lib/net461/*.*</Path><NoSymbols>true</NoSymbols></SILNugetPackages>
			<SILNugetPackages Include="relaxngDatatype"><Version>1.0.0.39</Version><Path>lib/net461/*.*</Path><NoSymbols>true</NoSymbols></SILNugetPackages>
			<!-- Chorus and related packages -->
			<SILNugetPackages Include="SIL.Chorus.LibChorus"><Version>$(ChorusNugetVersion)</Version><Path>lib/net461/*.*</Path></SILNugetPackages>
			<SILNugetPackages Include="SIL.Chorus.App"><Version>$(ChorusNugetVersion)</Version><Path>lib/net461/*.*</Path></SILNugetPackages>
			<SILNugetPackages Include="SIL.Chorus.ChorusHub"  Condition="'$(OS)'=='Unix'"><Version>$(ChorusNugetVersion)</Version><Path>lib/net461/*.*</Path></SILNugetPackages>
			<SILNugetPackages Include="Autofac"><Version>2.6.3.862</Version><Path>lib/NET40/*.*</Path><NoSymbols>true</NoSymbols></SILNugetPackages>
			<SILNugetPackages Include="Vulcan.Uczniowie.HelpProvider"><Version>1.0.16</Version><Path>lib/net461/*.*</Path></SILNugetPackages>
		</ItemGroup>
	</Target>

	<!-- Setup source variables (to enable local development in libpalaso, chorus, and liblcm) -->
	<PropertyGroup>
		<PalasoArtifactsDir Condition="'$(PalasoArtifactsDir)'==''">$(DownloadsDir)</PalasoArtifactsDir>
		<ChorusArtifactsDir Condition="'$(ChorusArtifactsDir)'==''">$(DownloadsDir)</ChorusArtifactsDir>
		<LcmArtifactsDir Condition="'$(LcmArtifactsDir)'==''">$(DownloadsDir)</LcmArtifactsDir>
	</PropertyGroup>

	<!-- item group for downloads, to allow easy copying -->
	<!-- wildcards don't work unless the files have already been downloaded once -->
	<ItemGroup>
		<!-- we need to explicitly specify the important files, otherwise they'll be ignored
		if they don't exist by the time this ItemGroup is read -->
		<DownloadedFiles Include="$(DownloadsDir)/Args.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/IPCFramework.dll"/>
		<!-- xBuild and MsBuild generate different case artifacts off the same solution file. (sigh) -->
		<DownloadedFiles Include="$(DownloadsDir)/$(ExCss).dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/$(ExCss).$(DebugInfo)"/>
		<DownloadedFiles Include="$(DownloadsDir)/FormattedEditor.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/HelpSystem.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/HtmlEditor.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/NetLoc.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/ParatextShared.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/Utilities.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/QuickGraph.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.Machine.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.Collections.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.HermitCrab.dll"/>
	</ItemGroup>

	<Target Name="CopyDlls" DependsOnTargets="downloadDlls;copyLibL10ns">
		<!-- .Net assemblies -->
		<Copy SourceFiles="$(fwrt)/DistFiles/LinqBridge.dll" DestinationFolder="$(dir-outputBase)"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true"/>
		<Copy SourceFiles="$(fwrt)/DistFiles/log4net.dll" DestinationFolder="$(dir-outputBase)"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true"/>
		<Copy SourceFiles="$(fwrt)/Lib/Common/Interop.ResourceDriver.dll" DestinationFolder="$(dir-outputBase)"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true"/>
		<!-- Linux shared libraries -->
		<Copy SourceFiles="$(fwrt)/DistFiles/libxample32.so" DestinationFolder="$(dir-outputBase)"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Condition="'$(OS)'=='Unix'"/>
		<Copy SourceFiles="$(fwrt)/DistFiles/libxample64.so" DestinationFolder="$(dir-outputBase)"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Condition="'$(OS)'=='Unix'"/>
		<!-- Windows dynamically loaded libraries -->
		<Copy SourceFiles="$(fwrt)/DistFiles/xample32.dll" DestinationFiles="$(dir-outputBase)/xample.dll"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Condition="'$(OS)'=='Windows_NT'  AND '$(arch)'!='x64'"/>
		<Copy SourceFiles="$(fwrt)/DistFiles/xample64.dll" DestinationFiles="$(dir-outputBase)/xample.dll"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Condition="'$(OS)'=='Windows_NT' AND '$(arch)'=='x64'"/>
		<!-- ICU libs -->
		<Copy SourceFiles="$(DownloadsDir)/lib/win7-$(arch)/icudt.lib" DestinationFolder="$(fwrt)/Lib"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Condition="'$(OS)'=='Windows_NT'"/>
		<Copy SourceFiles="$(DownloadsDir)/lib/win7-$(arch)/icuin.lib" DestinationFolder="$(fwrt)/Lib"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Condition="'$(OS)'=='Windows_NT'"/>
		<Copy SourceFiles="$(DownloadsDir)/lib/win7-$(arch)/icuuc.lib" DestinationFolder="$(fwrt)/Lib"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Condition="'$(OS)'=='Windows_NT'"/>
		<ItemGroup>
			<IcuHeaders Include="$(DownloadsDir)/include/unicode/*.h" />
		</ItemGroup>
		<!-- ICU sources -->
		<Copy Sourcefiles="@(IcuHeaders)" DestinationFolder="$(fwrt)/Include/unicode"
			SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true"/>
		<!-- Copy ICU dll's and exe's to lib/x64 and lib/x86. The ICU .lib files don't need included. -->
		<ItemGroup>
			<IcuFileSet32 Include="$(DownloadsDir)/win7-x86/**/icu*.dll" />
			<IcuFileSet32 Include="$(DownloadsDir)/win-x86/gennorm2.exe" />
		</ItemGroup>
		<ItemGroup>
			<IcuFileSet64 Include="$(DownloadsDir)/win7-x64/**/icu*.dll" />
			<IcuFileSet64 Include="$(DownloadsDir)/win-x64/gennorm2.exe" />
		</ItemGroup>
		<!-- Include 32-bit ICU, even if arch is x64, so we can provide 32-bit ICU for 32-bit Paratext to use when the tools interact. -->
		<Copy SourceFiles="@(IcuFileSet32)" DestinationFolder="$(dir-outputBase)/lib/x86" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Condition="'$(OS)'=='Windows_NT'" />
		<Copy SourceFiles="@(IcuFileSet64)" DestinationFolder="$(dir-outputBase)/lib/x64" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Condition="'$(OS)'=='Windows_NT' AND '$(arch)'=='x64'" />

		<!-- LCM dlls -->
		<Copy SourceFiles="@(LcmOutputBaseFiles -> '$(LcmArtifactsDir)/%(Identity)')" DestinationFolder="$(dir-outputBase)" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" />
		<Copy SourceFiles="@(LcmOutputCommonFiles -> '$(LcmArtifactsDir)/%(Identity)')" DestinationFolder="$(dir-fwoutputCommon)" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" />
		<Copy SourceFiles="@(LcmFwKernelFiles -> '$(LcmArtifactsDir)/%(Identity)')" DestinationFolder="$(fwrt)/Src/Kernel" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" />
		<Copy SourceFiles="@(LcmDistFiles -> '$(LcmArtifactsDir)/%(Identity)')" DestinationFolder="$(fwrt)/DistFiles" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" />
		<Copy SourceFiles="@(LcmTemplatesFiles -> '$(LcmArtifactsDir)/%(Identity)')" DestinationFolder="$(fwrt)/DistFiles/Templates" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" />
		<Copy SourceFiles="@(LcmIcuDataFiles -> '$(LcmArtifactsDir)/%(Identity)')" DestinationFolder="$(fwrt)/DistFiles/Icu$(IcuVersion)/data" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" />
		<Copy SourceFiles="@(LcmIcuNrmFiles -> '$(LcmArtifactsDir)/%(Identity)')" DestinationFolder="$(fwrt)/DistFiles/Icu$(IcuVersion)/icudt$(IcuVersion)l" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" />

		<!-- Copy the downloaded artifacts -->
		<Copy SourceFiles="@(PalasoFiles -> '$(PalasoArtifactsDir)/%(Identity)')" DestinationFolder="$(dir-outputBase)" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" />
		<!-- Copy runtime support library for Mono.Unix -->
		<Copy SourceFiles="$(DownloadsDir)/libMono.Unix.so" DestinationFolder="$(dir-outputBase)/runtimes/linux-x64" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Condition="'$(OS)'!='Windows_NT'"/>
		<Copy SourceFiles="@(ChorusFiles -> '$(ChorusArtifactsDir)/%(Identity)')" DestinationFolder="$(dir-outputBase)" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" />
		<Copy SourceFiles="@(DownloadedFiles)" DestinationFolder="$(dir-outputBase)" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true"/>
		<!-- Rename GeckofxHtmlToPdf.exe to FieldWorksPdfMaker so it its origin is clear in case a user needs to release it from antivirus quarantine -->
		<Copy SourceFiles="$(DownloadsDir)/GeckofxHtmlToPdf.exe" DestinationFiles="$(dir-outputBase)/FieldWorksPdfMaker.exe" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true"/>
		<Copy SourceFiles="$(DownloadsDir)/GeckofxHtmlToPdf.exe.config" DestinationFiles="$(dir-outputBase)/FieldWorksPdfMaker.exe.config" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true"/>

		<!-- Encoding Converters Files -->
		<Copy SourceFiles="@(ECWindowsFiles -> '$(PackagesDir)/Encoding-Converters-Core.$(ECNugetVersion)/runtimes/win-$(arch)/native/%(Identity)')"
			DestinationFolder="$(dir-outputBase)" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Condition="'$(OS)'=='Windows_NT'"/>
		<Copy SourceFiles="@(ECPlugins -> '$(PackagesDir)/Encoding-Converters-Core.$(ECNugetVersion)/redist/EC/Plugins/%(Identity)')"
			DestinationFolder="$(dir-outputBase)/EC/Plugins" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Condition="'$(OS)'=='Windows_NT'"/>

		<!-- NuGet packages. Property- and ItemGroups are inside the target so $(arch) and *'s are read properly -->
		<PropertyGroup>
			<!-- This package must be updated in encoding-converters-core also -->
			<Architecture Condition="'$(Platform)'=='x64'">64</Architecture>
			<Architecture Condition="'$(Platform)'!='x64'">32</Architecture>
			<GeckoDir Condition="'$(OS)'=='Windows_NT'">$(PackagesDir)/Geckofx60.$(Architecture).60.0.50</GeckoDir>
			<GeckoDir Condition="'$(OS)'!='Windows_NT'">$(PackagesDir)/Geckofx60.$(Architecture).Linux.60.0.51</GeckoDir>
		</PropertyGroup>
		<ItemGroup>
			<NuGottenForBuildTasks Include="$(PackagesDir)/SIL.BuildTasks.2.6.0-beta0008/tools/SIL.BuildTasks.dll"/>
			<NuGottenFiles Include="$(GeckoDir)/lib/net45/*.*" Condition="'$(OS)'=='Windows_NT'"/>
			<NuGottenFiles Include="$(GeckoDir)/lib/net40/*.*" Condition="'$(OS)'!='Windows_NT'"/>
			<NuGottenFiles Include="$(GeckoDir)/build/*.dll.config" Condition="'$(OS)'!='Windows_NT'"/>
			<NuGottenFiles Include="$(GeckoDir)/content/**/*.*"/>
			<NuGottenFiles Include="$(PackagesDir)/Analytics.3.6.0/lib/net461/Analytics.dll"/>
			<NuGottenFiles Include="$(PackagesDir)/DotNetZip.1.16.0/lib/net40/*.*"/>
			<NuGottenFiles Include="$(PackagesDir)/icu.net.2.9.0-beta.13/lib/net451/icu.net.dll"/>
			<NuGottenFiles Include="$(PackagesDir)/Microsoft.Extensions.DependencyModel.2.0.4/lib/net451/Microsoft.Extensions.DependencyModel.dll"/>
			<NuGottenFiles Include="$(PackagesDir)/Microsoft.Win32.Registry.4.7.0/lib/net461/Microsoft.Win32.Registry.dll" Condition="'$(OS)'=='Windows_NT'"/>
			<NuGottenFiles Include="$(PackagesDir)/Moq.4.17.2/lib/net45/Moq.dll"/>
			<NuGottenFiles Include="$(PackagesDir)/NAudio.1.10.0/lib/net35/NAudio.dll"/>
			<NuGottenFiles Include="$(PackagesDir)/Castle.Core.4.4.1/lib/net45/Castle.Core.dll"/>
			<NuGottenFiles Include="$(PackagesDir)/CommandLineArgumentsParser.3.0.22/lib/net45/CommandLineArgumentsParser.dll"/>
			<NuGottenFiles Include="$(PackagesDir)/CsvHelper.28.0.1/lib/net45/CsvHelper.dll"/>
			<NuGottenFiles Include="$(PackagesDir)/NAudio.Lame.1.1.5/lib/netstandard2.0/NAudio.Lame.dll"/>
			<NuGottenFiles Include="$(PackagesDir)/NAudio.Lame.1.1.5/build/libmp3lame.32.dll" Condition="'$(OS)'=='Windows_NT' AND '$(arch)'!='x64'"/>
			<NuGottenFiles Include="$(PackagesDir)/NAudio.Lame.1.1.5/build/libmp3lame.64.dll" Condition="'$(OS)'=='Windows_NT' AND '$(arch)'=='x64'"/>
			<NuGottenFiles Include="$(PackagesDir)/Newtonsoft.Json.13.0.1/lib/net45/Newtonsoft.Json.dll"/>
			<NuGottenFiles Include="$(PackagesDir)/ParatextData.$(ParatextNugetVersion)/lib/netstandard2.0/Paratext.LexicalContracts.dll" />
			<NuGottenFiles Include="$(PackagesDir)/ParatextData.$(ParatextNugetVersion)/lib/netstandard2.0/ParatextData.dll"/>
			<NuGottenFiles Include="$(PackagesDir)/ParatextData.$(ParatextNugetVersion)/lib/netstandard2.0/PtxUtils.dll"/>
			<NuGottenFiles Include="$(PackagesDir)/SIL.DesktopAnalytics.3.0.3/lib/net461/DesktopAnalytics.dll"/>
			<NuGottenFiles Include="$(PackagesDir)/System.Runtime.CompilerServices.Unsafe.6.0.0/lib/net461/System.Runtime.CompilerServices.Unsafe.dll"/>
			<NuGottenFiles Include="$(PackagesDir)/System.Threading.Tasks.Extensions.4.5.4/lib/net461/System.Threading.Tasks.Extensions.dll"/>
			<NuGottenFiles Include="$(PackagesDir)/System.ValueTuple.4.5.0/lib/net461/System.ValueTuple.dll"/>
		</ItemGroup>
		<Copy SourceFiles="@(NuGottenForBuildTasks)" DestinationFolder="$(MSBuildThisFileDirectory)"
			SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true"/>
		<Copy SourceFiles="@(NuGottenFiles)" DestinationFolder="$(dir-outputBase)/%(RecursiveDir)"
			SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true"/>
		<!-- Copy the libpalso dlls that ParatextData depends on -->
		<ItemGroup>
			<ParatextDeps Include="$(PackagesDir)/SIL.*.$(Palaso4ParatextNugetVersion)/lib/net461/SIL.*" />
		</ItemGroup>
		<Copy SourceFiles="@(ParatextDeps)" DestinationFolder="$(dir-outputBase)/lib/ParatextDeps"
			SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true"/>
	</Target>

>>>>>>> develop
	<Target Name="setRegistryValues" DependsOnTargets="initLinux;initWindows;setKeysInHKCU"/>

	<Target Name="setKeysInHKCU" DependsOnTargets="GenerateVersionFiles" Condition="'$(packaging)' != 'yes'">
		<Message Text="Setting registry values for $(fwrt)."/>
		<!-- Using the OS-appropriate directory separator character is required for some unit tests to pass -->
		<WriteRegistry Hive="CurrentUser"
<<<<<<< HEAD
			Key="$(BUILDAGENT_HKCU)SOFTWARE\SIL\FieldWorks\$(GitVersion_Major)\RootCodeDir"
||||||| f013144d5
			Key="$(BUILDAGENT_HKCU)SOFTWARE\SIL\FieldWorks\$(FWMAJOR)\RootCodeDir"
=======
			Key="$(BUILDAGENT_HKCU)SOFTWARE/SIL/FieldWorks/$(FWMAJOR)/RootCodeDir"
>>>>>>> develop
			Value="$(dir-fwdistfiles)"/>
		<WriteRegistry Hive="CurrentUser"
<<<<<<< HEAD
			Key="$(BUILDAGENT_HKCU)SOFTWARE\SIL\FieldWorks\$(GitVersion_Major)\RootDataDir"
||||||| f013144d5
			Key="$(BUILDAGENT_HKCU)SOFTWARE\SIL\FieldWorks\$(FWMAJOR)\RootDataDir"
=======
			Key="$(BUILDAGENT_HKCU)SOFTWARE/SIL/FieldWorks/$(FWMAJOR)/RootDataDir"
>>>>>>> develop
			Value="$(dir-fwdistfiles)"/>
		<WriteRegistry Hive="CurrentUser"
<<<<<<< HEAD
			Key="$(BUILDAGENT_HKCU)SOFTWARE\SIL\FieldWorks\$(GitVersion_Major)\ProjectsDir"
			Value="$(dir-fwdistfiles)\Projects"/>
||||||| f013144d5
			Key="$(BUILDAGENT_HKCU)SOFTWARE\SIL\FieldWorks\$(FWMAJOR)\ProjectsDir"
			Value="$(dir-fwdistfiles)\Projects"/>
=======
			Key="$(BUILDAGENT_HKCU)SOFTWARE/SIL/FieldWorks/$(FWMAJOR)/ProjectsDir"
			Value="$([System.IO.Path]::Combine(&quot;$(dir-fwdistfiles)&quot;, &quot;Projects&quot;))"/>
>>>>>>> develop
		<WriteRegistry Hive="CurrentUser"
			Key="$(BUILDAGENT_HKCU)SOFTWARE/SIL/Icu$(IcuVersion)DataDir"
			Value="$(dir-icuData)"/>
		<WriteRegistry Hive="CurrentUser"
			Key="$(BUILDAGENT_HKCU)SOFTWARE/SIL/SilEncConverters40/RootDir"
			Value="$(dir-outputBase)"
			Condition="'$(OS)'=='Windows_NT'"/>
		<WriteRegistry Hive="CurrentUser"
			Key="$(BUILDAGENT_HKCU)SOFTWARE/SIL/SilEncConverters40/DeveloperPluginDir"
			Value="$(dir-outputBase)\EC\Plugins"
			Condition="'$(OS)'=='Windows_NT'"/>
		<WriteRegistry Hive="CurrentUser"
			Key="$(BUILDAGENT_HKCU)SOFTWARE/SIL/SilEncConverters40/RootDir"
			Value="$(installation_prefix)/lib/fieldworks"
			Condition="'$(OS)'=='Unix'"/>
		<WriteRegistry Hive="CurrentUser"
			Key="$(BUILDAGENT_HKCU)SOFTWARE/SIL/SilEncConverters40/DeveloperPluginDir"
			Value="$(installation_prefix)/lib/fieldworks/EC/Plugins"
			Condition="'$(OS)'=='Unix'"/>

		<MakeDir Directories="$(fwrt)/DistFiles/SIL/Repository"/>
		<WriteRegistry Hive="CurrentUser"
			Key="$(BUILDAGENT_HKCU)SOFTWARE/SIL/EncodingConverterRepository/Registry"
			Value="$(fwrt)/DistFiles/SIL/Repository/mappingRegistry.xml"/>

		<!-- Register silfw:// link protocol -->
		<WriteRegistry Hive="CurrentUser"
			Key="$(BUILDAGENT_HKCU)SOFTWARE/Classes/silfw/"
			Value="URL:SILFW Protocol"/>
		<WriteRegistry Hive="CurrentUser"
			Key="$(BUILDAGENT_HKCU)SOFTWARE/Classes/silfw/URL Protocol"/>
		<WriteRegistry Hive="CurrentUser"
			Key="$(BUILDAGENT_HKCU)SOFTWARE/Classes/silfw/shell/open/command/"
			Value='"$(dir-outputBase)/FieldWorks.exe" %1'/>
	</Target>

	<Target Name="RestoreBuildTasks" DependsOnTargets="CheckPrerequisites">
		<Exec Command='$(NuGetCommand) install SIL.FwBuildTasks -version $(FwBuildTasksVersion) -solutionDirectory "$(fwrt)"' Condition="!Exists('$(fwrt)/packages/SIL.FwBuildTasks.$(FwBuildTasksVersion)')"/>
		<Exec Command='$(NuGetCommand) install Icu4c.Win.Fw.Lib -version $(IcuWinFwLibVersion) -solutionDirectory "$(fwrt)"' Condition="!Exists('$(fwrt)/packages/Icu4c.Win.Fw.Lib.$(IcuWinFwLibVersion)')"/>
		<Exec Command='$(NuGetCommand) install GitVersion.MsBuild -version $(GitVersionMsBuildVersion) -solutionDirectory "$(fwrt)"' Condition="!Exists('$(fwrt)/packages/GitVersion.MsBuild.$(GitVersionMsBuildVersion)')"/>
		<!-- Install NUnit.Console which has the required extensions as dependencies -->
		<Exec Command='$(NuGetCommand) install NUnit.Console -version $(NunitConsoleVersion) -solutionDirectory "$(fwrt)"' Condition="!Exists('$(fwrt)/packages/NUnit.Console.$(NunitConsoleVersion)')" />
		<Exec Command='$(NuGetCommand) install SIL.BuildTasks -version $(SilBuildTasksVersion) -solutionDirectory "$(fwrt)"' Condition="!Exists('$(fwrt)/packages/SIL.BuildTasks.$(SilBuildTasksVersion)')" />
		<!-- SIL.Lib is needed for the ParatextPlugin -->
		<Exec Command='$(NuGetCommand) install SIL.Lib -version $(SilLibVersion) -solutionDirectory "$(fwrt)"' Condition="!Exists('$(fwrt)/packages/SIL.Lib.$(SilLibVersion)')" />
	</Target>
</Project>
