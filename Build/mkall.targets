<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="14.0">
	<!-- Make all of FieldWorks. -->
	<Target Name="mkall" DependsOnTargets="CopyDlls;initLinux;initWindows;LinuxRegistry;allCpp;allCsharp;ensureTLBsUpToDate">
		<Message Text="Finished mkall Target."/>
		<CreateItem Condition="'$(action)'=='test'" Include="$(dir-outputBase)/*-nunit-output.xml">
			<Output TaskParameter="Include" ItemName="NUnitReportFiles"/>
		</CreateItem>
		<GenerateNUnitReports Condition="'$(action)'=='test'" ReportFiles="@(NUnitReportFiles)"/>
	</Target>

	<Target Name="allCpp" DependsOnTargets="DebugProcs;GenericLib;testGenericLib;FwKernel;Views;testViews">
		<CreateItem Include="$(dir-outputBase)/*.compmap">
			<Output TaskParameter="Include" ItemName="CompMapFiles"/>
		</CreateItem>
		<CatenateFiles SourceFiles="@(CompMapFiles)" TargetFile="$(dir-outputBase)/components.map" Condition="'$(OS)'=='Unix'"/>
	</Target>
	<Target Name="allCppNoTest" DependsOnTargets="DebugProcs;GenericLib;FwKernel;Views">
		<CreateItem Include="$(dir-outputBase)/*.compmap">
			<Output TaskParameter="Include" ItemName="CompMapFiles"/>
		</CreateItem>
		<CatenateFiles SourceFiles="@(CompMapFiles)" TargetFile="$(dir-outputBase)/components.map" Condition="'$(OS)'=='Unix'"/>
	</Target>

	<ItemGroup>
		<Fragments Include="$(dir-fwdistfiles)/*.fragment.manifest"/>
	</ItemGroup>
	<Target Name="regFreeCpp" DependsOnTargets="FwKernel;Views"
		AfterTargets="FwKernel;Views" Condition="'$(OS)'=='Windows_NT'">
		<RegFree Executable="$(dir-outputBase)/FwKernel.dll" Output="$(dir-outputBase)/FieldWorks.Tests.manifest"
			Dlls="$(dir-outputBase)/FwKernel.dll;$(dir-outputBase)/Views.dll"
			Fragments="@(Fragments)"/>
	</Target>

	<Target Name="DebugProcs" DependsOnTargets="initLinux;initWindows">
		<Make Condition="'$(OS)'=='Windows_NT'"
				Makefile="$(fwrt)\Src\DebugProcs\DebugProcs.mak"
				Configuration="$(config-capital)"
				BuildRoot="$(fwrt)"
				WorkingDirectory="$(fwrt)\Src\DebugProcs"/>
		<Make Condition="'$(OS)'=='Unix'" ToolPath="/usr/bin"
				Makefile="$(fwrt)/Src/DebugProcs/Makefile"
				Configuration="$(config-capital)" Target="$(make-target)"
				BuildRoot="$(fwrt)"
				WorkingDirectory="$(fwrt)/Src/DebugProcs"/>
		<Message Text="Finished building DebugProcs."/>
	</Target>

	<Target Name="GenericLib" DependsOnTargets="DebugProcs">
		<Make Condition="'$(OS)'=='Windows_NT'"
				Makefile="$(fwrt)\Src\Generic\GenericLib.mak"
				Configuration="$(config-capital)"
				BuildRoot="$(fwrt)"
				WorkingDirectory="$(fwrt)\Src\Generic"/>
		<Make Condition="'$(OS)'=='Unix'" ToolPath="/usr/bin"
				Makefile="$(fwrt)/Src/Generic/Makefile"
				Configuration="$(config-capital)" Target="$(make-target)"
				BuildRoot="$(fwrt)"
				WorkingDirectory="$(fwrt)/Src/Generic"/>
		<Message Text="Finished building GenericLib."/>
	</Target>

	<Target Name="testGenericLib" DependsOnTargets="GenericLib;FwKernel;Views">
		<Make Condition="'$(OS)'=='Windows_NT'"
				Makefile="$(fwrt)\Src\Generic\Test\testGenericLib.mak"
				Configuration="$(config-capital)"
				BuildRoot="$(fwrt)"
				WorkingDirectory="$(fwrt)\Bin"/>
		<Make Condition="'$(OS)'=='Unix'" ToolPath="/usr/bin"
				Makefile="$(fwrt)/Src/Generic/Test/Makefile"
				Configuration="$(config-capital)" Target="$(make-target)"
				BuildRoot="$(fwrt)"
				WorkingDirectory="$(fwrt)/Src/Generic/Test" ContinueOnError="true"/>
		<RegFree Executable="$(dir-outputBase)\testGenericLib.exe"
				DependentAssemblies="$(dir-outputBase)\FwKernel.X.manifest;$(dir-outputBase)\Views.X.manifest"
				Condition="'$(OS)'=='Windows_NT'"/>
		<Exec Command="mt.exe -outputresource:$(dir-outputBase)\testGenericLib.exe -manifest $(dir-outputBase)\testGenericLib.exe.manifest"
				Condition="'$(OS)'=='Windows_NT'"/>
		<Unitpp Condition="'$(action)'=='test'"
				FixturePath="$(dir-outputBase)/testGenericLib"
				FudgeFactor="$(timeoutFudgeFactor)"
				Timeout="60000">
			<Output TaskParameter="FailedSuites" ItemName="FailedSuites"/>
		</Unitpp>
		<Message Text="Finished building testGenericLib." Condition="'$(action)'!='test'"/>
		<Message Text="Finished building testGenericLib and running tests." Condition="'$(action)'=='test'"/>
	</Target>

	<Target Name="FwKernel" DependsOnTargets="GenericLib;GenerateCellarConstants;AppCore;createCompMaps">
		<Message Text="FwKernel make-target='$(make-target)'"/>
		<Make Condition="'$(OS)'=='Windows_NT'"
			Makefile="$(fwrt)\Src\Kernel\FwKernel.mak"
			Configuration="$(config-capital)"
			BuildRoot="$(fwrt)"
			WorkingDirectory="$(fwrt)\Src\Kernel"/>
		<Make Condition="'$(OS)'=='Unix'" ToolPath="/usr/bin"
			Makefile="$(fwrt)/Src/Kernel/Makefile"
			Configuration="$(config-capital)" Target="$(make-target)"
			BuildRoot="$(fwrt)"
			WorkingDirectory="$(fwrt)/Src/Kernel"/>
		<RegFree Executable="$(dir-outputBase)\FwKernel.dll" Output="$(dir-outputBase)\FwKernel.X.manifest" Condition="'$(OS)'=='Windows_NT'" />
		<Message Text="Finished building FwKernel."/>
	</Target>

	<Target Name="AppCore" DependsOnTargets="DebugProcs;GenericLib">
		<Message Text="AppCore make-target='$(make-target)'"/>
		<Make Condition="'$(OS)'=='Unix'" ToolPath="/usr/bin"
				Makefile="$(fwrt)/Src/AppCore/Makefile"
				Configuration="$(config-capital)" Target="$(make-target)"
				BuildRoot="$(fwrt)"
				WorkingDirectory="$(fwrt)/Src/AppCore"/>
		<Message Text="Finished building AppCore."/>
	</Target>

	<Target Name="Views" DependsOnTargets="GenericLib;FwKernel;GenerateCellarConstants">
		<Make Condition="'$(OS)'=='Windows_NT'"
			Makefile="$(fwrt)\Src\views\Views.mak"
			Configuration="$(config-capital)"
			BuildRoot="$(fwrt)"
			WorkingDirectory="$(fwrt)\Src\views"/>
		<Make Condition="'$(OS)'=='Unix'" ToolPath="/usr/bin"
			Makefile="$(fwrt)/Src/views/Makefile"
			Configuration="$(config-capital)" Target="$(make-target)"
			BuildRoot="$(fwrt)"
			WorkingDirectory="$(fwrt)/Src/views"/>
		<RegFree Executable="$(dir-outputBase)\Views.dll" Output="$(dir-outputBase)\Views.X.manifest" Condition="'$(OS)'=='Windows_NT'" />
		<Message Text="Finished building Views."/>
	</Target>

	<Target Name="testViews" DependsOnTargets="GenericLib;Views;SimpleRootSite;FwKernel">
		<Make Condition="'$(OS)'=='Windows_NT'"
				Makefile="$(fwrt)\Src\views\Test\testViews.mak"
				Configuration="$(config-capital)"
				BuildRoot="$(fwrt)"
				WorkingDirectory="$(fwrt)\Bin"/>
		<Make Condition="'$(OS)'=='Unix'" ToolPath="/usr/bin"
				Makefile="$(fwrt)/Src/views/Test/Makefile"
				Configuration="$(config-capital)" Target="$(make-target)"
				BuildRoot="$(fwrt)"
				WorkingDirectory="$(fwrt)/Src/views/Test" ContinueOnError="true"/>
		<RegFree Executable="$(dir-outputBase)\testViews.exe"
				DependentAssemblies="$(dir-outputBase)\FwKernel.X.manifest;$(dir-outputBase)\Views.X.manifest"
				Condition="'$(OS)'=='Windows_NT'"/>
		<Exec Command="mt.exe -outputresource:$(dir-outputBase)\testViews.exe -manifest $(dir-outputBase)\testViews.exe.manifest"
				Condition="'$(OS)'=='Windows_NT'"/>
		<CreateItem Include="$(dir-outputBase)/*.compmap">
			<Output TaskParameter="Include" ItemName="ViewsCompMapFiles"/>
		</CreateItem>
		<CatenateFiles SourceFiles="@(ViewsCompMapFiles)" TargetFile="$(dir-outputBase)/components.map" Condition="'$(OS)'=='Unix'"/>
		<Unitpp Condition="'$(action)'=='test'"
				FixturePath="$(dir-outputBase)/testViews"
				FudgeFactor="$(timeoutFudgeFactor)"
				Timeout="200000">
			<Output TaskParameter="FailedSuites" ItemName="FailedSuites"/>
		</Unitpp>
		<Message Text="Finished building testViews." Condition="'$(action)'!='test'"/>
		<Message Text="Finished building testViews and running tests." Condition="'$(action)'=='test'"/>
	</Target>

	<UsingTask TaskName="LcmGenerate" AssemblyFile="$(DownloadsDir)/LCM/SIL.LCModel.Build.Tasks.dll"/>

	<ItemGroup>
		<CellarConstantsInputs Include="$(DownloadsDir)/LCM/MasterLCModel.xml"/>
		<CellarConstantsInputs Include="$(fwrt)/Src/Kernel/CellarConstants.vm.h"/>
		<CellarConstantsOutputs Include="$(fwrt)/Output/Common/CellarConstants.h"/>
	</ItemGroup>

	<Target Name="GenerateCellarConstants" DependsOnTargets="CopyCellarBaseConstants"
			Inputs="@(CellarConstantsInputs)" Outputs="@(CellarConstantsOutputs)">
		<MakeDir Directories="$(dir-fwoutputCommon)" Condition="'$(action)'!='clean'"/>
		<LcmGenerate XmlFile="$(DownloadsDir)/LCM/MasterLCModel.xml"
					 OutputDir="$(dir-fwoutputCommon)"
					 OutputFile="CellarConstants.h"
					 TemplateFile="$(fwrt)/Src/Kernel/CellarConstants.vm.h"
					 WorkingDirectory="$(DownloadsDir)/LCM/"
					 Condition="'$(action)'!='clean'"/>
	</Target>

	<Target Name="CopyCellarBaseConstants" Inputs="$(fwrt)/Src/Kernel/CellarBaseConstants.h" Outputs="$(fwrt)/Output/Common/CellarBaseConstants.h">
		<MakeDir Directories="$(dir-fwoutputCommon)" Condition="'$(action)'!='clean'"/>
		<Copy SourceFiles="$(fwrt)/Src/Kernel/CellarBaseConstants.h"
				DestinationFolder="$(fwrt)/Output/Common"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true"
				Condition="'$(action)'!='clean'"/>
	</Target>

	<PropertyGroup>
		<Original-OBJ_DIR>$(OBJ_DIR)</Original-OBJ_DIR>
		<Original-BUILD4UX>$(BUILD4UX)</Original-BUILD4UX>
		<Original-ANAL_TYPE>$(ANAL_TYPE)</Original-ANAL_TYPE>
	</PropertyGroup>

	<Target Name="mktlbs" DependsOnTargets="GenerateCellarConstants;FwKernel;Views">
		<SetEnvVar Variable="BUILD_OUTPUT" Value="$(dir-fwoutput)" />
		<SetEnvVar Variable="OBJ_DIR" Value="$(dir-fwobj)" />
		<SetEnvVar Variable="BUILD4UX" Value="$(build4ux)"/>
		<SetEnvVar Variable="ANAL_TYPE" Value="performance" Condition="'$(performance)'=='true'"/>
		<Make Condition="'$(OS)'=='Windows_NT'"
				Makefile="$(fwrt)\Src\Kernel\FwKernel.mak"
				Configuration="$(config-capital)"
				Target="dirs $(dir-fwoutputCommon)\FwKernelTlb.tlb"
				BuildRoot="$(fwrt)"
				WorkingDirectory="$(fwrt)"/>
		<Make Condition="'$(OS)'=='Windows_NT'"
				Makefile="$(fwrt)\Src\views\Views.mak"
				Configuration="$(config-capital)"
				Target="dirs $(dir-fwoutputCommon)\ViewsTlb.tlb"
				BuildRoot="$(fwrt)"
				WorkingDirectory="$(fwrt)"/>
		<SetEnvVar Variable="BUILD_OUTPUT" Value="$(Original-BUILD_OUTPUT)" />
		<SetEnvVar Variable="OBJ_DIR" Value="$(Original-OBJ_DIR)" />
		<SetEnvVar Variable="BUILD4UX" Value="$(Original-BUILD4UX)" />
		<SetEnvVar Variable="ANAL_TYPE" Value="$(Original-ANAL_TYPE)" />
	</Target>

	<Target Name="remakefw-internal" DependsOnTargets="CleanAll;Initialize;setRegistryValues;CopyDlls;ensureTLBsUpToDate;mkall"/>

	<Target Name="remakefw" DependsOnTargets="remakefw-internal">
		<Error Condition="'@(FailedSuites)'!=''" Text="The following projects had failing tests: @(FailedSuites)" />
	</Target>

	<Target Name="remakefw-jenkins" DependsOnTargets="remakefw-internal">
		<!-- Jenkins looks at the test output files to see if tests failed, so we don't have to
			fail on failed tests -->
		<Warning Condition="'@(FailedSuites)'!=''" Text="The following projects had failing tests: @(FailedSuites)" />
	</Target>

	<ItemGroup>
		<!-- Don't delete FieldWorks.targets - that has to be done separately, otherwise we
		delete the file we just create previously when we run remakefw -->
		<!--<GeneratedFiles Include="$(fwrt)/Build/FieldWorks.targets"/>-->
		<GeneratedFiles Include="$(fwrt)/Build/packages.config"/>
		<GeneratedFiles Include="$(fwrt)/Src/**/Collection.cpp"/>
		<GeneratedFiles Include="$(fwrt)/Src/**/asserts.log"/>
		<GeneratedFiles Include="$(fwrt)/Src/Common/ViewsInterfaces/Views.cs"/>
		<GeneratedFiles Include="$(fwrt)/Lib/debug/unit++.lib"/>
	</ItemGroup>

	<Target Name="Clean" DependsOnTargets="CleanAll">
		<ForceDelete Files="$(fwrt)/Build/FieldWorks.targets"/>
	</Target>

	<Target Name="CleanAll" DependsOnTargets="cleanWindows;cleanLinux">
		<!-- remove the Obj and Output directories -->
		<ForceDelete Files="$(dir-fwobj);$(dir-fwoutput)"/>
		<ForceDelete Files="$(fwrt)/Output" Condition="'$(OS)'=='Unix'"/>
		<!-- remove other directories and files created during the build process -->
		<ForceDelete Files="@(GeneratedFiles)"/>
		<!-- remove LCM files -->
		<ItemGroup>
			<LcmFilesToDelete Include="$(fwrt)/Src/Kernel/*.idh" />
			<LcmFilesToDelete Include="$(fwrt)/Src/Kernel/FwKernelTlb.idl" />
			<LcmFilesToDelete Include="$(fwrt)/DistFiles/Styles.dtd" />
			<LcmFilesToDelete Include="$(fwrt)/DistFiles/Templates/GOLDEtic.xml" />
			<LcmFilesToDelete Include="$(fwrt)/DistFiles/Templates/NewLangProj.fwdata" />
			<LcmFilesToDelete Include="$(fwrt)/DistFiles/Templates/POS.xml" />
			<LcmFilesToDelete Include="$(fwrt)/DistFiles/Templates/SemDom.xml" />
			<LcmFilesToDelete Include="$(dir-fwoutputCommon)/FwKernelTlb.iip" />
		</ItemGroup>
		<ForceDelete Files="@(LcmFilesToDelete)" />
		<ForceDelete Files="$(fwrt)/DistFiles/Icu$(IcuVersion)" />
		<Message Text="Finished deleting the output directories!"/>
	</Target>

	<PropertyGroup>
		<MasterVersionInfo>$(fwrt)/Src/MasterVersionInfo.txt</MasterVersionInfo>
		<TeamCityUrl>http://build.palaso.org/</TeamCityUrl>
		<!-- Update when appropriate. -->
		<FLExBridgeBuildType Condition="'$(OS)'=='Windows_NT'">FLExBridge_FLExBridgeDevelopWin32Continuous</FLExBridgeBuildType>
		<!-- Precise builds are used for all Linux development. Update when appropriate. -->
		<FLExBridgeBuildType Condition="'$(OS)'=='Unix'">FLExBridge_FLExBridgeDevelopPrecise64Continuous</FLExBridgeBuildType>

		<!-- bt2 is the master branch build of Chorus for Windows development. Update when appropriate. -->
		<ChorusBuildType Condition="'$(OS)'=='Windows_NT'">bt2</ChorusBuildType>
		<!-- bt323 is the master branch (strong name) build of Chorus for Linux development. Update when appropriate. -->
		<ChorusBuildType Condition="'$(OS)'=='Unix'">bt323</ChorusBuildType>
		<!-- Libpalaso_PalasoWinmasterContinuous is the master branch build of Palaso for Windows development. Update when appropriate. -->
		<PalasoBuildType Condition="'$(OS)'=='Windows_NT'">Libpalaso_PalasoWinmasterContinuous</PalasoBuildType>
		<!-- Libpalaso_PalasoLinux64masterContinuous is the master branch build of Palaso for Linux development. Update when appropriate. -->
		<PalasoBuildType Condition="'$(OS)'=='Unix'">Libpalaso_PalasoLinux64masterContinuous</PalasoBuildType>
		<!--Todo: use PalasoBuildType, when it refers to somewhere that has the IPCFramework.-->
		<!-- bt278 is the develop branch build of IPCFramework for Windows development. Update when appropriate. -->
		<IPCFrameworkBuildType Condition="'$(OS)'=='Windows_NT'">bt278</IPCFrameworkBuildType>
		<!-- bt279 is the develop branch build of IPCFramework for Linux development. Update when appropriate. -->
		<IPCFrameworkBuildType Condition="'$(OS)'=='Unix'">bt279</IPCFrameworkBuildType>
		<!-- bt393 is the master branch build of ExCss for Windows development. Update when appropriate. -->
		<ExCssBuildType Condition="'$(OS)'=='Windows_NT'">bt393</ExCssBuildType>
		<ExCss Condition="'$(OS)'=='Windows_NT'">ExCss</ExCss>
		<!-- bt395 is the master branch build of ExCss for Linux development. Update when appropriate. -->
		<ExCssBuildType Condition="'$(OS)'=='Unix'">bt395</ExCssBuildType>
		<ExCss Condition="'$(OS)'=='Unix'">ExCSS</ExCss>
		<Icu4cBuildType Condition="'$(OS)'=='Windows_NT' AND '$(arch)'!='x86_64'">Libraries_Icu4cWin32FieldWorksContinuous</Icu4cBuildType>
		<Icu4cBuildType Condition="'$(OS)'=='Windows_NT' AND '$(arch)'=='x86_64'">Libraries_Icu4cWin64FieldWorksContinuous</Icu4cBuildType>
		<HermitCrabBuildType>bt410</HermitCrabBuildType>
		<HermitCrabBuildTag>fw-8.3.tcbuildtag</HermitCrabBuildTag>
		<DownloadsSilOrgDownloadUrl>http://downloads.sil.org/BuildDlls/FW8.1</DownloadsSilOrgDownloadUrl>
		<DownloadsSilOrgOSDownloadUrl Condition="'$(OS)'=='Windows_NT'">$(DownloadsSilOrgDownloadUrl)/Windows</DownloadsSilOrgOSDownloadUrl>
		<DownloadsSilOrgOSDownloadUrl Condition="'$(OS)'=='Unix'">$(DownloadsSilOrgDownloadUrl)/Linux</DownloadsSilOrgOSDownloadUrl>
		<NUnitDownloadUrl>http://github.com/nunit/nunitv2/releases/download/2.6.4/NUnit-2.6.4.zip</NUnitDownloadUrl>
		<LcmBuildType Condition="'$(OS)'=='Windows_NT'">Liblcm_LiblcmWin32masterContinuous</LcmBuildType>
		<LcmBuildType Condition="'$(OS)'=='Unix'">Liblcm_LiblcmLinux64masterContinuous</LcmBuildType>
		<!-- Windows/.Net and Linux/Mono use different extensions for debug information files. -->
		<DebugInfo Condition="'$(OS)'=='Unix'">dll.mdb</DebugInfo>
		<DebugInfo Condition="'$(OS)'=='Windows_NT'">pdb</DebugInfo>
		<DownloadsDir>$(fwrt)/Downloads</DownloadsDir>
	</PropertyGroup>

	<Target Name="downloadDlls" DependsOnTargets="RestoreNuGetPackages" Condition="'$(disableDownloads)'!='true'">
		<MakeDir Directories="$(DownloadsDir)"/>
		<Message Text="Downloading artifacts for Palaso, including  L10NSharp, Enchant.Net, ibusdotnet, NDesk.DBus, Spart, and Newtonsoft.Json."/>
		<ItemGroup>
			<PalasoFiles Include="SIL.Core.dll"/>
			<PalasoFiles Include="SIL.Core.$(DebugInfo)"/>
			<PalasoFiles Include="SIL.Core.Desktop.dll"/>
			<PalasoFiles Include="SIL.Core.Desktop.$(DebugInfo)"/>
			<PalasoFiles Include="SIL.Lift.dll"/>
			<PalasoFiles Include="SIL.Lift.$(DebugInfo)"/>
			<PalasoFiles Include="SIL.Media.dll"/>
			<PalasoFiles Include="SIL.Media.dll.config" Condition="'$(OS)'=='Unix'"/>
			<PalasoFiles Include="SIL.Media.$(DebugInfo)"/>
			<PalasoFiles Include="SIL.Windows.Forms.dll"/>
			<PalasoFiles Include="SIL.Windows.Forms.$(DebugInfo)"/>
			<PalasoFiles Include="SIL.Windows.Forms.GeckoBrowserAdapter.dll"/>
			<PalasoFiles Include="SIL.Windows.Forms.GeckoBrowserAdapter.$(DebugInfo)"/>
			<PalasoFiles Include="SIL.Archiving.dll"/>
			<PalasoFiles Include="SIL.Archiving.dll.config" Condition="'$(OS)'=='Unix'"/>
			<PalasoFiles Include="SIL.Archiving.$(DebugInfo)"/>
			<PalasoFiles Include="Ionic.Zip.dll"/>
			<PalasoFiles Include="Keyman7Interop.dll" Condition="'$(OS)'=='Windows_NT'"/>
			<PalasoFiles Include="KeymanLink.dll" Condition="'$(OS)'=='Windows_NT'"/>
			<PalasoFiles Include="SIL.WritingSystems.dll"/>
			<PalasoFiles Include="SIL.WritingSystems.$(DebugInfo)"/>
			<PalasoFiles Include="SIL.Windows.Forms.WritingSystems.dll"/>
			<PalasoFiles Include="SIL.Windows.Forms.WritingSystems.$(DebugInfo)"/>
			<PalasoFiles Include="SIL.Windows.Forms.Keyboarding.dll"/>
			<PalasoFiles Include="SIL.Windows.Forms.Keyboarding.dll.config" Condition="'$(OS)'=='Unix'"/>
			<PalasoFiles Include="SIL.Windows.Forms.Keyboarding.$(DebugInfo)"/>
			<PalasoFiles Include="SIL.Lexicon.dll"/>
			<PalasoFiles Include="SIL.Lexicon.$(DebugInfo)"/>
			<PalasoFiles Include="SIL.TestUtilities.dll"/>
			<PalasoFiles Include="L10NSharp.dll"/>
			<PalasoFiles Include="Commons.Xml.Relaxng.dll"/>
			<PalasoFiles Include="irrKlang.NET4.dll" Condition="'$(OS)'=='Windows_NT'"/>
			<PalasoFiles Include="Enchant.Net.dll"/>
			<PalasoFiles Include="Enchant.Net.dll.config" Condition="'$(OS)'=='Unix'"/>
			<PalasoFiles Include="ibusdotnet.dll" Condition="'$(OS)'=='Unix'"/>
			<PalasoFiles Include="NDesk.DBus.dll" Condition="'$(OS)'=='Unix'"/>
			<PalasoFiles Include="NDesk.DBus.dll.config" Condition="'$(OS)'=='Unix'"/>
			<PalasoFiles Include="taglib-sharp.dll"/>
			<PalasoFiles Include="Spart.dll"/>
			<PalasoFiles Include="Newtonsoft.Json.dll"/>
			<PalasoFiles Include="icu.net.dll"/>
		</ItemGroup>
		<DownloadFilesFromTeamCity Address="$(TeamCityUrl)" BuildType="$(PalasoBuildType)" FlexBridgeBuildType="$(FLExBridgeBuildType)" VersionInfo="$(MasterVersionInfo)" Artifacts="@(PalasoFiles)" DownloadsDir="$(DownloadsDir)"/>

		<Message Text="Downloading artifacts for Chorus."/>
		<ItemGroup>
			<ChorusFiles Include="Autofac.dll"/>
			<ChorusFiles Include="Chorus.exe"/>
			<ChorusFiles Include="ChorusHub.exe" Condition="'$(OS)'=='Unix'"/>
			<ChorusFiles Include="LibChorus.dll"/>
			<ChorusFiles Include="Vulcan.Uczniowie.HelpProvider.dll"/>
		</ItemGroup>
		<DownloadFilesFromTeamCity Address="$(TeamCityUrl)" BuildType="$(ChorusBuildType)" FlexBridgeBuildType="$(FLExBridgeBuildType)" VersionInfo="$(MasterVersionInfo)" Artifacts="@(ChorusFiles)" DownloadsDir="$(DownloadsDir)"/>

		<Message Text="Downloading an artifact for IPCFramework."/>
		<DownloadFilesFromTeamCity Address="$(TeamCityUrl)" BuildType="$(IPCFrameworkBuildType)" FlexBridgeBuildType="$(FLExBridgeBuildType)" ProjectId="IpcLibrary" VersionInfo="$(MasterVersionInfo)" Artifacts="IPCFramework.dll" DownloadsDir="$(DownloadsDir)"/>

		<!-- Due to platform-specific casing, ExCSS or ExCss is included in a variable -->
		<Message Text="Downloading artifacts for ExCss."/>
		<DownloadFilesFromTeamCity Address="$(TeamCityUrl)" BuildType="$(ExCssBuildType)" FlexBridgeBuildType="$(FLExBridgeBuildType)" VersionInfo="$(MasterVersionInfo)" Artifacts="$(ExCss).dll;$(ExCss).$(DebugInfo)" DownloadsDir="$(DownloadsDir)"/>

		<Message Text="Downloading artifacts for icu4c." Condition="'$(OS)'=='Windows_NT'"/>
		<DownloadFilesFromTeamCity Address="$(TeamCityUrl)" BuildType="$(Icu4cBuildType)" FlexBridgeBuildType="$(FLExBridgeBuildType)" VersionInfo="$(MasterVersionInfo)" Artifacts="gennorm2.exe;icudt$(IcuVersion).dll;icuin$(IcuVersion).dll;icutu$(IcuVersion).dll;icuuc$(IcuVersion).dll;icudt.lib;icuin.lib;icuuc.lib" DownloadsDir="$(DownloadsDir)" Condition="'$(OS)'=='Windows_NT'"/>

		<Message Text="Downloading artifacts for HermitCrab." />
		<DownloadFilesFromTeamCity Address="$(TeamCityUrl)" BuildType="$(HermitCrabBuildType)" Tag="$(HermitCrabBuildTag)" FlexBridgeBuildType="$(FLExBridgeBuildType)" ProjectId="HermitCrab" VersionInfo="$(MasterVersionInfo)" Artifacts="QuickGraph.dll;SIL.Machine.dll;SIL.Collections.dll;SIL.HermitCrab.dll" DownloadsDir="$(DownloadsDir)"/>

		<Message Text="Downloading ParaTExt DLLs." />
		<DownloadFile Address="$(DownloadsSilOrgDownloadUrl)/Paratext.LexicalContracts.dll" DownloadsDir="$(DownloadsDir)"/>
		<DownloadFile Address="$(DownloadsSilOrgOSDownloadUrl)/FormattedEditor.dll" DownloadsDir="$(DownloadsDir)"/>
		<DownloadFile Address="$(DownloadsSilOrgOSDownloadUrl)/HelpSystem.dll" DownloadsDir="$(DownloadsDir)"/>
		<DownloadFile Address="$(DownloadsSilOrgOSDownloadUrl)/HtmlEditor.dll" DownloadsDir="$(DownloadsDir)"/>
		<DownloadFile Address="$(DownloadsSilOrgOSDownloadUrl)/NetLoc.dll" DownloadsDir="$(DownloadsDir)"/>
		<DownloadFile Address="$(DownloadsSilOrgOSDownloadUrl)/ParatextShared.dll" DownloadsDir="$(DownloadsDir)"/>
		<DownloadFile Address="$(DownloadsSilOrgOSDownloadUrl)/Utilities.dll" DownloadsDir="$(DownloadsDir)"/>

		<Message Text="Downloading NUnit." />
		<DownloadFile Address="$(NUnitDownloadUrl)" DownloadsDir="$(DownloadsDir)"/>

		<Message Text="Downloading artifacts for LCM." />
		<DownloadFilesFromTeamCity Address="$(TeamCityUrl)" BuildType="$(LcmBuildType)" VersionInfo="$(MasterVersionInfo)" Artifacts="LCM.zip" DownloadsDir="$(DownloadsDir)"/>
	</Target>

	<!-- item group for downloads, to allow easy copying -->
	<!-- wildcards don't work unless the files have already been downloaded once -->
	<ItemGroup>
		<DownloadedFiles Include="$(DownloadsDir)/Autofac.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/Chorus.exe"/>
		<DownloadedFiles Include="$(DownloadsDir)/ChorusHub.exe" Condition="'$(OS)'=='Unix'"/>
		<DownloadedFiles Include="$(DownloadsDir)/LibChorus.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/Vulcan.Uczniowie.HelpProvider.dll"/>
		<!-- we need to explicitly specify the important files, otherwise they'll be ignored
		if they don't exist by the time this ItemGroup is read -->
		<DownloadedFiles Include="$(DownloadsDir)/SIL.Core.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.Core.$(DebugInfo)"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.Core.Desktop.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.Core.Desktop.$(DebugInfo)"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.Lift.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.Lift.$(DebugInfo)"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.Media.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.Media.dll.config" Condition="'$(OS)'=='Unix'"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.Media.$(DebugInfo)"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.Windows.Forms.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.Windows.Forms.$(DebugInfo)"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.Windows.Forms.GeckoBrowserAdapter.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.Windows.Forms.GeckoBrowserAdapter.$(DebugInfo)"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.Archiving.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.Archiving.dll.config" Condition="'$(OS)'=='Unix'"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.Archiving.$(DebugInfo)"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.WritingSystems.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.WritingSystems.$(DebugInfo)"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.Windows.Forms.WritingSystems.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.Windows.Forms.WritingSystems.$(DebugInfo)"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.Windows.Forms.Keyboarding.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.Windows.Forms.Keyboarding.dll.config" Condition="'$(OS)'=='Unix'"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.Windows.Forms.Keyboarding.$(DebugInfo)"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.Lexicon.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.Lexicon.$(DebugInfo)"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.TestUtilities.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/icu.net.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/Keyman7Interop.dll" Condition="'$(OS)'=='Windows_NT'"/>
		<DownloadedFiles Include="$(DownloadsDir)/KeymanLink.dll" Condition="'$(OS)'=='Windows_NT'"/>
		<DownloadedFiles Include="$(DownloadsDir)/L10NSharp.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/Commons.Xml.Relaxng.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/irrKlang.NET4.dll" Condition="'$(OS)'=='Windows_NT'"/>
		<DownloadedFiles Include="$(DownloadsDir)/Enchant.Net.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/Enchant.Net.dll.config" Condition="'$(OS)'=='Unix'"/>
		<DownloadedFiles Include="$(DownloadsDir)/IPCFramework.dll"/>
		<!-- xBuild and MsBuild generate different case artifacts off the same solution file. (sigh) -->
		<DownloadedFiles Include="$(DownloadsDir)/$(ExCss).dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/$(ExCss).$(DebugInfo)"/>
		<DownloadedFiles Include="$(DownloadsDir)/ibusdotnet.dll" Condition="'$(OS)'=='Unix'"/>
		<DownloadedFiles Include="$(DownloadsDir)/NDesk.DBus.dll" Condition="'$(OS)'=='Unix'"/>
		<DownloadedFiles Include="$(DownloadsDir)/NDesk.DBus.dll.config" Condition="'$(OS)'=='Unix'"/>
		<DownloadedFiles Include="$(DownloadsDir)/Ionic.Zip.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/taglib-sharp.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/Spart.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/Newtonsoft.Json.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/FormattedEditor.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/HelpSystem.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/HtmlEditor.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/NetLoc.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/Paratext.LexicalContracts.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/ParatextShared.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/Utilities.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/QuickGraph.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.Machine.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.Collections.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/SIL.HermitCrab.dll"/>
		<DownloadedFiles Include="$(DownloadsDir)/gennorm2.exe" Condition="'$(OS)'=='Windows_NT'"/>
		<DownloadedFiles Include="$(DownloadsDir)/icudt$(IcuVersion).dll" Condition="'$(OS)'=='Windows_NT'"/>
		<DownloadedFiles Include="$(DownloadsDir)/icuin$(IcuVersion).dll" Condition="'$(OS)'=='Windows_NT'"/>
		<DownloadedFiles Include="$(DownloadsDir)/icutu$(IcuVersion).dll" Condition="'$(OS)'=='Windows_NT'"/>
		<DownloadedFiles Include="$(DownloadsDir)/icuuc$(IcuVersion).dll" Condition="'$(OS)'=='Windows_NT'"/>
	</ItemGroup>

	<Target Name="CopyDlls" DependsOnTargets="downloadDlls">
		<!-- .Net assemblies -->
		<Copy SourceFiles="$(fwrt)/DistFiles/LinqBridge.dll" DestinationFolder="$(dir-outputBase)"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true"/>
		<Copy SourceFiles="$(fwrt)/DistFiles/log4net.dll" DestinationFolder="$(dir-outputBase)"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true"/>
		<Copy SourceFiles="$(fwrt)/Lib/Common/Interop.ResourceDriver.dll" DestinationFolder="$(dir-outputBase)"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true"/>
		<!-- Linux shared libraries -->
		<Copy SourceFiles="$(fwrt)/DistFiles/libxample32.so" DestinationFolder="$(dir-outputBase)"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Condition="'$(OS)'=='Unix'"/>
		<Copy SourceFiles="$(fwrt)/DistFiles/libxample64.so" DestinationFolder="$(dir-outputBase)"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Condition="'$(OS)'=='Unix'"/>
		<!-- Windows dynamically loaded libraries -->
		<Copy SourceFiles="$(fwrt)/DistFiles/xample.dll" DestinationFolder="$(dir-outputBase)"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Condition="'$(OS)'=='Windows_NT'"/>
		<Copy SourceFiles="$(DownloadsDir)/Commons.Xml.Relaxng.dll" DestinationFolder="$(dir-outputBase)"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Condition="'$(OS)'=='Windows_NT'"/>
		<!-- ICU libs -->
		<Copy SourceFiles="$(DownloadsDir)/icudt.lib" DestinationFolder="$(fwrt)/Lib"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Condition="'$(OS)'=='Windows_NT'"/>
		<Copy SourceFiles="$(DownloadsDir)/icuin.lib" DestinationFolder="$(fwrt)/Lib"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Condition="'$(OS)'=='Windows_NT'"/>
		<Copy SourceFiles="$(DownloadsDir)/icuuc.lib" DestinationFolder="$(fwrt)/Lib"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" Condition="'$(OS)'=='Windows_NT'"/>
		<!-- NUnit dlls -->
		<Unzip ZipFilename="$(DownloadsDir)/NUnit-2.6.4.zip" ToDir="$(DownloadsDir)/" />
		<CreateItem Include="$(DownloadsDir)/NUnit-2.6.4/**/*">
			<Output TaskParameter="Include" ItemName="NUnitFiles"/>
		</CreateItem>
		<Copy SourceFiles="@(NUnitFiles)" DestinationFolder="$(fwrt)/Bin/NUnit/%(RecursiveDir)"
				SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true"/>
		<ForceDelete Files="$(DownloadsDir)/NUnit-2.6.4/" />
		<!-- LCM dlls -->
		<ForceDelete Files="$(DownloadsDir)/LCM/" />
		<Unzip ZipFilename="$(DownloadsDir)/LCM.zip" ToDir="$(DownloadsDir)/LCM/" />
		<ItemGroup>
			<LcmOutputBaseFiles Include="$(DownloadsDir)/LCM/ICSharpCode.SharpZipLib.dll" />
<!-- left out of artifacts.
			<LcmOutputBaseFiles Include="$(DownloadsDir)/LCM/libhunspell.dll" Condition="'$(OS)'=='Windows_NT'" />
-->
			<LcmOutputBaseFiles Include="$(DownloadsDir)/LCM/Microsoft.Practices.ServiceLocation.dll" />
			<LcmOutputBaseFiles Include="$(DownloadsDir)/LCM/protobuf-net.dll" />
			<LcmOutputBaseFiles Include="$(DownloadsDir)/LCM/StructureMap.dll" />
			<LcmOutputBaseFiles Include="$(DownloadsDir)/LCM/Tools.dll" />
			<LcmOutputBaseFiles Include="$(DownloadsDir)/LCM/SIL.LCModel.Utils.dll" />
			<LcmOutputBaseFiles Include="$(DownloadsDir)/LCM/SIL.LCModel.Utils.$(DebugInfo)" />
			<LcmOutputBaseFiles Include="$(DownloadsDir)/LCM/SIL.LCModel.Utils.Tests.dll" />
			<LcmOutputBaseFiles Include="$(DownloadsDir)/LCM/SIL.LCModel.Utils.Tests.dll.config" />
			<LcmOutputBaseFiles Include="$(DownloadsDir)/LCM/SIL.LCModel.Utils.Tests.$(DebugInfo)" />
			<LcmOutputBaseFiles Include="$(DownloadsDir)/LCM/SIL.LCModel.Core.dll" />
			<LcmOutputBaseFiles Include="$(DownloadsDir)/LCM/SIL.LCModel.Core.dll.config" Condition="'$(OS)'=='Unix'" />
			<LcmOutputBaseFiles Include="$(DownloadsDir)/LCM/SIL.LCModel.Core.$(DebugInfo)" />
			<LcmOutputBaseFiles Include="$(DownloadsDir)/LCM/SIL.LCModel.Core.Tests.dll" />
			<LcmOutputBaseFiles Include="$(DownloadsDir)/LCM/SIL.LCModel.Core.Tests.dll.config" />
			<LcmOutputBaseFiles Include="$(DownloadsDir)/LCM/SIL.LCModel.Core.Tests.$(DebugInfo)" />
			<LcmOutputBaseFiles Include="$(DownloadsDir)/LCM/SIL.LCModel.dll" />
			<LcmOutputBaseFiles Include="$(DownloadsDir)/LCM/SIL.LCModel.$(DebugInfo)" />
			<LcmOutputBaseFiles Include="$(DownloadsDir)/LCM/SIL.LCModel.Tests.dll" />
			<LcmOutputBaseFiles Include="$(DownloadsDir)/LCM/SIL.LCModel.Tests.dll.config" />
			<LcmOutputBaseFiles Include="$(DownloadsDir)/LCM/SIL.LCModel.Tests.$(DebugInfo)" />

			<LcmOutputCommonFiles Include="$(DownloadsDir)/LCM/KernelInterfaces/FwKernelTlb.iip" />

			<LcmFwKernelFiles Include="$(DownloadsDir)/LCM/KernelInterfaces/common.idh" />
			<LcmFwKernelFiles Include="$(DownloadsDir)/LCM/KernelInterfaces/FwKernel.idh" />
			<LcmFwKernelFiles Include="$(DownloadsDir)/LCM/KernelInterfaces/Language.idh" />
			<LcmFwKernelFiles Include="$(DownloadsDir)/LCM/KernelInterfaces/TextServ.idh" />
			<LcmFwKernelFiles Include="$(DownloadsDir)/LCM/KernelInterfaces/FwKernelTlb.idl" />

			<LcmDistFiles Include="$(DownloadsDir)/LCM/Styles.dtd" />

			<LcmTemplatesFiles Include="$(DownloadsDir)/LCM/Templates/GOLDEtic.xml" />
			<LcmTemplatesFiles Include="$(DownloadsDir)/LCM/Templates/NewLangProj.fwdata" />
			<LcmTemplatesFiles Include="$(DownloadsDir)/LCM/Templates/POS.xml" />
			<LcmTemplatesFiles Include="$(DownloadsDir)/LCM/Templates/SemDom.xml" />

			<LcmIcuDataFiles Include="$(DownloadsDir)/LCM/IcuData/UnicodeDataOverrides.txt" />

			<LcmIcuNrmFiles Include="$(DownloadsDir)/LCM/IcuData/icudt$(IcuVersion)l/nfc_fw.nrm" />
			<LcmIcuNrmFiles Include="$(DownloadsDir)/LCM/IcuData/icudt$(IcuVersion)l/nfkc_fw.nrm" />
		</ItemGroup>
		<Copy SourceFiles="@(LcmOutputBaseFiles)" DestinationFolder="$(dir-outputBase)" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" />
		<Copy SourceFiles="@(LcmOutputCommonFiles)" DestinationFolder="$(dir-fwoutputCommon)" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" />
		<Copy SourceFiles="@(LcmFwKernelFiles)" DestinationFolder="$(fwrt)/Src/Kernel" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" />
		<Copy SourceFiles="@(LcmDistFiles)" DestinationFolder="$(fwrt)/DistFiles" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" />
		<Copy SourceFiles="@(LcmTemplatesFiles)" DestinationFolder="$(fwrt)/DistFiles/Templates" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" />
		<Copy SourceFiles="@(LcmIcuDataFiles)" DestinationFolder="$(fwrt)/DistFiles/Icu$(IcuVersion)" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" />
		<Copy SourceFiles="@(LcmIcuNrmFiles)" DestinationFolder="$(fwrt)/DistFiles/Icu$(IcuVersion)/icudt$(IcuVersion)l" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" />
		<!-- Copy the downloaded artifacts -->
		<Copy SourceFiles="@(DownloadedFiles)" DestinationFolder="$(dir-outputBase)"
			SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true"/>
		<!-- NuGet packages. Property- and ItemGroups are inside the target so $(arch) and *'s are read properly -->
		<PropertyGroup>
			<Architecture Condition="'$(arch)'=='x86_64'">64</Architecture>
			<Architecture Condition="'$(arch)'!='x86_64'">32</Architecture>
			<GeckoDir Condition="'$(OS)'=='Windows_NT'">$(fwrt)/packages/Geckofx45.45.0.20</GeckoDir><!--yes, this version is missing the terminal .0-->
			<GeckoDir Condition="'$(OS)'!='Windows_NT'">$(fwrt)/packages/Geckofx45.$(Architecture).Linux.45.0.21.0</GeckoDir>
		</PropertyGroup>
		<ItemGroup>
			<NuGottenFiles Include="$(GeckoDir)/lib/net40/Geckofx-Core.dll"/>
			<NuGottenFiles Include="$(GeckoDir)/lib/net40/Geckofx-Core.pdb" Condition="'$(OS)'=='Windows_NT'"/>
			<NuGottenFiles Include="$(GeckoDir)/lib/net40/Geckofx-Core.dll.mdb" Condition="'$(OS)'!='Windows_NT'"/>
			<NuGottenFiles Include="$(GeckoDir)/lib/net40/Geckofx-Winforms.dll"/>
			<NuGottenFiles Include="$(GeckoDir)/lib/net40/Geckofx-Winforms.pdb" Condition="'$(OS)'=='Windows_NT'"/>
			<NuGottenFiles Include="$(GeckoDir)/lib/net40/Geckofx-Winforms.dll.mdb" Condition="'$(OS)'!='Windows_NT'"/>
			<NuGottenFiles Include="$(GeckoDir)/build/Geckofx-Core.dll.config" Condition="'$(OS)'!='Windows_NT'"/>
			<NuGottenFiles Include="$(GeckoDir)/content/**/*.*"/>
			<NuGottenFiles Include="$(fwrt)/packages/DotNetZip.1.10.1/lib/net20/*.*"/>
		</ItemGroup>
		<Copy SourceFiles="@(NuGottenFiles)" DestinationFolder="$(dir-outputBase)/%(RecursiveDir)"
			SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true"/>
	</Target>

	<Target Name="setRegistryValues" DependsOnTargets="initLinux;initWindows;setKeysInHKLM;setKeysInHKCU"/>

	<!-- This target only has an effect on Windows machines, and should be removed once encoding converters are updated to look in HKCU by default -->
	<Target Name="setKeysInHKLM" Condition="'$(UserIsAdmin)'=='True'">
		<WriteRegistry Hive="LocalMachine"
						 Key="SOFTWARE\SIL\SilEncConverters40\RootDir"
						 Value="$(fwrt)\DistFiles\Windows\EC Common"/>
		<WriteRegistry Hive="LocalMachine"
						 Key="SOFTWARE\SIL\SilEncConverters40\DeveloperPluginDir"
						 Value="$(fwrt)\DistFiles\Windows\EC\EC\Plugins"/>
	</Target>

	<Target Name="setKeysInHKCU" Condition="'$(packaging)' != 'yes'">
		<Message Text="Setting registry values for $(fwrt)."/>
		<WriteRegistry Hive="CurrentUser"
			Key="$(BUILDAGENT_HKCU)SOFTWARE\SIL\FieldWorks\$(FWMAJOR)\RootCodeDir"
			Value="$(dir-fwdistfiles)"/>
		<WriteRegistry Hive="CurrentUser"
			Key="$(BUILDAGENT_HKCU)SOFTWARE\SIL\FieldWorks\$(FWMAJOR)\RootDataDir"
			Value="$(dir-fwdistfiles)"/>
		<WriteRegistry Hive="CurrentUser"
			Key="$(BUILDAGENT_HKCU)SOFTWARE\SIL\FieldWorks\$(FWMAJOR)\ProjectsDir"
			Value="$(dir-fwdistfiles)\Projects"/>
		<WriteRegistry Hive="CurrentUser"
			Key="$(BUILDAGENT_HKCU)SOFTWARE\SIL\Icu$(IcuVersion)DataDir"
			Value="$(dir-icuData)"/>
		<WriteRegistry Hive="CurrentUser"
			Key="$(BUILDAGENT_HKCU)SOFTWARE\SIL\SilEncConverters40\RootDir"
			Value="$(fwrt)\DistFiles\Windows\EC Common"
			Condition="'$(OS)'=='Windows_NT'"/>
		<WriteRegistry Hive="CurrentUser"
			Key="$(BUILDAGENT_HKCU)SOFTWARE\SIL\SilEncConverters40\DeveloperPluginDir"
			Value="$(fwrt)\DistFiles\Windows\EC\EC\Plugins"
			Condition="'$(OS)'=='Windows_NT'"/>
		<WriteRegistry Hive="CurrentUser"
			Key="$(BUILDAGENT_HKCU)SOFTWARE\SIL\SilEncConverters40\RootDir"
			Value="/usr/lib/fieldworks"
			Condition="'$(OS)'=='Unix'"/>
		<WriteRegistry Hive="CurrentUser"
			Key="$(BUILDAGENT_HKCU)SOFTWARE\SIL\SilEncConverters40\DeveloperPluginDir"
			Value="/usr/lib/fieldworks/EC/Plugins"
			Condition="'$(OS)'=='Unix'"/>

		<MakeDir Directories="$(fwrt)/DistFiles/SIL/Repository"/>
		<WriteRegistry Hive="CurrentUser"
			Key="$(BUILDAGENT_HKCU)SOFTWARE\SIL\EncodingConverterRepository\Registry"
			Value="$(fwrt)/DistFiles/SIL/Repository/mappingRegistry.xml"/>
	</Target>

	<PropertyGroup>
		<SldrUrl>https://ldml.api.sil.org/</SldrUrl>
	</PropertyGroup>

	<Target Name="updateTemplateLdmlFiles">
		<DownloadFile Address="$(SldrUrl)bn" DownloadsDir="$(fwrt)/DistFiles/Templates" LocalFilename="bn.ldml"/>
		<DownloadFile Address="$(SldrUrl)de" DownloadsDir="$(fwrt)/DistFiles/Templates" LocalFilename="de.ldml"/>
		<DownloadFile Address="$(SldrUrl)en" DownloadsDir="$(fwrt)/DistFiles/Templates" LocalFilename="en.ldml"/>
		<DownloadFile Address="$(SldrUrl)es" DownloadsDir="$(fwrt)/DistFiles/Templates" LocalFilename="es.ldml"/>
		<DownloadFile Address="$(SldrUrl)fa" DownloadsDir="$(fwrt)/DistFiles/Templates" LocalFilename="fa.ldml"/>
		<DownloadFile Address="$(SldrUrl)fr" DownloadsDir="$(fwrt)/DistFiles/Templates" LocalFilename="fr.ldml"/>
		<!-- DownloadFile Address="$(SldrUrl)grc" DownloadsDir="$(fwrt)/DistFiles/Templates" LocalFilename="grc.ldml"/ -->
		<!-- DownloadFile Address="$(SldrUrl)hbo" DownloadsDir="$(fwrt)/DistFiles/Templates" LocalFilename="hbo.ldml"/ -->
		<DownloadFile Address="$(SldrUrl)hi" DownloadsDir="$(fwrt)/DistFiles/Templates" LocalFilename="hi.ldml"/>
		<DownloadFile Address="$(SldrUrl)id" DownloadsDir="$(fwrt)/DistFiles/Templates" LocalFilename="id.ldml"/>
		<DownloadFile Address="$(SldrUrl)km" DownloadsDir="$(fwrt)/DistFiles/Templates" LocalFilename="km.ldml"/>
		<DownloadFile Address="$(SldrUrl)ko" DownloadsDir="$(fwrt)/DistFiles/Templates" LocalFilename="ko.ldml"/>
		<DownloadFile Address="$(SldrUrl)ms" DownloadsDir="$(fwrt)/DistFiles/Templates" LocalFilename="ms.ldml"/>
		<DownloadFile Address="$(SldrUrl)ne" DownloadsDir="$(fwrt)/DistFiles/Templates" LocalFilename="ne.ldml"/>
		<DownloadFile Address="$(SldrUrl)pt" DownloadsDir="$(fwrt)/DistFiles/Templates" LocalFilename="pt.ldml"/>
		<DownloadFile Address="$(SldrUrl)ru" DownloadsDir="$(fwrt)/DistFiles/Templates" LocalFilename="ru.ldml"/>
		<DownloadFile Address="$(SldrUrl)te" DownloadsDir="$(fwrt)/DistFiles/Templates" LocalFilename="te.ldml"/>
		<DownloadFile Address="$(SldrUrl)th" DownloadsDir="$(fwrt)/DistFiles/Templates" LocalFilename="th.ldml"/>
		<DownloadFile Address="$(SldrUrl)tr" DownloadsDir="$(fwrt)/DistFiles/Templates" LocalFilename="tr.ldml"/>
		<DownloadFile Address="$(SldrUrl)vi" DownloadsDir="$(fwrt)/DistFiles/Templates" LocalFilename="vi.ldml"/>
		<DownloadFile Address="$(SldrUrl)zh-CN" DownloadsDir="$(fwrt)/DistFiles/Templates" LocalFilename="zh-CN.ldml"/>
	</Target>
</Project>
