<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<!-- Make all of FieldWorks. -->
	<Target Name="mkall" DependsOnTargets="initLinux;initWindows;LinuxRegistry;allCpp;testSolution">
		<Message Text="Finished mkall Target."/>
		<ItemGroup>
			<NUnitReportFiles Include="$(dir-outputBase)/*-nunit-output.xml" />
		</ItemGroup>
		<GenerateNUnitReports Condition="'$(action)'=='test'" ReportFiles="@(NUnitReportFiles)"/>
	</Target>

	<Target Name="buildSolution">
		<MSBuild Projects="$(fwrt)/FW.sln" Targets="$(msbuild-target)" Properties="$(msbuild-props)"/>
	</Target>

	<Target Name="testSolution" DependsOnTargets="buildSolution">
		<CallTarget Targets="testOnly" />
		<Message Text="Finished building all projects." Condition="'$(action)'!='test'"/>
		<Message Text="Finished building all projects and running tests." Condition="'$(action)'=='test'"/>
	</Target>

	<Target Name="testOnly" DependsOnTargets="testOnlyManaged;testGenericLibTest;testViewsTest" Condition="'$(action)'=='test'"/>

	<Target Name="testOnlyManaged" Condition="'$(action)'=='test'">
		<ItemGroup>
			<TestAssemblies Include="$(dir-outputBase)/*Tests.dll" Exclude="$(dir-outputBase)/SIL.*" />
		</ItemGroup>
		<NUnit3
			Assemblies="@(TestAssemblies)"
			ToolPath="$(NUnit3ConsolePath)"
			WorkingDirectory="$(dir-outputBase)"
			OutputXmlFile="$(dir-outputBase)/All-nunit-output.xml"
			UseNUnit3Xml="false"
			Verbose="true"
			Force32Bit="$(useNUnit-x86)"
			ExcludeCategory="$(excludedCategories)"
			FudgeFactor="$(timeoutFudgeFactor)"
			Timeout="54000000">
			<Output TaskParameter="FailedSuites" ItemName="FailedSuites"/>
		</NUnit3>
	</Target>

	<Target Name="allCpp" DependsOnTargets="DebugProcs;GenericLib;testGenericLib;FwKernel;Views;testViews">
		<ItemGroup>
			<CompMapFiles Include="$(dir-outputBase)/*.compmap" />
		</ItemGroup>
		<CatenateFiles SourceFiles="@(CompMapFiles)" TargetFile="$(dir-outputBase)/components.map" Condition="'$(OS)'=='Unix'"/>
	</Target>
	<Target Name="allCppNoTest" DependsOnTargets="DebugProcs;GenericLib;FwKernel;Views">
		<ItemGroup>
			<CompMapFiles Include="$(dir-outputBase)/*.compmap" />
		</ItemGroup>
		<CatenateFiles SourceFiles="@(CompMapFiles)" TargetFile="$(dir-outputBase)/components.map" Condition="'$(OS)'=='Unix'"/>
	</Target>

	<Target Name="copyIcuFiles" Condition="'$(OS)'!='Unix'">
		<!-- Need these files in the lib/${Platform} folder for RegFree to load the FwKernel.dll and Views.dll successfully -->
		<ItemGroup Condition="'$(OS)'=='Windows_NT'">
			<IcuLibsX86 Include="$(IcuFwRuntimeWinX86)icu*.dll" />
			<IcuLibsX64 Include="$(IcuFwRuntimeWinX64)icu*.dll" />
		</ItemGroup>

		<Message Text="From $(fwrt)/packages/Icu4c.Win.Fw.Lib.$(IcuWinFwLibVersion)/runtimes/win7-$(Platform)/native/ to $(dir-outputBase)/lib/$(Platform)"/>
		<Copy SourceFiles="@(IcuLibsX86)" DestinationFolder="$(dir-outputBase)/lib/x86" SkipUnchangedFiles="true" />
		<Copy SourceFiles="@(IcuLibsX64)" DestinationFolder="$(dir-outputBase)/lib/x64" SkipUnchangedFiles="true" />

	</Target>

	<Target Name="CopyKernelInterfaces">
		<!--
			The reason for using Exec instead of MsBuild here is that the MsBuild task doesn't
			provide access to the restore flag, and passing the restore target won't try to
			reload .props files after the package restore, even when doing it in two MsBuild task
			calls.
		-->
		<Exec Command="msbuild /restore /t:GenerateCellarConstants /p:Configuration=$(config-capital) $(fwrt)/Src/ViewsInterfaces/ViewsInterfaces.csproj" WorkingDirectory="$(fwrt)/Src/ViewsInterfaces/" />
	</Target>

	<ItemGroup>
		<Fragments Include="$(dir-fwdistfiles)/*.fragment.manifest"/>
	</ItemGroup>
	<Target Name="regFreeCpp" DependsOnTargets="FwKernel;Views"
		AfterTargets="FwKernel;Views" Condition="'$(OS)'=='Windows_NT'">
		<!-- REVIEW (Hasso) 2022.09: should these be forward slashes -->
		<RegFree Executable="$(dir-outputBase)/FwKernel.dll" Output="$(dir-outputBase)/FieldWorks.Tests.manifest"
			Dlls="$(dir-outputBase)\FwKernel.dll;$(dir-outputBase)\Views.dll"
			Fragments="@(Fragments)" Platform="$(Platform)" MSBuildArchitecture="$(Platform)"/>
	</Target>

	<Target Name="DebugProcs" DependsOnTargets="initLinux;initWindows;CopyKernelInterfaces">
		<Make Condition="'$(OS)'=='Windows_NT'"
				Makefile="$(fwrt)\Src\DebugProcs\DebugProcs.mak"
				Configuration="$(config-capital)"
				BuildRoot="$(fwrt)"
				BuildArch="'$(Platform)'"
				Macros="EXTRA_INCLUDE=$(IcuFwIncludeDirectory) EXTRA_LINK_OPTS=/LIBPATH:$(IcuFwLibDirectory)"
				WorkingDirectory="$(fwrt)\Src\DebugProcs"/>
		<Make Condition="'$(OS)'=='Unix'"
				Makefile="$(fwrt)/Src/DebugProcs/Makefile"
				Configuration="$(config-capital)" Target="$(make-target)"
				BuildRoot="$(fwrt)"
				WorkingDirectory="$(fwrt)/Src/DebugProcs"/>
		<Message Text="Finished building DebugProcs."/>
	</Target>

	<Target Name="GenericLib" DependsOnTargets="DebugProcs">
		<Make Condition="'$(OS)'=='Windows_NT'"
				Makefile="$(fwrt)\Src\Generic\GenericLib.mak"
				Configuration="$(config-capital)"
				BuildRoot="$(fwrt)"
				BuildArch="'$(Platform)'"
				WorkingDirectory="$(fwrt)\Src\Generic"/>
		<Make Condition="'$(OS)'=='Unix'"
				Makefile="$(fwrt)/Src/Generic/Makefile"
				Configuration="$(config-capital)" Target="$(make-target)"
				BuildRoot="$(fwrt)"
				WorkingDirectory="$(fwrt)/Src/Generic"/>
		<Message Text="Finished building GenericLib."/>
	</Target>

	<Target Name="testGenericLib" DependsOnTargets="GenericLib;FwKernel;Views">
		<Make Condition="'$(OS)'=='Windows_NT'"
				Makefile="$(fwrt)\Src\Generic\Test\testGenericLib.mak"
				Configuration="$(config-capital)"
				BuildRoot="$(fwrt)"
				BuildArch="'$(Platform)'"
				Macros="EXTRA_INCLUDE=$(IcuFwIncludeDirectory) EXTRA_LINK_OPTS=/LIBPATH:$(IcuFwLibDirectory)"
				WorkingDirectory="$(fwrt)\Bin"/>
		<Make Condition="'$(OS)'=='Unix'"
				Makefile="$(fwrt)/Src/Generic/Test/Makefile"
				Configuration="$(config-capital)" Target="$(make-target)"
				BuildRoot="$(fwrt)"
				WorkingDirectory="$(fwrt)/Src/Generic/Test" />
		<RegFree Executable="$(dir-outputBase)\testGenericLib.exe"
				DependentAssemblies="$(dir-outputBase)\FwKernel.X.manifest;$(dir-outputBase)\Views.X.manifest"
				Condition="'$(OS)'=='Windows_NT'" Platform="$(Platform)" MSBuildArchitecture="$(Platform)"/>
		<Exec Command="set PATH=$(PATH) mt.exe -outputresource:$(dir-outputBase)\testGenericLib.exe -manifest $(dir-outputBase)\testGenericLib.exe.manifest"
				Condition="'$(OS)'=='Windows_NT'"/>
		<Message Text="Finished building testGenericLib." />
	</Target>

	<Target Name="testGenericLibTest" Condition="'$(action)'=='test'">
		<Unitpp FixturePath="$(dir-outputBase)/testGenericLib"
				FudgeFactor="$(timeoutFudgeFactor)"
				Timeout="60000">
			<Output TaskParameter="FailedSuites" ItemName="FailedSuites"/>
		</Unitpp>
		<Message Text="Finished running testGenericLib tests."/>
	</Target>

	<Target Name="FwKernel" DependsOnTargets="GenericLib;CopyKernelInterfaces;AppCore;createCompMaps;copyIcuFiles">
		<Message Text="FwKernel make-target='$(make-target)'"/>
		<Make Condition="'$(OS)'=='Windows_NT'"
			Makefile="$(fwrt)\Src\Kernel\FwKernel.mak"
			Configuration="$(config-capital)"
			BuildRoot="$(fwrt)"
			BuildArch="'$(Platform)'"
			Macros="EXTRA_INCLUDE=$(IcuFwIncludeDirectory) EXTRA_LINK_OPTS=/LIBPATH:$(IcuFwLibDirectory)"
			WorkingDirectory="$(fwrt)\Src\Kernel"/>
		<Make Condition="'$(OS)'=='Unix'"
			Makefile="$(fwrt)/Src/Kernel/Makefile"
			Configuration="$(config-capital)" Target="$(make-target)"
			BuildRoot="$(fwrt)"
			WorkingDirectory="$(fwrt)/Src/Kernel"/>
		<RegFree Executable="$(dir-outputBase)\FwKernel.dll" Output="$(dir-outputBase)\FwKernel.X.manifest" Condition="'$(OS)'=='Windows_NT'" Platform="$(Platform)" MSBuildArchitecture="$(Platform)"/>
		<Message Text="Finished building FwKernel."/>
	</Target>

	<Target Name="AppCore" DependsOnTargets="DebugProcs;GenericLib">
		<Message Text="AppCore make-target='$(make-target)'"/>
		<Make Condition="'$(OS)'=='Unix'"
				Makefile="$(fwrt)/Src/AppCore/Makefile"
				Configuration="$(config-capital)" Target="$(make-target)"
				BuildRoot="$(fwrt)"
				WorkingDirectory="$(fwrt)/Src/AppCore"/>
		<Message Text="Finished building AppCore."/>
	</Target>

	<Target Name="Views" DependsOnTargets="GenericLib;FwKernel;CopyKernelInterfaces">
		<Make Condition="'$(OS)'=='Windows_NT'"
			Makefile="$(fwrt)\Src\views\Views.mak"
			Configuration="$(config-capital)"
			BuildRoot="$(fwrt)"
			BuildArch="'$(Platform)'"
			Macros="EXTRA_INCLUDE=$(IcuFwIncludeDirectory) EXTRA_LINK_OPTS=/LIBPATH:$(IcuFwLibDirectory)"
			WorkingDirectory="$(fwrt)\Src\views"/>
		<Make Condition="'$(OS)'=='Unix'"
			Makefile="$(fwrt)/Src/views/Makefile"
			Configuration="$(config-capital)" Target="$(make-target)"
			BuildRoot="$(fwrt)"
			WorkingDirectory="$(fwrt)/Src/views"/>
		<RegFree Executable="$(dir-outputBase)\Views.dll" Output="$(dir-outputBase)\Views.X.manifest" Condition="'$(OS)'=='Windows_NT'" Platform="$(Platform)" MSBuildArchitecture="$(Platform)"/>
		<Message Text="Finished building Views."/>
	</Target>

	<Target Name="testViews" DependsOnTargets="GenericLib;Views;RootSite;FwKernel">
		<Make Condition="'$(OS)'=='Windows_NT'"
				Makefile="$(fwrt)\Src\views\Test\testViews.mak"
				Configuration="$(config-capital)"
				BuildRoot="$(fwrt)"
				BuildArch="'$(Platform)'"
				Macros="EXTRA_INCLUDE=$(IcuFwIncludeDirectory) EXTRA_LINK_OPTS=/LIBPATH:$(IcuFwLibDirectory)"
				WorkingDirectory="$(fwrt)\Bin"/>
		<Make Condition="'$(OS)'=='Unix'"
				Makefile="$(fwrt)/Src/views/Test/Makefile"
				Configuration="$(config-capital)" Target="$(make-target)"
				BuildRoot="$(fwrt)"
				WorkingDirectory="$(fwrt)/Src/views/Test"/>
		<RegFree Executable="$(dir-outputBase)\testViews.exe"
				DependentAssemblies="$(dir-outputBase)\FwKernel.X.manifest;$(dir-outputBase)\Views.X.manifest"
				Condition="'$(OS)'=='Windows_NT'" Platform="$(Platform)" MSBuildArchitecture="$(Platform)"/>
		<Exec Command="mt.exe -outputresource:$(dir-outputBase)\testViews.exe -manifest $(dir-outputBase)\testViews.exe.manifest"
				Condition="'$(OS)'=='Windows_NT'"/>

		<ItemGroup>
			<ViewsCompMapFiles Include="$(dir-outputBase)/*.compmap" />
		</ItemGroup>
		<CatenateFiles SourceFiles="@(ViewsCompMapFiles)" TargetFile="$(dir-outputBase)/components.map" Condition="'$(OS)'=='Unix'"/>
		<Message Text="Finished building testViews."/>
	</Target>

	<Target Name="testViewsTest" Condition="'$(action)'=='test'">
		<Unitpp FixturePath="$(dir-outputBase)/testViews"
				FudgeFactor="$(timeoutFudgeFactor)"
				Timeout="250000">
			<Output TaskParameter="FailedSuites" ItemName="FailedSuites"/>
		</Unitpp>
		<Message Text="Finished running testViews tests." />
	</Target>

	<PropertyGroup>
		<Original-OBJ_DIR>$(OBJ_DIR)</Original-OBJ_DIR>
		<Original-BUILD4UX>$(BUILD4UX)</Original-BUILD4UX>
		<Original-ANAL_TYPE>$(ANAL_TYPE)</Original-ANAL_TYPE>
	</PropertyGroup>

	<Target Name="mktlbs" DependsOnTargets="ViewsInterfaces;FwKernel;Views">
		<SetEnvVar Variable="BUILD_OUTPUT" Value="$(dir-fwoutput)" />
		<SetEnvVar Variable="OBJ_DIR" Value="$(dir-fwobj)" />
		<SetEnvVar Variable="BUILD4UX" Value="$(build4ux)"/>
		<SetEnvVar Variable="ANAL_TYPE" Value="performance" Condition="'$(performance)'=='true'"/>
		<Make Condition="'$(OS)'=='Windows_NT'"
				Makefile="$(fwrt)\Src\Kernel\FwKernel.mak"
				Configuration="$(config-capital)"
				Target="dirs $(dir-fwoutputCommon)\FwKernelTlb.tlb"
				BuildRoot="$(fwrt)"
				BuildArch="'$(PLATFORM)'"
				WorkingDirectory="$(fwrt)"/>
		<Make Condition="'$(OS)'=='Windows_NT'"
				Makefile="$(fwrt)\Src\views\Views.mak"
				Configuration="$(config-capital)"
				Target="dirs $(dir-fwoutputCommon)\ViewsTlb.tlb"
				BuildRoot="$(fwrt)"
				WorkingDirectory="$(fwrt)"/>
		<SetEnvVar Variable="BUILD_OUTPUT" Value="$(Original-BUILD_OUTPUT)" />
		<SetEnvVar Variable="OBJ_DIR" Value="$(Original-OBJ_DIR)" />
		<SetEnvVar Variable="BUILD4UX" Value="$(Original-BUILD4UX)" />
		<SetEnvVar Variable="ANAL_TYPE" Value="$(Original-ANAL_TYPE)" />
	</Target>

	<Target Name="remakefw-impl" DependsOnTargets="CleanAll;Initialize;setRegistryValues;mkall"/>

	<Target Name="remakefw-internal">
		<CallTarget Targets="remakefw-impl" Condition="!$(RestartBuild)" />
		<MSBuild Projects="$(MSBuildProjectFullPath)" Targets="remakefw-impl" Properties="Configuration=$(Configuration);Action=$(Action);buildtlb=$(buildtlb)"
			Condition="$(RestartBuild)" />
	</Target>

	<Target Name="remakefw" DependsOnTargets="remakefw-internal">
		<!-- If tests were run on a developer machine, fail to alert the developer of any failures -->
		<Error Condition="'@(FailedSuites)'!=''" Text="The following projects had failing tests: @(FailedSuites)" />
	</Target>

	<Target Name="remakefw-jenkins" DependsOnTargets="remakefw-internal">
		<!-- Jenkins looks at the test output files to see if tests failed, so we don't have to fail on failed tests -->
		<Warning Condition="'@(FailedSuites)'!=''" Text="The following projects had failing tests: @(FailedSuites)" />
	</Target>

	<ItemGroup>
		<!-- Don't delete FieldWorks.targets - that has to be done separately, otherwise we
		delete the file we just create previously when we run remakefw -->
		<!--<GeneratedFiles Include="$(fwrt)/Build/FieldWorks.targets"/>-->
		<GeneratedFiles Include="$(fwrt)/Build/packages.config"/>
		<GeneratedFiles Include="$(fwrt)/Src/**/Collection.cpp"/>
		<GeneratedFiles Include="$(fwrt)/Src/**/asserts.log"/>
		<GeneratedFiles Include="$(fwrt)/Src/ViewsInterfaces/Views.cs"/>
		<GeneratedFiles Include="$(fwrt)/Lib/debug/unit++.lib"/>
		<GeneratedFiles Include="$(fwrt)/Lib/release/unit++.lib"/>
		<GeneratedFiles Include="$(fwrt)/DistFiles/Parts/GeneratedParts.xml"/>
		<GeneratedFiles Include="$(fwrt)/DistFiles/Parts/Generated.fwlayout"/>
	</ItemGroup>

	<Target Name="CleanDownloads">
		<ForceDelete Files="$(DownloadsDir)" />
	</Target>

	<Target Name="Clean" DependsOnTargets="CleanAll">
		<ForceDelete Files="$(fwrt)/Build/FieldWorks.targets"/>
	</Target>

	<Target Name="CleanAll" DependsOnTargets="cleanWindows;cleanLinux">
		<!-- remove the Obj and Output directories -->
		<ForceDelete Files="$(dir-fwobj);$(dir-fwoutput)" />
		<ForceDelete Files="$(fwrt)/Output" Condition="'$(OS)'=='Unix'" />
		<!-- remove other directories and files created during the build process -->
		<ForceDelete Files="@(GeneratedFiles)" />
		<!-- remove LCM files -->
		<ItemGroup>
			<LcmFilesToDelete Include="$(fwrt)/Src/Kernel/*.idh" />
			<LcmFilesToDelete Include="$(fwrt)/Src/Kernel/FwKernelTlb.idl" />
			<LcmFilesToDelete Include="$(fwrt)/DistFiles/Styles.dtd" />
			<LcmFilesToDelete Include="$(fwrt)/DistFiles/Templates/GOLDEtic.xml" />
			<LcmFilesToDelete Include="$(fwrt)/DistFiles/Templates/NewLangProj.fwdata" />
			<LcmFilesToDelete Include="$(fwrt)/DistFiles/Templates/POS.xml" />
			<LcmFilesToDelete Include="$(fwrt)/DistFiles/Templates/SemDom.xml" />
			<LcmFilesToDelete Include="$(dir-fwoutputCommon)/FwKernelTlb.json" />
		</ItemGroup>
		<ForceDelete Files="@(LcmFilesToDelete)" />
		<ForceDelete Files="$(fwrt)/DistFiles/Icu$(IcuVersion)" />
		<SetEnvVar Variable="LD_PRELOAD" Value="" Condition="'$(OS)'=='Unix'"/>
		<Message Text="Finished deleting the output directories!" />
	</Target>

	<PropertyGroup>
		<DownloadsDir>$(fwrt)/Downloads</DownloadsDir>
	</PropertyGroup>

	<Target Name="setRegistryValues" DependsOnTargets="initLinux;initWindows;setKeysInHKCU"/>

	<Target Name="setKeysInHKCU" DependsOnTargets="GenerateVersionFiles" Condition="'$(packaging)' != 'yes'">
		<Message Text="Setting registry values for $(fwrt)."/>
		<!-- Using the OS-appropriate directory separator character is required for some unit tests to pass -->
		<WriteRegistry Hive="CurrentUser"
			Key="$(BUILDAGENT_HKCU)SOFTWARE/SIL/FieldWorks/$(GitVersion_Major)/RootCodeDir"
			Value="$(dir-fwdistfiles)"/>
		<WriteRegistry Hive="CurrentUser"
			Key="$(BUILDAGENT_HKCU)SOFTWARE/SIL/FieldWorks/$(GitVersion_Major)/RootDataDir"
			Value="$(dir-fwdistfiles)"/>
		<WriteRegistry Hive="CurrentUser"
			Key="$(BUILDAGENT_HKCU)SOFTWARE/SIL/FieldWorks/$(GitVersion_Major)/ProjectsDir"
			Value="$([System.IO.Path]::Combine(&quot;$(dir-fwdistfiles)&quot;, &quot;Projects&quot;))"/>
		<WriteRegistry Hive="CurrentUser"
			Key="$(BUILDAGENT_HKCU)SOFTWARE/SIL/Icu$(IcuVersion)DataDir"
			Value="$(dir-icuData)"/>
		<WriteRegistry Hive="CurrentUser"
			Key="$(BUILDAGENT_HKCU)SOFTWARE/SIL/SilEncConverters40/RootDir"
			Value="$(dir-outputBase)"
			Condition="'$(OS)'=='Windows_NT'"/>
		<WriteRegistry Hive="CurrentUser"
			Key="$(BUILDAGENT_HKCU)SOFTWARE/SIL/SilEncConverters40/DeveloperPluginDir"
			Value="$(dir-outputBase)\EC\Plugins"
			Condition="'$(OS)'=='Windows_NT'"/>
		<WriteRegistry Hive="CurrentUser"
			Key="$(BUILDAGENT_HKCU)SOFTWARE/SIL/SilEncConverters40/RootDir"
			Value="$(installation_prefix)/lib/fieldworks"
			Condition="'$(OS)'=='Unix'"/>
		<WriteRegistry Hive="CurrentUser"
			Key="$(BUILDAGENT_HKCU)SOFTWARE/SIL/SilEncConverters40/DeveloperPluginDir"
			Value="$(installation_prefix)/lib/fieldworks/EC/Plugins"
			Condition="'$(OS)'=='Unix'"/>

		<MakeDir Directories="$(fwrt)/DistFiles/SIL/Repository"/>
		<WriteRegistry Hive="CurrentUser"
			Key="$(BUILDAGENT_HKCU)SOFTWARE/SIL/EncodingConverterRepository/Registry"
			Value="$(fwrt)/DistFiles/SIL/Repository/mappingRegistry.xml"/>

		<!-- Register silfw:// link protocol -->
		<WriteRegistry Hive="CurrentUser"
			Key="$(BUILDAGENT_HKCU)SOFTWARE/Classes/silfw/"
			Value="URL:SILFW Protocol"/>
		<WriteRegistry Hive="CurrentUser"
			Key="$(BUILDAGENT_HKCU)SOFTWARE/Classes/silfw/URL Protocol"/>
		<WriteRegistry Hive="CurrentUser"
			Key="$(BUILDAGENT_HKCU)SOFTWARE/Classes/silfw/shell/open/command/"
			Value='"$(dir-outputBase)/FieldWorks.exe" %1'/>
	</Target>

	<Target Name="RestoreBuildTasks" DependsOnTargets="CheckPrerequisites">
		<!-- REVIEW (Hasso) 2022.10: this could be simply FwBuildTasks, w/o SIL., since it's not its own package -->
		<MSBuild Projects="$(fwrt)/Build/Src/FwBuildTasks/SIL.FwBuildTasks/SIL.FwBuildTasks.csproj" Targets="Restore;Build" Properties="Configuration=Debug;Platform=Any CPU" Condition="!Exists('$(fwrt)/Build/Src/FwBuildTasks/artifacts/Debug/SIL.FwBuildTasks.dll')"/>
		<Exec Command='$(NuGetCommand) install Icu4c.Win.Fw.Lib -version $(IcuWinFwLibVersion) -solutionDirectory "$(fwrt)"' Condition="!Exists('$(fwrt)/packages/Icu4c.Win.Fw.Lib.$(IcuWinFwLibVersion)')"/>
		<Exec Command='$(NuGetCommand) install GitVersion.MsBuild -version $(GitVersionMsBuildVersion) -solutionDirectory "$(fwrt)"' Condition="!Exists('$(fwrt)/packages/GitVersion.MsBuild.$(GitVersionMsBuildVersion)')"/>
		<!-- Install NUnit.Console which has the required extensions as dependencies -->
		<Exec Command='$(NuGetCommand) install NUnit.Console -version $(NunitConsoleVersion) -solutionDirectory "$(fwrt)"' Condition="!Exists('$(fwrt)/packages/NUnit.Console.$(NunitConsoleVersion)')" />
		<Exec Command='$(NuGetCommand) install SIL.BuildTasks -version $(SilBuildTasksVersion) -solutionDirectory "$(fwrt)"' Condition="!Exists('$(fwrt)/packages/SIL.BuildTasks.$(SilBuildTasksVersion)')" />
		<!-- SIL.Lib is needed for the ParatextPlugin -->
		<Exec Command='$(NuGetCommand) install SIL.Lib -version $(SilLibVersion) -solutionDirectory "$(fwrt)"' Condition="!Exists('$(fwrt)/packages/SIL.Lib.$(SilLibVersion)')" />
	</Target>
</Project>
