;A file of rules using alpha variables
;First load the nat classes (msg 6541):
(load_nat_class message <nat_class name high_v     features (cons - voc + high +)>)
(load_nat_class message <nat_class name cons       features (cons + voc -)>)
(load_nat_class message <nat_class name nasal_cons features (cons + voc - nasal +)>)
(load_nat_class message <nat_class name null       features ()>)
(load_nat_class message <nat_class name voiceless_stop features (cons + vd - cont -)>)
(load_nat_class message <nat_class name k          features (cons + voc - poa velar vd - cont - nasal -)>)
(load_nat_class message <nat_class name g          features (cons + voc - poa velar vd +  cont - nasal -)>)
(load_nat_class message <nat_class name asp        features (asp +)>)
(load_nat_class message <nat_class name unasp      features (asp -)>)
(load_nat_class message <nat_class name V          features (cons - voc +)>)
(morpher_set message (*quit_on_error* false))

; [V +high] -> [alpha back beta round] / [V alpha back beta round] C __
(load_morpher_rule message
  <prule  nm var_rule1
		  str (morphophonemic)
		  var_fs (a back b round)
		  in_pseq (<simp_cntxt class high_v>)
		  subrules (<psub out_pseq (<simp_cntxt class null alpha_vars (a + b +)>)
						 left_environ <ptemp pseq (<simp_cntxt class high_v alpha_vars (a + b +)>
												   <simp_cntxt class cons>)
									  >
					>
				   )
  >
)
(trace_morpher_rule message (true true var_rule1))
;First one should be 2x ambiguous:
(morph_and_lookup_word pretty_print bububu)

; [C +nasal] -> [alpha poa] / __ [C alpha poa]
(load_morpher_rule message
  <prule  nm var_rule1
		  str (morphophonemic)
	var_fs (a poa)
		  in_pseq (<simp_cntxt class nasal_cons>)
		  subrules (<psub out_pseq (<simp_cntxt class null alpha_vars (a +)>)
						  right_environ <ptemp pseq (<simp_cntxt class cons alpha_vars (a +)>)>
					>
				   )
  >
)
(morph_and_lookup_word pretty_print mbindiêg)

;Now test alpha vars in LHS:
; [C -vd -cont alpha poa] --> [+asp] / [C -vd -cont alpha poa] V __
;       --> [-asp] /
;(Nobody said these rules have to be linguistically plausible!)
(load_morpher_rule message
  <prule  nm var_rule1
		  str (allophonic)
	var_fs (a poa)
		  in_pseq (<simp_cntxt class voiceless_stop alpha_vars (a +)>)
		  subrules (<psub out_pseq (<simp_cntxt class asp>)
						  left_environ <ptemp pseq (<simp_cntxt class voiceless_stop alpha_vars (a +)>
													<simp_cntxt class V>
												   )
									   >
					>
					<psub out_pseq (<simp_cntxt class unasp>)>
				   )
  >
)
(morph_and_lookup_word pretty_print pipH)

;Test alpha vars in environ only (not in LHS or RHS):
; 0 --> f / [V a high b back c round] __ [V a high b back c round]
(load_morpher_rule message
  <prule  nm var_rule1
		  str (allophonic)
	var_fs (a high b back c round)
		  in_pseq ()
		  subrules (<psub out_pseq (<seg rep f ctable table1>)
						  left_environ  <ptemp pseq (<simp_cntxt class V alpha_vars (a + b + c +)>)>
						  right_environ <ptemp pseq (<simp_cntxt class V alpha_vars (a + b + c +)>)>
					>
				   )
  >
)
;Expect no ambiguity:
(morph_and_lookup_word pretty_print buifibuifi)

;Exercise error msg 6053.  We "cheat" here by asking the rule to do s.t.
; that it can't do: enforce agreement in aspiration between an epenthesized
; stop and a neighbor that isn't specified for the feature [aspirated].
; When it comes time for outputting the result, this *should* result in
; an error msg that the epenthesized stop isn't specified for this feature.
; 0 --> [voiceless velar stop a asp] / [g a asp] __ #
(load_morpher_rule message
  <prule  nm var_rule1
		  str (morphophonemic)
		  var_fs (a asp)
		  in_pseq ()
		  subrules (<psub out_pseq (<simp_cntxt class k alpha_vars (a +)>)
						  left_environ <ptemp pseq (<simp_cntxt class g alpha_vars (a +)>)>
						  right_environ <ptemp fin true pseq ()>
					>
				   )
  >
)
;Expect error msg 6053:
(morph_and_lookup_word pretty_print sagk)
(trace_morpher_strata (false false))

(morpher_set message (*quit_on_error* true))

(remove_morpher_rule message var_rule1)
;...and the natural classes:
(remove_nat_class message high_v)
(remove_nat_class message cons)
(remove_nat_class message voiceless_stop)
(remove_nat_class message nasal_cons)
(remove_nat_class message null)
(remove_nat_class message asp)
(remove_nat_class message unasp)
(remove_nat_class message k)
(remove_nat_class message g)
(remove_nat_class message V)
