;Test optional sequences in prules
;First load the nat classes (msg 6541):
(load_nat_class message <nat_class name high_v     features (cons - voc + high +)>)
(load_nat_class message <nat_class name low_v      features (cons - voc + low +)>)
(load_nat_class message <nat_class name rnd_v      features (cons - voc + round +)>)
(load_nat_class message <nat_class name back_rnd   features (back + round +)>)
(load_nat_class message <nat_class name back_rnd_v features (cons - voc + back + round +)>)
(load_nat_class message <nat_class name cons       features (cons +)>)
(morpher_set message (*quit_on_error* false))
;Loading two rules (msg 6505)
; (first is already traced):
; i -> u /  __ Ca(Ca)C{u o}
(load_morpher_rule message
  <prule  nm rule3
		  str (allophonic)
		  in_pseq (<simp_cntxt class high_v>)
		  subrules (<psub out_pseq (<simp_cntxt class back_rnd>)
						  right_environ <ptemp pseq (<opt_seq min 1 max 2 seq (<simp_cntxt class cons>
													 <simp_cntxt class low_v>)>
													 <simp_cntxt class cons>
													 <simp_cntxt class rnd_v>)
													>
					>
				   )
  >
)
; i -> u / {u o}(Ca)CaC __
(load_morpher_rule message
  <prule  nm rule4
		  str (allophonic)
		  in_pseq (<simp_cntxt class high_v>)
		  subrules (<psub out_pseq (<simp_cntxt class back_rnd>)
						  left_environ <ptemp pseq (<simp_cntxt class rnd_v>
													<opt_seq min 1 max 2 seq (<simp_cntxt class cons>
													<simp_cntxt class low_v>)>
													<simp_cntxt class cons>)
									   >
					>
				   )
  >
)
;Tracing the rules (msg 6535):
(trace_morpher_rule message (true true rule3))
(trace_morpher_rule message (true true rule4))
;Morph.  Neither rule should apply to first (because opt seq has MIN of 1), 1x ambig:
(morph_and_lookup_word pretty_print bubu)
;Both rules should apply to next, 3x ambig (one anal will be ruled out on
; synth because rules are mutually counterfeeding):
(morph_and_lookup_word pretty_print bubabu)
;Both rules should apply to next, 2x ambig:
(morph_and_lookup_word pretty_print bubababu)
;Neither rule should apply to next (because opt seq has MAX of 2):
(morph_and_lookup_word pretty_print bubabababu)

;Finally, remove the rules (msg 6506):
(remove_morpher_rule message rule3)
(remove_morpher_rule message rule4)
;And try a different optional sequence (msg 6505):
; i -> u / u ({u i}) __
(load_morpher_rule message
  <prule  nm rule1
		  str (allophonic)
		  in_pseq (<simp_cntxt class high_v>)
		  subrules (<psub out_pseq (<simp_cntxt class back_rnd>)
						  left_environ <ptemp pseq (<simp_cntxt class back_rnd_v>
													<opt_seq min 0 max 2 seq (<simp_cntxt class high_v>)>)
									   >
					>
				   )
  >
)
;Trace it
(trace_morpher_rule message (true true rule1))
;1x ambiguous:
(morph_and_lookup_word pretty_print buuubuuu)

(morpher_set message (*quit_on_error* true))
;And remove the rule:
(remove_morpher_rule message rule1)
;...and the natural classes:
(remove_nat_class message high_v)
(remove_nat_class message low_v)
(remove_nat_class message rnd_v)
(remove_nat_class message back_rnd)
(remove_nat_class message back_rnd_v)
(remove_nat_class message cons)
