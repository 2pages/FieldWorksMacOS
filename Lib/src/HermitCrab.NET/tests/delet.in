;Test rules of deletion
;First load the nat classes (msg 6541):
(load_nat_class message <nat_class name high_front_unrnd_v  features (cons - voc + high + low - back - round -)>)
(load_nat_class message <nat_class name high_back_rnd_v     features (cons - voc + high + back + round +)>)
(load_nat_class message <nat_class name high_v    features (cons - voc + high +)>)
(load_nat_class message <nat_class name C   features (cons + voc -)>)
(load_nat_class message <nat_class name V   features (cons - voc +)>)
(load_nat_class message <nat_class name asp       features (asp +)>)
(load_nat_class message <nat_class name voiced    features (vd +)>)
(load_nat_class message <nat_class name non_cons  features (cons -)>)
;Don't quit on errors:
(morpher_set message (*quit_on_error* false))
;Load first rule (msg 6505)
;i -> 0 / {i, u} __
(load_morpher_rule message
  <prule  nm rule4
		  str (allophonic)
		  in_pseq (<simp_cntxt class high_front_unrnd_v>)
		  subrules (<psub out_pseq ()
						  left_environ <ptemp pseq (<simp_cntxt class high_v>)>
		>
	   )
  >
)
;And trace it (msg 6535):
(trace_morpher_rule message (true true rule4))
;And test (4x ambig):
(morph_and_lookup_word pretty_print bubu)

;Set *del_re_apps* to 1 and morph again; should be 5x ambiguous:
(morpher_set message (*del_re_apps* 1))
(morph_and_lookup_word pretty_print bubu)

;Revise the rule
;i -> 0 / __ C
(load_morpher_rule message
  <prule  nm rule4
		  str (allophonic)
		  in_pseq (<simp_cntxt class high_front_unrnd_v>)
		  subrules (<psub out_pseq ()
						  right_environ <ptemp pseq (<simp_cntxt class C>)>
		>
	   )
  >
)
;Test (2x ambiguity):
(morph_and_lookup_word pretty_print bubu)

;Revise to delete two segs at once, but first set *del_re_apps* back to 0:
(morpher_set message (*del_re_apps* 0))
;ii -> 0 / __ C
(load_morpher_rule message
  <prule  nm rule4
		  str (allophonic)
		  in_pseq (<simp_cntxt class high_front_unrnd_v><simp_cntxt class high_front_unrnd_v>)
		  subrules (<psub out_pseq ()
						  right_environ <ptemp pseq (<simp_cntxt class C>)>
		>
	   )
  >
)
;Test (2x ambiguity):
(morph_and_lookup_word pretty_print bubu)

;Revise the rule again, to see how it behaves in a different place in the word:
;ii -> 0 / u __
(load_morpher_rule message
  <prule  nm rule4
		  str (allophonic)
		  in_pseq (<simp_cntxt class high_front_unrnd_v><simp_cntxt class high_front_unrnd_v>)
		  subrules (<psub out_pseq ()
						  left_environ <ptemp pseq (<simp_cntxt class high_back_rnd_v>)>
		>
	   )
  >
)
;Test (2x ambiguity):
(morph_and_lookup_word pretty_print bubu)

;The ff. two unnatural rules will test err msg 6052 by deleting all segs:
; b --> 0 / # __ +
; (Note that this rule also tests the use of "seg"s as opposed to nat classes
; in the LHS or deletion rules.)
(load_morpher_rule message
  <prule  nm rule4
		  str (morphophonemic)
		  in_pseq (<seg rep b ctable table3>)
		  subrules (<psub out_pseq ()
						  left_environ <ptemp init true pseq ()>
						  right_environ <ptemp pseq (<bdry rep + ctable table3>)>
		>
	   )
  >
)
; ubu --> 0 / + __ #
(load_morpher_rule message
  <prule  nm rule5
		  str (morphophonemic)
		  in_pseq (<seg rep u ctable table3><seg rep b ctable table3><seg rep u ctable table3>)
		  subrules (<psub out_pseq ()
						  left_environ <ptemp pseq (<bdry rep + ctable table3>)>
						  right_environ <ptemp fin true pseq ()>
		>
	   )
  >
)

;While we're at it, we want to test that a prule won't run into some problem
; if it tries to apply to a pshape which consists of only a bdry marker
; (Note that the bdry marker won't be erased from the pshape until the end of
; the stratum, after the prule has had a chance to apply.)
; t --> [+asp] / [-cons] __
(load_morpher_rule message
  <prule  nm rule1
		  str (morphophonemic)
		  in_pseq (<seg rep t ctable table3>)
		  subrules (<psub out_pseq (<simp_cntxt class asp>)
						  left_environ <ptemp pseq (<simp_cntxt class non_cons>)>
		>
	   )
  >
)
(trace_morpher_rule message (true true))
;Test, expect err msg 6052:
(morph_and_lookup_word pretty_print b)

;Now modify the mrules so they don't depend on the bdry marker:
; b --> 0 / # __
(load_morpher_rule message
  <prule  nm rule4
		  str (allophonic)
		  in_pseq (<seg rep b ctable table3>)
		  subrules (<psub out_pseq ()
						  left_environ <ptemp init true pseq ()>
						  right_environ <ptemp pseq ()>
		>
	   )
  >
)
; ubu --> 0 / __ #
(load_morpher_rule message
  <prule  nm rule5
		  str (allophonic)
		  in_pseq (<seg rep u ctable table3><seg rep b ctable table3><seg rep i ctable table3>)
		  subrules (<psub out_pseq ()
						  left_environ <ptemp pseq ()>
						  right_environ <ptemp fin true pseq ()>
		>
	   )
  >
)
(load_morpher_rule message
  <prule  nm rule1
		  str (allophonic)
		  in_pseq (<seg rep t ctable table3>)
		  subrules (<psub out_pseq (<simp_cntxt class asp>)
						  left_environ <ptemp pseq (<simp_cntxt class non_cons>)>
		>
	   )
  >
)
;Test, expect err msg 6051:
(morph_and_lookup_word pretty_print b)

;Remove one of the rules:
(remove_morpher_rule message rule1)
;Test deletion rule that uses alpha variables.  We first load a rule that
; will uninstantiate one of the features that the next rule will look to
; for agreement:
; C --> [+vd] / V __ V
(load_morpher_rule message
  <prule  nm rule4
		  str (allophonic)
		  in_pseq (<simp_cntxt class C>)
		  subrules (<psub out_pseq (<simp_cntxt class voiced>)
						  left_environ <ptemp pseq (<simp_cntxt class V>)>
						  right_environ <ptemp pseq (<simp_cntxt class V>)>
		>
	   )
  >
)
;And now the alpha var deletion rule (a degemination rule):
; [C a poa b vd c cont d nasal] --> 0 / __ [C a poa b vd c cont d nasal]
(load_morpher_rule message
  <prule  nm rule5
		  str (morphophonemic)
	var_fs (a poa b vd c cont d nasal)
		  in_pseq (<simp_cntxt class C alpha_vars (a + b + c + d +)>)
		  subrules (<psub out_pseq ()
						  right_environ <ptemp pseq (<simp_cntxt class C alpha_vars (a + b + c + d +)>)>
		>
	   )
  >
)
;Morph, expect 2x ambiguity:
(morph_and_lookup_word pretty_print aba)

;Remove the remaining rules:
(remove_morpher_rule message rule4)
(remove_morpher_rule message rule5)
;...and the natural classes:
(remove_nat_class message high_front_unrnd_v)
(remove_nat_class message high_back_rnd_v)
(remove_nat_class message high_v)
(remove_nat_class message C)
(remove_nat_class message V)
(remove_nat_class message asp)
(remove_nat_class message voiced)
(remove_nat_class message non_cons)
(morpher_set message (*quit_on_error* true))
