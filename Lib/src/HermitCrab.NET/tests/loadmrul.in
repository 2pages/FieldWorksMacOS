;Test loading of MRULEs
;First load some nat classes (msg 6541):
(load_nat_class message <nat_class name null features ()>)
(load_nat_class message <nat_class name C features (cons +)>)
(load_nat_class message <nat_class name V features (voc +)>)
(load_nat_class message <nat_class name alv_stop features (cons + strident - del_rel - poa alveolar)>)
(load_nat_class message <nat_class name voiceless_c features (cons + vd -)>)
(load_nat_class message <nat_class name labiodental features (cons + poa labiodental)>)
(load_nat_class message <nat_class name voiced features (vd +)>)
(load_nat_class message <nat_class name voiceless features (vd -)>)
(load_nat_class message <nat_class name strident features (cons + strident +)>)
(load_nat_class message <nat_class name d features (cons + strident - del_rel - poa alveolar vd +)>)
;Load two simple mrules (msg 6505, twice):
; English -ed suffix: "Åd" (= barred-i + d) after t or d, "t" after other voiceless C,
; "d" otherwise.  (Note that the third subrule uses a natural class, instead of a string + char table;
; this is to test the use of natural classes in the output.)
; In the 1st subrule, we arbitrarily leave the two "chunks" of the input
; ungrouped, while in the 2nd we group them.
(load_morpher_rule message
  <mrule  nm ed_suffix
		  str morphophonemic
		  r_pos (V) r_hf (tense (past pres))
		  hf (tense (past))
		  gl PAST
		  subrules (<msub
					  in <m_lhs pseq ((<opt_seq min 1 max -1 seq (<simp_cntxt class null>)>)
									  (<simp_cntxt class alv_stop>)
									 )
						 >
					  out <m_rhs p_out (1 2 (Åd table3))>
					>
					<msub
					  in <m_lhs pseq ((<opt_seq min 1 max -1 seq (<simp_cntxt class null>)>
									   <simp_cntxt class voiceless_c>
									  )
									 )
						 >
					  out <m_rhs p_out (1 (t table3))>
					>
					<msub
					  in <m_lhs pseq ((<opt_seq min 1 max -1 seq (<simp_cntxt class null>)>))>
					  out <m_rhs p_out (1 <simp_cntxt class d>)>
					>
				  )
  >
)
;Revise the rule to use alpha vars to consolidate the last two subrules into
; a single subrule:
(load_morpher_rule message
  <mrule  nm ed_suffix
		  str morphophonemic
		  r_pos (V) r_hf (tense (past pres))
		  hf (tense (past))
		  gl PAST
		  subrules (<msub
					  in <m_lhs pseq ((<opt_seq min 1 max -1 seq (<simp_cntxt class null>)>)
									  (<simp_cntxt class alv_stop>)
									 )
						 >
					  out <m_rhs p_out (1 2 (Åd table3))>
					>
					<msub
					  in <m_lhs pseq ((<opt_seq min 1 max -1 seq (<simp_cntxt class null>)>
									   <simp_cntxt class C alpha_vars (a +)>
									  )
									 )
						 >
					  out <m_rhs p_out (1 <simp_cntxt class alv_stop alpha_vars (a +)>)>
					  var_fs (a vd)
					>
				  )
  >
)
;English -s suffix: change f -> v / __# and add z; "Ås" after strident C (that's a barred i);
; "s" after other voiceless C; "z" otherwise
(load_morpher_rule message
  <mrule  nm s_suffix
		  str morphophonemic
		  r_pos (V) r_hf (pers (1 2 3))
		  hf (pers (3))
		  gl 3SG
		  subrules (<msub
					  in <m_lhs pseq ((<opt_seq min 1 max -1 seq (<simp_cntxt class null>)>)
									  (<simp_cntxt class labiodental>)
									 )
						 >
					  out <m_rhs p_out (1 (2 <simp_cntxt class voiced>) (z table3))>
					>
					<msub
					  in <m_lhs pseq ((<opt_seq min 1 max -1 seq (<simp_cntxt class null>)>
									   <simp_cntxt class strident>
									  )
									 )
						 >
					  out <m_rhs p_out (1 (Åz table3))>
					>
					<msub
					  in <m_lhs pseq ((<opt_seq min 1 max -1 seq (<simp_cntxt class null>)>)
									  (<simp_cntxt class voiceless_c>)
									 )
						 >
					  out <m_rhs p_out (1 2 (s table3))>
					>
					<msub
					  in <m_lhs pseq ((<opt_seq min 1 max -1 seq (<simp_cntxt class null>)>))
						 >
					  out <m_rhs p_out (1 (z table3))>
					>
				  )
	>
)
;The next rule is a simple prefix rule:
(load_morpher_rule message
  <mrule  nm re_prefix
		  str morphophonemic
		  r_pos (V)
		  r_sub (transitive_vp)
		  gl AGAIN
		  hf (again (+))
		  subrules (<msub
					  in <m_lhs pseq ((<opt_seq min 1 max -1 seq (<simp_cntxt class null>)>))>
					  out <m_rhs p_out ((di table3) 1)>
					>
				   )
  >
)
;The next rule is an infixing rule:
(load_morpher_rule message
  <mrule  nm infix
		  str morphophonemic
		  r_pos (V)
		  r_hf (language (tagalog))
		  gl INFIX
		  subrules (<msub
					  in <m_lhs pseq ((<simp_cntxt class C>)
									  (<opt_seq min 1 max -1 seq (<simp_cntxt class null>)>)
									 )
						 >
					  out <m_rhs p_out (1 (if table3) 2)>
					>
				   )
  >
)
;The next rule is a simple rule of metathesis that changes a word-final VC ->CV /V(C)__
; before adding a "t"; otherwise it just adds a t:
(load_morpher_rule message
  <mrule  nm metathesis
		  str morphophonemic
		  r_pos (V) r_hf (language (shuar))
		  hf (tense (past))
		  gl PAST
		  subrules (<msub
					  in <m_lhs pseq ((<opt_seq min 1 max -1 seq (<simp_cntxt class null>)>
									   <simp_cntxt class V>
									   <simp_cntxt class C>
									  )
									  (<simp_cntxt class V>)
									  (<simp_cntxt class C>))
						 >
					  out <m_rhs p_out (1 3 2 (t table3))>
					>
					<msub
					  in <m_lhs pseq ((<opt_seq min 1 max -1 seq (<simp_cntxt class null>)>))>
					  out <m_rhs p_out (1 (t table3))>
					>
				  )
  >
)
;The next rule is a rule which reduplicates the first syllable (C(C)V),
; devoicing the (first) C:
(load_morpher_rule message
  <mrule  nm left_redup
		  str morphophonemic
		  r_pos (V)
		  r_hf (language (bahasa))
		  gl REP
		  subrules (<msub
					  in <m_lhs pseq ((<simp_cntxt class C>)
									  (<opt_seq min 1 max 1 seq (<simp_cntxt class C>)>
									   <simp_cntxt class V>
									  )
									  (<opt_seq min 1 max -1 seq (<simp_cntxt class null>)>)
									 )
						 >
					  out <m_rhs p_out ((1 <simp_cntxt class voiceless>) 2 1 2 3)>
					>
				   )
  >
)
;The last rule is a rule which reduplicates the last syllable (CV(C)),
; devoicing the final C (if it appears):
(load_morpher_rule message
  <mrule  nm right_redup
		  str morphophonemic
		  r_pos (V)
		  r_hf (language (bahasa))
		  gl REP
		  subrules (<msub
					  in <m_lhs pseq ((<opt_seq min 1 max -1 seq (<simp_cntxt class null>)>)
									  (<simp_cntxt class C>
									   <simp_cntxt class V>
									  )
									  (<opt_seq min 0 max 1 seq (<simp_cntxt class C>)>)
									 )
						 >
					  out <m_rhs p_out (1 2 3 2 (3 <simp_cntxt class voiceless>))>
					>
				   )
  >
)
;Re-order the rules.  First show current order:
(morpher_show pretty_print *mrules*)
;...and in the allophonic stratum (no rules):
(show_stratum_mrules pretty_print allophonic)
;...and in the morphophonemic stratum (all rules):
(show_stratum_mrules pretty_print morphophonemic)
;Then make some changes:
(morpher_set (*mrules* (infix re_prefix s_suffix right_redup left_redup metathesis ed_suffix)))
;Now verify the change in the global var *mrules* (correct order is:
; (infix re_prefix s_suffix right_redup left_redup metathesis ed_suffix)
(morpher_show pretty_print *mrules*)
;...and in the allophonic stratum (no rules):
(show_stratum_mrules pretty_print allophonic)
;...and in the morphophonemic stratum (all rules):
(show_stratum_mrules pretty_print morphophonemic)
;Make sure nothing is in the prules lists:
(morpher_show pretty_print *prules*)
(show_stratum_prules pretty_print allophonic)
(show_stratum_prules pretty_print morphophonemic)
;Now try to set *mrules* with a nonexistent rule (err msg 6008):
(morpher_set (*mrules* (infix nonesuch re_prefix s_suffix right_redup left_redup metathesis ed_suffix)))
;Verify that *mrules* is still the same:
(morpher_show pretty_print *mrules*)
;Try to set *mrules*, but omit a rule (err msg 6044):
(morpher_set (*mrules* (infix s_suffix right_redup left_redup metathesis ed_suffix)))
;Verify that *mrules* is still the same:
(morpher_show pretty_print *mrules*)

;Now we'll remove the rules (msg 6506):
(remove_morpher_rule message ed_suffix)
(remove_morpher_rule message s_suffix)
(remove_morpher_rule message re_prefix)
(remove_morpher_rule message infix)
(remove_morpher_rule message metathesis)
(remove_morpher_rule message left_redup)
(remove_morpher_rule message right_redup)
;Verify that they're gone:
(show_stratum_mrules pretty_print allophonic)
(show_stratum_mrules pretty_print morphophonemic)

;And remove the natural classes (msg 6542):
(remove_nat_class message null)
(remove_nat_class message C)
(remove_nat_class message V)
(remove_nat_class message alv_stop)
(remove_nat_class message voiceless_c)
(remove_nat_class message labiodental)
(remove_nat_class message voiced)
(remove_nat_class message strident)
