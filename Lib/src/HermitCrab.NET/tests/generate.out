(message (
 <hc6508 fname c:\data\hc\morpher\tests\generate.in > ) )
;Test generate_word (which allows the user to test the rules in
; synthesis mode, using either existing lex entries, or ones he makes up).
;Now go to the test files themselves:
(message (
 <hc6508 fname c:\data\hc\morpher\tests\genmrule.in > ) )
;Test generate_word with "ordinary" (non-realizational) rules.
;Have to open a language for first test:
(message (
 <hc6510 lname foobar > ) )
;Don't let errors stop us:
(message (
 <hc6502 var_name '*quit_on_error*' > ) )
;Start by trying generate_word with no strata defined; error msg 6022:
ERROR:hc6022 --- <hc6022  >
(message (
 <hc6511 lname foobar cur_lname *unknown* > ) )
;Now load the strata etc.:
(message (
 <hc6508 fname c:\data\hc\morpher\tests\startup.in > ) )
;Generic startup file for morpher tests.
;Open a new language for testing purposes (msg 6510):
(message (
 <hc6510 lname Phonology Test Language > ) )
;First a morpher_set command, which should result in msg 6502:
(message (
 <hc6502 var_name '*pfeatures*' > ) )
;Then we run three load_char_def_table commands, each of
; which should result in a msg 6501:
(message (
 <hc6501 table_name table1 > ) )
(message (
 <hc6501 table_name table2 > ) )
(message (
 <hc6501 table_name table3 > ) )
;Now load the strata (msg 6502):
(message (
 <hc6502 var_name '*strata*' > ) )
;...and set their ctables (msg 6550):
(message (
 <hc6550 sname morphophonemic ctable_name table3 > ) )
(message (
 <hc6550 sname allophonic ctable_name table1 > ) )
(message (
 <hc6550 sname '*surface*' ctable_name table1 > ) )
;...their cyclicity (msg 6552):
(message (
 <hc6552 sname morphophonemic > ) )
(message (
 <hc6552 sname allophonic > ) )
;...the order of their prules (msg 6555):
(message (
 <hc6555 sname morphophonemic > ) )
(message (
 <hc6555 sname allophonic > ) )
;...and the order of the mrules (msg 6556):
(message (
 <hc6556 sname morphophonemic > ) )
(message (
 <hc6556 sname allophonic > ) )
;Load in a dictionary file.  Two lex entries are purposely incorrect, and
; will result in error msgs 6024 and 6009:
(message (
 <hc6502 var_name '*quit_on_error*' > ) )
ERROR:hc6024 --- <hc6024 lex_id 3 stratum nonesuch >
ERROR:hc6009 --- <hc6009 char h string pHhut item 4 ctable_name table1 >
(message (
 <hc6515 n 56 fname c:\data\hc\morpher\tests\diction.txt > ) )
(message (
 <hc6502 var_name '*quit_on_error*' > ) )
(message (
 <hc6521 fname c:\data\hc\morpher\tests\startup.in > ) )
;Don't let errors stop us (we have to do it again, because we closed
; the language before):
(message (
 <hc6502 var_name '*quit_on_error*' > ) )
;Load some natural classes:
(message (
 <hc6541 nat_class_name null > ) )
(message (
 <hc6541 nat_class_name alv_stop > ) )
(message (
 <hc6541 nat_class_name voiceless_c > ) )
(message (
 <hc6541 nat_class_name labiodental > ) )
(message (
 <hc6541 nat_class_name voiced > ) )
(message (
 <hc6541 nat_class_name strident > ) )
(message (
 <hc6541 nat_class_name 'C' > ) )
(message (
 <hc6541 nat_class_name unasp > ) )
;Load some morphological rules:
;Load two mrules (msg 6505, twice):
; English -s suffix: "Ås" after strident C (that's a barred i), "s" after other voiceless C,
; "z" otherwise
(message (
 <hc6505 rname s_suffix > ) )
; English -ed suffix: "Åd" (= barred-i + d) after t or d, "t" after other voiceless C,
; "d" otherwise.
(message (
 <hc6505 rname ed_suffix > ) )
; t -> th / C__
; This rule is just here to ensure that prules function correctly, too.
; (In particular, we'll check that we don't apply prules from a deeper
; stratum to a lex entry from a shallower stratum.)
(message (
 <hc6505 rname rule1 > ) )
;Start out with rule tracing off, and exercise some error msgs.
;Try generation of a lex entry without a stratum (err msg 6056):
ERROR:hc6056 --- <hc6056 stratum sig >
;Try generation of a lex entry with an invalid stratum (err msg 6024):
ERROR:hc6024 --- <hc6024 lex_id gen1 stratum nonesuch >
;Try generation of a lex entry with incorrect number of strata (err msg 6025):
ERROR:hc6025 --- <hc6025  >
;Try generation of a lex entry with an invalid mrule (err msg 6026):
ERROR:hc6026 --- <hc6026 rname nonesuch stratum morphophonemic >
;Try generation of a lex entry with an mrule in the wrong stratum
; (also err msg 6026):
ERROR:hc6026 --- <hc6026 rname s_suffix stratum morphophonemic >
;Now try some commands that should succeed.  First try generation with a
; user-supplied lex entry (one that isn't already in the lexicon):
(pretty_print
 <lex id gen1 sh sigzd gl sig 3SG PAST pos 'N' mrs (s_suffix ed_suffix ) str '*surface*' hf (pers (3 ) tense (past ) ) > )
;Now turn on rule tracing:
(message (
 <hc6539  > ) )
;Generate it again, but this time we try the rules in the opposite order,
; just to make sure we can run generate_word with a rule order different
; from the one specified for the stratum:
(pretty_print
  <sll real <lex id gen1 sh sig gl sig pos 'N' str morphophonemic > rf ( )
   cont (
	<pa nm rule1
	 in  <lex id gen1 sh sig gl sig pos 'N' str morphophonemic >
	 out <lex id gen1 sh sig gl sig pos 'N' str morphophonemic >>
	<ma nm ed_suffix
	 in  <lex id gen1 sh sig gl sig pos 'N' str allophonic >
	 out <lex id gen1 sh sigd gl sig PAST pos 'N' mrs (ed_suffix ) str allophonic hf (tense (past ) ) >>
	<ma nm s_suffix
	 in  <lex id gen1 sh sigd gl sig PAST pos 'N' mrs (ed_suffix ) str allophonic hf (tense (past ) ) >
	 out <lex id gen1 sh sigdz gl sig PAST 3SG pos 'N' mrs (ed_suffix s_suffix ) str allophonic hf (tense (past ) pers (3 ) ) >>
   )
  >
)
(pretty_print
 <lex id gen1 sh sigdz gl sig PAST 3SG pos 'N' mrs (ed_suffix s_suffix ) str '*surface*' hf (tense (past ) pers (3 ) ) > )
;Now try generation with a lex entry that is already in the lexicon.
; (This one is in the allophonic stratum, so won't see "rule1".)
(pretty_print
  <sll real <lex id 1 sh pHit pos 'N' str allophonic hf (foo (+ ) baz (- ) ) ff (fum (- ) bar (+ ) ) > rf ( )
   cont (
	<ma nm ed_suffix
	 in  <lex id 1 sh pHit pos 'N' str allophonic hf (foo (+ ) baz (- ) ) ff (fum (- ) bar (+ ) ) >
	 out <lex id 1 sh pHitÅd gl ? PAST pos 'N' mrs (ed_suffix ) str allophonic hf (foo (+ ) baz (- ) tense (past ) ) ff (fum (- ) bar (+ ) ) >>
   )
  >
)
(pretty_print
 <lex id 1 sh pHitÅd gl ? PAST pos 'N' mrs (ed_suffix ) str '*surface*' hf (foo (+ ) baz (- ) tense (past ) ) ff (fum (- ) bar (+ ) ) > )
;Also try gen with nonexistent lex entry (error msg 6013):
ERROR:hc6013 --- <hc6013 lex_id nonesuch >
;Turn off tracing:
(message (
 <hc6536  > ) )
;Now we'll remove the rules (msg 6506):
(message (
 <hc6506 rname s_suffix > ) )
(message (
 <hc6506 rname ed_suffix > ) )
(message (
 <hc6506 rname rule1 > ) )
;...and the natural classes (msg 6542):
(message (
 <hc6542 nat_class_name null > ) )
(message (
 <hc6542 nat_class_name alv_stop > ) )
(message (
 <hc6542 nat_class_name voiceless_c > ) )
(message (
 <hc6542 nat_class_name labiodental > ) )
(message (
 <hc6542 nat_class_name voiced > ) )
(message (
 <hc6542 nat_class_name strident > ) )
(message (
 <hc6542 nat_class_name 'C' > ) )
(message (
 <hc6542 nat_class_name unasp > ) )
(message (
 <hc6521 fname c:\data\hc\morpher\tests\genmrule.in > ) )
(message (
 <hc6508 fname c:\data\hc\morpher\tests\genrz.in > ) )
;Test generation with realizational rules.
;First load some nat classes (msg 6541):
(message (
 <hc6541 nat_class_name null > ) )
(message (
 <hc6541 nat_class_name alv_stop > ) )
(message (
 <hc6541 nat_class_name voiceless_c > ) )
(message (
 <hc6541 nat_class_name labiodental > ) )
(message (
 <hc6541 nat_class_name voiced > ) )
(message (
 <hc6541 nat_class_name voiceless > ) )
(message (
 <hc6541 nat_class_name strident > ) )
(message (
 <hc6541 nat_class_name d > ) )
;Load two simple realizational rules (msg 6505, twice).
; These are similar to the "ordinary" mrules in LOADMRUL.ARI.
; English -ed suffix:
(message (
 <hc6505 rname ed_rz > ) )
;English -s suffix:
(message (
 <hc6505 rname s_rz > ) )
;The above two rules will belong to a single slot; the following rule will
; belong to a different slot:
(message (
 <hc6505 rname evidential > ) )
;First test with an inflectional template that has a nonexistent rule.
; Loading the template should be OK, msg 6565:
(message (
 <hc6565 sname morphophonemic > ) )
;But when we try generation, we should get error msg 6059 because of
; the nonexistent rule:
ERROR:hc6059 --- <hc6059 rname nonesuch sname morphophonemic >
(pretty_print
 <lex id rz1 sh saguv gl sag WIT pos 'V' mrs (evidential ) str '*surface*' hf (evidential (witnessed ) ) > )
;Now define a corrected inflectional template for the above rules:
(message (
 <hc6565 sname morphophonemic > ) )
;Turn on rule tracing:
(message (
 <hc6539  > ) )
;Try generation.  First we generate with a single realizational suffix:
(pretty_print
  <sll real <lex id rz1 sh sag gl sag pos 'V' str morphophonemic > rf (evidential (witnessed ) )
   cont (
	<ma nm evidential
	 in  <lex id rz1 sh sag gl sag pos 'V' str morphophonemic >
	 out <lex id rz1 sh saguv gl sag WIT pos 'V' mrs (evidential ) str morphophonemic hf (evidential (witnessed ) ) >>
   )
  >
)
(pretty_print
 <lex id rz1 sh saguv gl sag WIT pos 'V' mrs (evidential ) str '*surface*' hf (evidential (witnessed ) ) > )
;...and with two suffixes:
(pretty_print
  <sll real <lex id rz1 sh sag gl sag pos 'V' str morphophonemic > rf (evidential (witnessed ) pers (3 ) tense (pres ) )
   cont (
	<ma nm s_rz
	 in  <lex id rz1 sh sag gl sag pos 'V' str morphophonemic >
	 out <lex id rz1 sh sagz gl sag 3PRES pos 'V' mrs (s_rz ) str morphophonemic hf (pers (3 ) tense (pres ) ) >>
	<ma nm evidential
	 in  <lex id rz1 sh sagz gl sag 3PRES pos 'V' mrs (s_rz ) str morphophonemic hf (pers (3 ) tense (pres ) ) >
	 out <lex id rz1 sh sagzuv gl sag 3PRES WIT pos 'V' mrs (s_rz evidential ) str morphophonemic hf (pers (3 ) tense (pres ) evidential (witnessed ) ) >>
   )
  >
)
(pretty_print
 <lex id rz1 sh sagzuv gl sag 3PRES WIT pos 'V' mrs (s_rz evidential ) str '*surface*' hf (pers (3 ) tense (pres ) evidential (witnessed ) ) > )
;Now test blocking.  Since the stem already has the past tense feature,
; the suffix should not get added.  (Note that the lex entry is already
; in the lexicon.)  We'll turn on tracing of blocking, to show the
; blocking struc:
(message (
 <hc6529  > ) )
;First we generate with "si", which should be replaced by "sau":
(pretty_print
  <sll real <lex id bl1 sh si fam 'SEE' pos 'V' str morphophonemic > rf (tense (past ) )
   cont (
	<block type template bl <lex id bl2 sh sau fam 'SEE' pos 'V' str morphophonemic hf (tense (past ) ) >>
   )
  >
)
(pretty_print
 <lex id bl2 sh sau fam 'SEE' pos 'V' str '*surface*' hf (tense (past ) ) > )
;Then we generate with "sau", which should undergo no change
; (blocking is vacuous):
(pretty_print
  <sll real <lex id bl2 sh sau fam 'SEE' pos 'V' str morphophonemic hf (tense (past ) ) > rf (tense (past ) )
   cont (
   )
  >
)
(pretty_print
 <lex id bl2 sh sau fam 'SEE' pos 'V' str '*surface*' hf (tense (past ) ) > )
;And we should not be able to generate starting with a lex entry whose
; head features contradict those of the realizational features (i.e. we
; should get an error):
(pretty_print
  <sll real <lex id bl3 sh sis fam 'SEE' pos 'V' str morphophonemic hf (tense (present ) ) > rf (tense (past ) )
   cont (
   )
  >
)
;Also check on tracing of templates:
((
 <hc6548  > ) )
;First test has no rules applying inside the template:
(pretty_print
  <sll real <lex id bl1 sh si fam 'SEE' pos 'V' str morphophonemic > rf (tense (past ) )
   cont (
	<block type template bl <lex id bl2 sh sau fam 'SEE' pos 'V' str morphophonemic hf (tense (past ) ) >>
	<ta nm verb io in
	 lex <lex id bl2 sh sau fam 'SEE' pos 'V' str morphophonemic hf (tense (past ) ) >>
	<ta nm verb io out
	 lex <lex id bl2 sh sau fam 'SEE' pos 'V' str morphophonemic hf (tense (past ) ) >>
   )
  >
)
(pretty_print
 <lex id bl2 sh sau fam 'SEE' pos 'V' str '*surface*' hf (tense (past ) ) > )
;Second test has a rule applying inside the template:
(pretty_print
  <sll real <lex id rz1 sh sag gl sag pos 'V' str morphophonemic > rf (evidential (witnessed ) )
   cont (
	<ta nm verb io in
	 lex <lex id rz1 sh sag gl sag pos 'V' str morphophonemic >>
	<ma nm evidential
	 in  <lex id rz1 sh sag gl sag pos 'V' str morphophonemic >
	 out <lex id rz1 sh saguv gl sag WIT pos 'V' mrs (evidential ) str morphophonemic hf (evidential (witnessed ) ) >>
	<ta nm verb io out
	 lex <lex id rz1 sh saguv gl sag WIT pos 'V' mrs (evidential ) str morphophonemic hf (evidential (witnessed ) ) >>
   )
  >
)
(pretty_print
 <lex id rz1 sh saguv gl sag WIT pos 'V' mrs (evidential ) str '*surface*' hf (evidential (witnessed ) ) > )
;Clean up the tracing:
(message (
 <hc6545  > ) )
(message (
 <hc6530  > ) )
(message (
 <hc6536  > ) )
;Clean up the rules:
((
 <hc6506 rname ed_rz > ) )
((
 <hc6506 rname s_rz > ) )
((
 <hc6506 rname evidential > ) )
;Clean up the natural classes:
(message (
 <hc6542 nat_class_name null > ) )
(message (
 <hc6542 nat_class_name alv_stop > ) )
(message (
 <hc6542 nat_class_name voiceless_c > ) )
(message (
 <hc6542 nat_class_name labiodental > ) )
(message (
 <hc6542 nat_class_name voiced > ) )
(message (
 <hc6542 nat_class_name voiceless > ) )
(message (
 <hc6542 nat_class_name strident > ) )
(message (
 <hc6542 nat_class_name d > ) )
(message (
 <hc6521 fname c:\data\hc\morpher\tests\genrz.in > ) )
(message (
 <hc6521 fname c:\data\hc\morpher\tests\generate.in > ) )
