;Tests of simple disjunctive rules
;First load the nat classes (msg 6541):
(load_nat_class message <nat_class name stop          features (cons + cont -)>)
(load_nat_class message <nat_class name asp           features (asp +)>)
(load_nat_class message <nat_class name unasp         features (asp -)>)
(load_nat_class message <nat_class name high_v        features (cons - voc + high +)>)
(load_nat_class message <nat_class name high_front_v  features (cons - voc + high + back -)>)
(load_nat_class message <nat_class name back_rnd      features (back + round +)>)
(load_nat_class message <nat_class name back_unrnd    features (back + round -)>)
(load_nat_class message <nat_class name front_rnd     features (back - round +)>)
(load_nat_class message <nat_class name front_unrnd   features (back - round -)>)
(load_nat_class message <nat_class name back_rnd_v    features (back + round +)>)
(load_nat_class message <nat_class name back_unrnd_v  features (back + round -)>)
(load_nat_class message <nat_class name front_rnd_v   features (back - round +)>)
(load_nat_class message <nat_class name front_unrnd_v features (back - round -)>)
(load_nat_class message <nat_class name C             features (cons + voc -)>)
(load_nat_class message <nat_class name V             features (cons - voc +)>)
(load_nat_class message <nat_class name vd            features (vd +)>)
(load_nat_class message <nat_class name p             features (cons + cont - vd - asp - poa bilabial)>)
(load_nat_class message <nat_class name voiceless_stop features (cons + vd - cont -)>)
(morpher_set message (*quit_on_error* false))
;Load a simple rule:
; p -> ph /#_
;   -> p /
(load_morpher_rule message
  <prule  nm disrule1
		  str (allophonic)
		  in_pseq (<simp_cntxt class stop>)
		  subrules (<psub out_pseq (<simp_cntxt class asp>)
						  left_environ <ptemp init true pseq ()>
		>
					<psub out_pseq (<simp_cntxt class unasp>)
		>
				   )
  >
)
;Trace it:
(trace_morpher_rule message (true true disrule1))
;Morph; one analysis:
(morph_and_lookup_word pretty_print pHip)

;A vowel harmony rule, with no real elsewhere case, but we can construct a simplified rule for anal:
;[V +high] -> [+round +back] / [V +round +back] (C [V +high -back])* C __
;    -> [+round -back] / [V +round -back] (C [V +high -back])* C __
;    -> [-round +back] / [V -round +back] (C [V +high -back])* C __
;    -> [-round -back] / [V -round -back] (C [V +high -back])* C __
(load_morpher_rule message
  <prule  nm disrule1
		  str (allophonic)
		  in_pseq (<simp_cntxt class high_v>)
		  subrules (<psub out_pseq (<simp_cntxt class back_rnd>)
						  left_environ <ptemp pseq (<simp_cntxt class back_rnd_v>
													<opt_seq min 0 max 99 seq (<simp_cntxt class C>
																			   <simp_cntxt class high_front_v>)
													>
													<opt_seq min 1 max 1 seq (<simp_cntxt class C>)>
												   )
									   >
					>
					<psub out_pseq (<simp_cntxt class front_rnd>)
						  left_environ <ptemp pseq (<simp_cntxt class front_rnd_v>
													<opt_seq min 0 max 99 seq (<simp_cntxt class C>
																			   <simp_cntxt class high_front_v>)
													>
													<opt_seq min 1 max 1 seq (<simp_cntxt class C>)>
												   )
									   >
					>
					<psub out_pseq (<simp_cntxt class back_unrnd>)
						  left_environ <ptemp pseq (<simp_cntxt class back_rnd_v>
													<opt_seq min 0 max 99 seq (<simp_cntxt class C>
																			   <simp_cntxt class high_front_v>)
													>
													<opt_seq min 1 max 1 seq (<simp_cntxt class C>)>
												   )
									   >
					>
					<psub out_pseq (<simp_cntxt class front_unrnd>)
						  left_environ <ptemp pseq (<simp_cntxt class front_unrnd_v>
													 <opt_seq min 0 max 99 seq (<simp_cntxt class C>
																				<simp_cntxt class high_front_v>)
													 >
													 <opt_seq min 1 max 1 seq (<simp_cntxt class C>)>
												   )
									   >
					>
				   )
  >
)
;Morph; should have two analyses:
(morph_and_lookup_word pretty_print bububu)

;Now we load a rule for which we can't build a simple rule for anal (because
; it relies on differing word bdry conditions):
; {p t k} -> {ph th kh} /#_
;   -> {p t k} / _#
(load_morpher_rule message
  <prule  nm disrule1
		  str (allophonic)
		  in_pseq (<simp_cntxt class stop>)
		  subrules (<psub out_pseq (<simp_cntxt class asp>)
						  left_environ <ptemp init true pseq ()>
					>
					<psub out_pseq (<simp_cntxt class unasp>)
						  right_environ <ptemp fin true pseq ()>
					>
				   )
  >
)
;Morph; unambiguous:
(morph_and_lookup_word pretty_print pHip)

;Now we load a rule whose features on the LHS and RHS are not disjoint
; p -> b / V__
;   -> ph / #__
(load_morpher_rule message
  <prule  nm disrule1
		  str (allophonic)
		  in_pseq (<simp_cntxt class p>)
		  subrules (<psub out_pseq (<simp_cntxt class vd>)
						  left_environ <ptemp pseq (<simp_cntxt class V>)>
					>
					<psub out_pseq (<simp_cntxt class asp>)
						  right_environ <ptemp init true pseq ()>
					>
				   )
  >
)
(trace_morpher_rule message (true true disrule1))
;Ambiguity 2x (because there's a "bubu" in the lexicon, as well as a "bupu"):
(morph_and_lookup_word pretty_print bubu)

;Now test a rule that applies left-to-right, and where the second clause
; applies to a seg to the left of a seg that the first clause applies to.
; (Want to ensure that both clauses apply to their individual segs, and
; that one doesn't pre-empt the other.)
; [C -vd] --> [+asp] / [C -vd] __
;       [-asp] /
(load_morpher_rule message
  <prule  nm disrule1
		  str (allophonic)
		  in_pseq (<simp_cntxt class voiceless_stop>)
		  subrules (<psub out_pseq (<simp_cntxt class asp>)
						  left_environ <ptemp pseq (<simp_cntxt class voiceless_stop>)>
					>
					<psub out_pseq (<simp_cntxt class unasp>)
					>
				   )
  >
)
(morph_and_lookup_word pretty_print ktHb)

(morpher_set message (*quit_on_error* true))

;Now remove rule1:
(remove_morpher_rule message disrule1)
;...and the natural classes:
(remove_nat_class message stop)
(remove_nat_class message asp)
(remove_nat_class message unasp)
(remove_nat_class message high_v)
(remove_nat_class message high_front_v)
(remove_nat_class message back_rnd)
(remove_nat_class message back_unrnd)
(remove_nat_class message front_rnd)
(remove_nat_class message front_unrnd)
(remove_nat_class message back_rnd_v)
(remove_nat_class message back_unrnd_v)
(remove_nat_class message front_rnd_v)
(remove_nat_class message front_unrnd_v)
(remove_nat_class message C)
(remove_nat_class message V)
(remove_nat_class message vd)
(remove_nat_class message p)
(remove_nat_class message voiceless_stop)
