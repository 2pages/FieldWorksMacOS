(message (
 <hc6508 fname C:\DATA\HC\MORPHER\TESTS\FINNISH\FINNISH.IN > ) )
;$Id: finnish.in 1.17 1998/04/14 11:31:39 Mike_Maxwell Exp $
;Modified from FINNISH.RUL for HC
; Consonant Gradation in Finnish
; The following data and analysis are taken from Dalrymple et al.
; 1987:42ff including this proviso: "These rules abstract away from
; reality in that the alternation is here controlled solely by the
; phonological environment" (p. 42).
; ¤ = velar nasal
; I'm assuming /j/ is an alveopalatal affricate
(message (
 <hc6510 lname Finnish > ) )
(message (
 <hc6502 var_name '*pfeatures*' > ) )
;Ff from Hyman "Phonology: Theory and Analysis", Holt, Rinehart and Winston, pg. 241-244
;bilabial =     [-back -high -low +ant -cor]
;labiodental =  same
;alveolar =     [-back -high -low +ant +cor]
;alveopalatal = [-back +high -low -ant +cor]
;velar =        [+back +high -low -ant -cor]
;glottal =      [-back -high +low -ant -cor]
(message (
 <hc6501 table_name table1 > ) )
;Now set the strata (just one):
(message (
 <hc6502 var_name '*strata*' > ) )
;...and set their ctables (msg 6550):
(message (
 <hc6550 sname morphophonemic ctable_name table1 > ) )
(message (
 <hc6550 sname '*surface*' ctable_name table1 > ) )
;...and the cyclicity of the morphophonemic stratum (msg 6552):
(message (
 <hc6552 sname morphophonemic > ) )
;...and the order of the prules and mrules:
(message (
 <hc6555 sname morphophonemic > ) )
(message (
 <hc6556 sname morphophonemic > ) )
(message (
 <hc6515 n 16 fname c:\data\hc\morpher\tests\finnish\finnish.dic > ) )
;Load the natural classes:
;probably some of the ff "natural" classes could be simplified, particularly those having to do with sonorants
(message (
 <hc6541 nat_class_name cons > ) )
(message (
 <hc6541 nat_class_name vowel > ) )
(message (
 <hc6541 nat_class_name syll_onset > ) )
(message (
 <hc6541 nat_class_name syll_nuc > ) )
(message (
 <hc6541 nat_class_name syll_coda > ) )
(message (
 <hc6541 nat_class_name voiced > ) )
(message (
 <hc6541 nat_class_name vl_stop > ) )
(message (
 <hc6541 nat_class_name nasal > ) )
(message (
 <hc6541 nat_class_name nasal_son > ) )
(message (
 <hc6541 nat_class_name nonnasal_son > ) )
(message (
 <hc6541 nat_class_name nonnasal_son_c > ) )
(message (
 <hc6541 nat_class_name vd_son > ) )
(message (
 <hc6541 nat_class_name son_cons > ) )
(message (
 <hc6541 nat_class_name vd_strident > ) )
(message (
 <hc6541 nat_class_name bilabial > ) )
(message (
 <hc6541 nat_class_name p > ) )
(message (
 <hc6541 nat_class_name t > ) )
(message (
 <hc6541 nat_class_name k > ) )
(message (
 <hc6541 nat_class_name j > ) )
(message (
 <hc6541 nat_class_name h > ) )
(message (
 <hc6541 nat_class_name ny > ) )
(message (
 <hc6541 nat_class_name u > ) )
(message (
 <hc6541 nat_class_name e > ) )
; Consonant Gradation is here broken into three disjunctive rules for p, t and k, since the exact
; correspondences are different for the three underlying Cs.  (Gradation of geminates is handled by
; a separate rule, see end.)
;The ff are the general rules in PC-KIMMO's format:
;RULE "3 Consonant Gradation Correspondences"
;Doesn't correspond to anything in HC
;RULE "4 Consonant gradation, P:B <= [V|LIQ]__VC[C|#]" 6 10
;RULE "5 Consonant gradation, P:B => [V|LIQ]__VC[C|#]" 6 10
; LR: papun  sotan  sikan
; SR: pavun  sodan  si0an
; Nasal Gradation
; LR: kumpun  rantan  va¤kin
; SR: kummun  rannan  va¤¤in
;RULE "8 Nasal Gradation Correspondencs"
; Doesn't correspond to anything in HC
;RULE "9 Gradation after nasals, P:NAS <= NAS__VC[C|#]"  5 7
;RULE "10 Gradation after nasals, P:NAS => NAS__VC[C|#]"  6 6
;These are not repeated below for each HC rule,
; rather only the alternations specific to each of the three underlying Cs are given below.
;Syllabification.  We assume syllable struc is CV(C).
(message (
 <hc6505 rname v_syllabification > ) )
(message (
 <hc6505 rname c_syllabification > ) )
; Gradation of k between u's
; LR: pukun
; SR: puvun
;RULE "11 Gradation of k between u's, k:v <= u__uC[C|#]"
;RULE "12 Gradation of k between u's, k:v => u__uC[C|#]"
;We handle this by first changing k --> p in the above environ, and then let the p --> v rule
; handle the rest.
(message (
 <hc6505 rname kp > ) )
; p --> m / [+nasal] __ VC$
;       v / [+son -nas] __ VC$
;Also handles k-->v in conjunction with rule kp (above)
(message (
 <hc6505 rname p > ) )
; t  ***********
;Additional processes for just /t/:
; Gradation of t after liquids
; LR: iltan
; SR: illan
;RULE "15  Gradation of t after liquids, t:{l,r} <= {l,r}__VC[C|#]"  5 9
;RULE "16 Gradation of t after liquids, t:{l,r} => {l,r}__VC[C|#]"  8 8
; Gradation of t after h
; LR: iltan
; SR: illan
;RULE "17 Gradation of t after h, t:d <= h__VC[C|#]"  5 7
;RULE "18 Gradation of t after h, t:d => h__VC[C|#]"  6 6
; t --> {l r} / {l r} __ VC$     (combined with next line using alpha vars)
;       n / [+nasal] __ VC$
;       d / V __ VC$
;       d / h __ VC$
(message (
 <hc6505 rname t > ) )
; k  ***********
; re gradation of k --> v / u __ uC$, see rule kp above (we first take k --> p, then the rule for
; p --> v handles the rest)
; Gradation of k after liquids
; LR: kurken
; SR: kurjen
;RULE "13 Gradation of k after liquids, k:j <= LIQ__eC[C|#]"
;RULE "14 Gradation of k after liquids, k:j => LIQ__eC[C|#]"
; k --> j / [+cons +sonorant -nasal] __ eC$  (bleeds k --> 0 / [+voc]__VC$)
;        ¤ / [+nasal] __ VC$
;        0 / [+sonorant -nasal] __ VC$ (V can't be /e/, hence disjunction with k-->j rule; [-nasal]
;                                       reqm't can also be handled by disjunction)
;       v / u __ uC$     (handled earlier, see above note)
(message (
 <hc6505 rname k > ) )
;Degemination.  Since all the degemination rules work the same, we have a separate rule for them.
; Geminate Gradation (counterfeeds the other gradation rules)
; LR: lappun  katton  tikkan
; SR: lap0un  kat0on  tik0an
;RULE "6 Geminate Gradation, {p,t,k}:0 <= {p,t,k}__VC[C|#]"
;RULE "7 Geminate Gradation, {p,t,k}:0 => {p,t,k}__VC[C|#]"
(message (
 <hc6505 rname degemination > ) )
;Don't let errors stop us:
(message (
 <hc6502 var_name '*quit_on_error*' > ) )
;And run the tests:
(message (word_analysis
 <lex id 6 sh pavun gl bean pos 'N' str '*surface*' > ) )
(message (word_analysis
 <lex id 7 sh sodan gl war pos 'N' str '*surface*' > ) )
(message (word_analysis
 <lex id 8 sh sian gl pig pos 'N' str '*surface*' > ) )
(message (word_analysis
 <lex id 9 sh lapun gl note pos 'N' str '*surface*' > ) )
(message (word_analysis
 <lex id 10 sh katon gl roof pos 'N' str '*surface*' > ) )
(message (word_analysis
 <lex id 11 sh tikan gl woodpecker pos 'N' str '*surface*' > ) )
(message (word_analysis
 <lex id 12 sh kummun gl hill pos 'N' str '*surface*' > ) )
(message (word_analysis
 <lex id 13 sh rannan gl shore pos 'N' str '*surface*' > ) )
(message (word_analysis
 <lex id 14 sh va¤¤in gl prisoner pos 'N' str '*surface*' > ) )
(message (word_analysis
 <lex id 15 sh puvun gl dress pos 'N' str '*surface*' > ) )
(message (word_analysis
 <lex id 16 sh jalan gl foot pos 'N' str '*surface*' > ) )
(message (word_analysis
 <lex id 17 sh kurjen gl crane pos 'N' str '*surface*' > ) )
(message (word_analysis
 <lex id 18 sh syljen gl spit pos 'N' str '*surface*' > ) )
(message (word_analysis
 <lex id 19 sh illan gl evening pos 'N' str '*surface*' > ) )
(message (word_analysis
 <lex id 20 sh parran gl beard pos 'N' str '*surface*' > ) )
(message (word_analysis
 <lex id 21 sh lehden gl leaf pos 'N' str '*surface*' > ) )
((
 <hc6511 lname Finnish cur_lname *unknown* > ) )
(message (
 <hc6521 fname C:\DATA\HC\MORPHER\TESTS\FINNISH\FINNISH.IN > ) )
(message (
 <hc6508 fname stdin > ) )
(message (
 <hc6522 fname standard out > ) )
