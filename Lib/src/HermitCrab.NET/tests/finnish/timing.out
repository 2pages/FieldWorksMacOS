()
(message (
 <m6508 fname 'C:\DATA\HC\MORPHER\TESTS\FINNISH\FINNISH.IN' > ) )
;$Id: finnish.in 1.10 1995/05/12 16:06:04 Mike_Maxwell Exp $
;Modified from FINNISH.RUL for HC
; Consonant Gradation in Finnish
; The following data and analysis are taken from Dalrymple et al.
; 1987:42ff including this proviso: "These rules abstract away from
; reality in that the alternation is here controlled solely by the
; phonological environment" (p. 42).
; ¤ = velar nasal
; I'm assuming /j/ is an alveopalatal affricate
(message (
 <m6502 var_name '*pfeatures*' > ) )
;Ff from Hyman "Phonology: Theory and Analysis", Holt, Rinehart and Winston, pg. 241-244
;bilabial =     [-back -high -low +ant -cor]
;labiodental =  same
;alveolar =     [-back -high -low +ant +cor]
;alveopalatal = [-back +high -low -ant +cor]
;velar =        [+back +high -low -ant -cor]
;glottal =      [-back -high +low -ant -cor]
(message (
 <m6501 table_name table1 > ) )
;Now set the strata (just one):
(message (
 <m6502 var_name '*strata*' > ) )
;...and set their ctables (msg 6550):
(message (
 <m6550 sname morphophonemic ctable_name table1 > ) )
(message (
 <m6550 sname '*surface*' ctable_name table1 > ) )
;...and the cyclicity of the morphophonemic stratum (msg 6552):
(message (
 <m6552 sname morphophonemic > ) )
;...and the order of the prules and mrules:
(message (
 <m6555 sname morphophonemic > ) )
(message (
 <m6556 sname morphophonemic > ) )
(message (
 <m6515 n 16 fname "c:\data\hc\morpher\tests\finnish\finnish.dic" >
 <m6700  > ) )
;Load the natural classes:
;probably some of the ff "natural" classes could be simplified, particularly those having to do with sonorants
(message (
 <m6541 nat_class_name cons > ) )
(message (
 <m6541 nat_class_name vowel > ) )
(message (
 <m6541 nat_class_name syll_onset > ) )
(message (
 <m6541 nat_class_name syll_nuc > ) )
(message (
 <m6541 nat_class_name syll_coda > ) )
(message (
 <m6540 nat_class_name syll_nuc > ) )
(message (
 <m6541 nat_class_name voiced > ) )
(message (
 <m6541 nat_class_name vl_stop > ) )
(message (
 <m6541 nat_class_name nasal > ) )
(message (
 <m6541 nat_class_name nasal_son > ) )
(message (
 <m6541 nat_class_name nonnasal_son > ) )
(message (
 <m6541 nat_class_name nonnasal_son_c > ) )
(message (
 <m6541 nat_class_name vd_son > ) )
(message (
 <m6541 nat_class_name son_cons > ) )
(message (
 <m6541 nat_class_name vd_strident > ) )
(message (
 <m6541 nat_class_name bilabial > ) )
(message (
 <m6541 nat_class_name p > ) )
(message (
 <m6541 nat_class_name t > ) )
(message (
 <m6541 nat_class_name k > ) )
(message (
 <m6541 nat_class_name j > ) )
(message (
 <m6541 nat_class_name h > ) )
(message (
 <m6541 nat_class_name ny > ) )
(message (
 <m6541 nat_class_name u > ) )
(message (
 <m6541 nat_class_name e > ) )
; Consonant Gradation is here broken into three disjunctive rules for p, t and k, since the exact
; correspondences are different for the three underlying Cs.  (Gradation of geminates is handled by
; a separate rule, see end.)
;The ff are the general rules in PC-KIMMO's format:
;RULE "3 Consonant Gradation Correspondences"
;Doesn't correspond to anything in HC
;RULE "4 Consonant gradation, P:B <= [V|LIQ]__VC[C|#]" 6 10
;RULE "5 Consonant gradation, P:B => [V|LIQ]__VC[C|#]" 6 10
; LR: papun  sotan  sikan
; SR: pavun  sodan  si0an
; Nasal Gradation
; LR: kumpun  rantan  va¤kin
; SR: kummun  rannan  va¤¤in
;RULE "8 Nasal Gradation Correspondencs"
; Doesn't correspond to anything in HC
;RULE "9 Gradation after nasals, P:NAS <= NAS__VC[C|#]"  5 7
;RULE "10 Gradation after nasals, P:NAS => NAS__VC[C|#]"  6 6
;These are not repeated below for each HC rule,
; rather only the alternations specific to each of the three underlying Cs are given below.
;Syllabification.  We assume syllable struc is CV(C).
(message (
 <m6505 rname v_syllabification > ) )
(message (
 <m6505 rname c_syllabification > ) )
; Gradation of k between u's
; LR: pukun
; SR: puvun
;RULE "11 Gradation of k between u's, k:v <= u__uC[C|#]"
;RULE "12 Gradation of k between u's, k:v => u__uC[C|#]"
;We handle this by first changing k --> p in the above environ, and then let the p --> v rule
; handle the rest.
(message (
 <m6505 rname kp > ) )
; p --> m / [+nasal] __ VC$
;       v / [+son -nas] __ VC$
;Also handles k-->v in conjunction with rule kp (above)
(message (
 <m6505 rname p > ) )
; t  ***********
;Additional processes for just /t/:
; Gradation of t after liquids
; LR: iltan
; SR: illan
;RULE "15  Gradation of t after liquids, t:{l,r} <= {l,r}__VC[C|#]"  5 9
;RULE "16 Gradation of t after liquids, t:{l,r} => {l,r}__VC[C|#]"  8 8
; Gradation of t after h
; LR: iltan
; SR: illan
;RULE "17 Gradation of t after h, t:d <= h__VC[C|#]"  5 7
;RULE "18 Gradation of t after h, t:d => h__VC[C|#]"  6 6
; t --> {l r} / {l r} __ VC$     (combined with next line using alpha vars)
;       n / [+nasal] __ VC$
;       d / V __ VC$
;       d / h __ VC$
(message (
 <m6505 rname t > ) )
; k  ***********
; re gradation of k --> v / u __ uC$, see rule kp above (we first take k --> p, then the rule for
; p --> v handles the rest)
; Gradation of k after liquids
; LR: kurken
; SR: kurjen
;RULE "13 Gradation of k after liquids, k:j <= LIQ__eC[C|#]"
;RULE "14 Gradation of k after liquids, k:j => LIQ__eC[C|#]"
; k --> j / [+cons +sonorant -nasal] __ eC$  (bleeds k --> 0 / [+voc]__VC$)
;				¤ / [+nasal] __ VC$
;				0 / [+sonorant -nasal] __ VC$ (V can't be /e/, hence disjunction with k-->j rule; [-nasal]
;																			 reqm't can also be handled by disjunction)
;       v / u __ uC$     (handled earlier, see above note)
(message (
 <m6505 rname k > ) )
;Degemination.  Since all the degemination rules work the same, we have a separate rule for them.
; Geminate Gradation (counterfeeds the other gradation rules)
; LR: lappun  katton  tikkan
; SR: lap0un  kat0on  tik0an
;RULE "6 Geminate Gradation, {p,t,k}:0 <= {p,t,k}__VC[C|#]"
;RULE "7 Geminate Gradation, {p,t,k}:0 => {p,t,k}__VC[C|#]"
(message (
 <m6505 rname degemination > ) )
;Don't let errors stop us:
(message (
 <m6502 var_name '*quit_on_error*' > ) )
;And run the tests:
Timer: get_applic_prules: 0.002
Timer: unapply_prules: 0.024
Timer: lookup_pshape: 0.022
Timer: generate_derivation: 0.052
Timer: test_derivation: 0.019
Timer: generate_and_test: 0.109
Timer: morph_and_lookup_word: 0.118
(message (word_analysis
 <lex_entry lex_id "f! 128" shape "pavun" family '*null*' gloss "bean" morphing "bean" pos 'N' subcat ( ) mrules ( ) stratum '*surface*' mp_rule_features ( ) h_features ( ) oblig_features ( ) pseudo false > ) )
Timer: get_applic_prules: 0.002
Timer: unapply_prules: 0.013
Timer: lookup_pshape: 0.021
Timer: generate_derivation: 0.041
Timer: test_derivation: 0.017
Timer: generate_and_test: 0.063
Timer: morph_and_lookup_word: 0.074
(message (word_analysis
 <lex_entry lex_id "f! 299" shape "sodan" family '*null*' gloss "war" morphing "war" pos 'N' subcat ( ) mrules ( ) stratum '*surface*' mp_rule_features ( ) h_features ( ) oblig_features ( ) pseudo false > ) )
Timer: get_applic_prules: 0.003
Timer: unapply_prules: 0.015
Timer: lookup_pshape: 0.055
Timer: generate_derivation: 0.073
Timer: test_derivation: 0.019
Timer: generate_and_test: 0.097
Timer: morph_and_lookup_word: 0.107
(message (word_analysis
 <lex_entry lex_id "f! 464" shape "sian" family '*null*' gloss "pig" morphing "pig" pos 'N' subcat ( ) mrules ( ) stratum '*surface*' mp_rule_features ( ) h_features ( ) oblig_features ( ) pseudo false > ) )
Timer: get_applic_prules: 0.002
Timer: unapply_prules: 0.029
Timer: lookup_pshape: 0.026
Timer: generate_derivation: 0.062
Timer: test_derivation: 0.051
Timer: generate_and_test: 0.118
Timer: morph_and_lookup_word: 0.128
(message (word_analysis
 <lex_entry lex_id "f! 548" shape "lapun" family '*null*' gloss "note" morphing "note" pos 'N' subcat ( ) mrules ( ) stratum '*surface*' mp_rule_features ( ) h_features ( ) oblig_features ( ) pseudo false > ) )
Timer: get_applic_prules: 0.003
Timer: unapply_prules: 0.026
Timer: lookup_pshape: 0.028
Timer: generate_derivation: 0.059
Timer: test_derivation: 0.027
Timer: generate_and_test: 0.092
Timer: morph_and_lookup_word: 0.103
(message (word_analysis
 <lex_entry lex_id "f! 635" shape "katon" family '*null*' gloss "roof" morphing "roof" pos 'N' subcat ( ) mrules ( ) stratum '*surface*' mp_rule_features ( ) h_features ( ) oblig_features ( ) pseudo false > ) )
Timer: get_applic_prules: 0.003
Timer: unapply_prules: 0.027
Timer: lookup_pshape: 0.023
Timer: generate_derivation: 0.055
Timer: test_derivation: 0.030
Timer: generate_and_test: 0.090
Timer: morph_and_lookup_word: 0.101
(message (word_analysis
 <lex_entry lex_id "f! 722" shape "tikan" family '*null*' gloss "woodpecker" morphing "woodpecker" pos 'N' subcat ( ) mrules ( ) stratum '*surface*' mp_rule_features ( ) h_features ( ) oblig_features ( ) pseudo false > ) )
Timer: get_applic_prules: 0.002
Timer: unapply_prules: 0.025
Timer: lookup_pshape: 0.028
Timer: generate_derivation: 0.057
Timer: test_derivation: 0.050
Timer: generate_and_test: 0.113
Timer: morph_and_lookup_word: 0.123
(message (word_analysis
 <lex_entry lex_id "f! 821" shape "kummun" family '*null*' gloss "hill" morphing "hill" pos 'N' subcat ( ) mrules ( ) stratum '*surface*' mp_rule_features ( ) h_features ( ) oblig_features ( ) pseudo false > ) )
Timer: get_applic_prules: 0.001
Timer: unapply_prules: 0.022
Timer: lookup_pshape: 0.023
Timer: generate_derivation: 0.052
Timer: test_derivation: 0.019
Timer: generate_and_test: 0.077
Timer: morph_and_lookup_word: 0.086
(message (word_analysis
 <lex_entry lex_id "f! 908" shape "rannan" family '*null*' gloss "shore" morphing "shore" pos 'N' subcat ( ) mrules ( ) stratum '*surface*' mp_rule_features ( ) h_features ( ) oblig_features ( ) pseudo false > ) )
Timer: get_applic_prules: 0.002
Timer: unapply_prules: 0.018
Timer: lookup_pshape: 0.021
Timer: generate_derivation: 0.045
Timer: test_derivation: 0.019
Timer: generate_and_test: 0.070
Timer: morph_and_lookup_word: 0.080
(message (word_analysis
 <lex_entry lex_id "f! 997" shape "va¤¤in" family '*null*' gloss "prisoner" morphing "prisoner" pos 'N' subcat ( ) mrules ( ) stratum '*surface*' mp_rule_features ( ) h_features ( ) oblig_features ( ) pseudo false > ) )
Timer: get_applic_prules: 0.002
Timer: unapply_prules: 0.024
Timer: lookup_pshape: 0.023
Timer: generate_derivation: 0.051
Timer: test_derivation: 0.047
Timer: generate_and_test: 0.105
Timer: morph_and_lookup_word: 0.115
(message (word_analysis
 <lex_entry lex_id "f! 1092" shape "puvun" family '*null*' gloss "dress" morphing "dress" pos 'N' subcat ( ) mrules ( ) stratum '*surface*' mp_rule_features ( ) h_features ( ) oblig_features ( ) pseudo false > ) )
Timer: get_applic_prules: 0.001
Timer: unapply_prules: 0.018
Timer: lookup_pshape: 0.029
Timer: generate_derivation: 0.052
Timer: test_derivation: 0.020
Timer: generate_and_test: 0.077
Timer: morph_and_lookup_word: 0.087
(message (word_analysis
 <lex_entry lex_id "f! 1181" shape "jalan" family '*null*' gloss "foot" morphing "foot" pos 'N' subcat ( ) mrules ( ) stratum '*surface*' mp_rule_features ( ) h_features ( ) oblig_features ( ) pseudo false > ) )
Timer: get_applic_prules: 0.002
Timer: unapply_prules: 0.026
Timer: lookup_pshape: 0.023
Timer: generate_derivation: 0.053
Timer: test_derivation: 0.022
Timer: generate_and_test: 0.087
Timer: morph_and_lookup_word: 0.098
(message (word_analysis
 <lex_entry lex_id "f! 1268" shape "kurjen" family '*null*' gloss "crane" morphing "crane" pos 'N' subcat ( ) mrules ( ) stratum '*surface*' mp_rule_features ( ) h_features ( ) oblig_features ( ) pseudo false > ) )
Timer: get_applic_prules: 0.003
Timer: unapply_prules: 0.017
Timer: lookup_pshape: 0.021
Timer: generate_derivation: 0.044
Timer: test_derivation: 0.046
Timer: generate_and_test: 0.097
Timer: morph_and_lookup_word: 0.107
(message (word_analysis
 <lex_entry lex_id "f! 1357" shape "syljen" family '*null*' gloss "spit" morphing "spit" pos 'N' subcat ( ) mrules ( ) stratum '*surface*' mp_rule_features ( ) h_features ( ) oblig_features ( ) pseudo false > ) )
Timer: get_applic_prules: 0.002
Timer: unapply_prules: 0.018
Timer: lookup_pshape: 0.028
Timer: generate_derivation: 0.051
Timer: test_derivation: 0.019
Timer: generate_and_test: 0.074
Timer: morph_and_lookup_word: 0.084
(message (word_analysis
 <lex_entry lex_id "f! 1444" shape "illan" family '*null*' gloss "evening" morphing "evening" pos 'N' subcat ( ) mrules ( ) stratum '*surface*' mp_rule_features ( ) h_features ( ) oblig_features ( ) pseudo false > ) )
Timer: get_applic_prules: 0.003
Timer: unapply_prules: 0.030
Timer: lookup_pshape: 0.021
Timer: generate_derivation: 0.055
Timer: test_derivation: 0.022
Timer: generate_and_test: 0.085
Timer: morph_and_lookup_word: 0.096
(message (word_analysis
 <lex_entry lex_id "f! 1537" shape "parran" family '*null*' gloss "beard" morphing "beard" pos 'N' subcat ( ) mrules ( ) stratum '*surface*' mp_rule_features ( ) h_features ( ) oblig_features ( ) pseudo false > ) )
Timer: get_applic_prules: 0.003
Timer: unapply_prules: 0.020
Timer: lookup_pshape: 0.028
Timer: generate_derivation: 0.053
Timer: test_derivation: 0.044
Timer: generate_and_test: 0.104
Timer: morph_and_lookup_word: 0.115
(message (word_analysis
 <lex_entry lex_id "f! 1626" shape "lehden" family '*null*' gloss "leaf" morphing "leaf" pos 'N' subcat ( ) mrules ( ) stratum '*surface*' mp_rule_features ( ) h_features ( ) oblig_features ( ) pseudo false > ) )
((
 <m6521 fname 'C:\DATA\HC\MORPHER\TESTS\FINNISH\FINNISH.IN' > ) )
