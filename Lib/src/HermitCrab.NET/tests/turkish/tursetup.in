;$Id: tursetup.in 1.25 1998/04/14 11:28:29 Mike_Maxwell Exp $
;File of Turkish data (modelled after TURKISH.RUL in PCKIMMO's files)
;Loads pfeatures def, char def tables, and rules, but NOT dictionary

(open_language message Turkish)

(morpher_set message
  (*pfeatures*
	(syll     (+ -)
	 cons     (+ -)
	 son      (+ -)
	 high     (+ -)
	 low      (+ -)
	 back     (+ -)
	 round    (+ -)
	 long     (+ -)
	 vd       (+ -)
	 nasal    (+ -)
	 lateral  (+ -)
	 cont     (+ -)
	 strident (+ -)
	 del_rel  (+ -)
	 ant      (+ -)
	 cor      (+ -)
	 var_voice (+ -)
	)
  )
)

;Ff from Hyman "Phonology: Theory and Analysis", Holt, Rinehart and Winston, pg. 241-244
;bilabial =     [-back -high -low +ant -cor]
;alveolar =     [-back -high -low +ant +cor]
;alveopalatal = [-back +high -low -ant +cor]
;velar =        [+back +high -low -ant -cor]



;Table1 has surface segments, table2 has these + archiphonemes + boundary markers
;Also assume "n" is alveolar, although perhaps it's velar before "k".
;The palatalized "L" is treated as alveopalatal, the "h" as a velar fricative, and the "w" as bilabial.
;In place of PC-KIMMO's use of diacritically marked long vowels, we use a VV notation; in place of the
; "dummy" vowels that delete after conditioning harmony, we use ordinary vowels that assimilate to an
; immediately preceding vowel after conditioning harmony.

(load_char_def_table message
  <char_table
  name table1
  encoding Turkish
  seg_defs
	(
	  (p   (cons + syll - son - ant + cor - back - high - low - vd - cont - lateral - nasal - strident -))
	  (t   (cons + syll - son - ant + cor + back - high - low - vd - cont - lateral - nasal - strident - del_rel -))
	  (c   (cons + syll - son - ant - cor + back - high + low - vd - cont - lateral - nasal - strident + del_rel +))
	  (k   (cons + syll - son - ant - cor - back + high + low - vd - cont - lateral - nasal - strident -))
	  (b   (cons + syll - son - ant + cor - back - high - low - vd + cont - lateral - nasal - strident -))
	  (d   (cons + syll - son - ant + cor + back - high - low - vd + cont - lateral - nasal - strident - del_rel -))
	  (j   (cons + syll - son - ant - cor + back - high + low - vd + cont - lateral - nasal - strident + del_rel +))
	  (g   (cons + syll - son - ant - cor - back + high + low - vd + cont - lateral - nasal - strident -))
	  (f   (cons + syll - son - ant + cor - back - high - low - vd - cont + lateral - nasal - strident -))
	  (v   (cons + syll - son - ant + cor - back - high - low - vd + cont + lateral - nasal - strident -))
	  (s   (cons + syll - son - ant + cor + back - high - low - vd - cont + lateral - nasal - strident + del_rel -))
	  (z   (cons + syll - son - ant + cor + back - high - low - vd + cont + lateral - nasal - strident + del_rel -))
	  (sh   (cons + syll - son - ant - cor + back - high + low - vd - cont + lateral - nasal - strident + del_rel -))
	  (h   (cons + syll - son - ant - cor - back + high + low - vd - cont + lateral - nasal - strident -))
	  (m   (cons + syll - son + ant + cor - back - high - low - vd + cont - lateral - nasal + strident -))
	  (n   (cons + syll - son + ant + cor + back - high - low - vd + cont - lateral - nasal + strident -))
	  (l   (cons + syll - son + ant + cor + back - high - low - vd + cont + lateral + nasal - strident -))
	  (L   (cons + syll - son + ant - cor + back - high + low - vd + cont + lateral + nasal - strident -))
	  (r   (cons + syll - son + ant + cor + back - high - low - vd + cont + lateral - nasal - strident -))
	  (w   (cons - syll - son + ant + cor - back - high - low - vd + cont + lateral - nasal - strident -))
	  (y   (cons - syll - son + ant - cor + back - high + low - vd + cont + lateral - nasal - strident -))
	  (a   (cons - syll + high - low + back + round - long - vd +))
	  (e   (cons - syll + high - low - back - round - long - vd +))
	  (i   (cons - syll + high + low - back - round - long - vd +))
	  (o   (cons - syll + high - low - back + round + long - vd +))
	  (u   (cons - syll + high + low - back + round + long - vd +))
	  (ï   (cons - syll + high + low - back + round - long - vd +))
	  (ö   (cons - syll + high - low - back - round + long - vd +))
	  (ü   (cons - syll + high + low - back - round + long - vd +))
	)
  >
)
;Note that we use the diacritic feature [+var_voice] to distinguish /D/ from /d/ and /t/
(load_char_def_table message
  <char_table
  name table2
  encoding Turkish
  seg_defs
	(
	  (p   (cons + syll - son - ant + cor - back - high - low - vd -  cont - lateral - nasal - strident -))
	  (t   (cons + syll - son - ant + cor + back - high - low - vd -  cont - lateral - nasal - strident - del_rel -))
	  (c   (cons + syll - son - ant - cor + back - high + low - vd -  cont - lateral - nasal - strident + del_rel +))
	  (k   (cons + syll - son - ant - cor - back + high + low - vd -  cont - lateral - nasal - strident -))
	  (b   (cons + syll - son - ant + cor - back - high - low - vd +  cont - lateral - nasal - strident -))
	  (d   (cons + syll - son - ant + cor + back - high - low - vd +  cont - lateral - nasal - strident - del_rel -))
	  (D   (cons + syll - son - ant + cor + back - high - low -       cont - lateral - nasal - strident - del_rel - var_voice +))
	  (j   (cons + syll - son - ant - cor + back - high + low - vd +  cont - lateral - nasal - strident + del_rel +))
	  (g   (cons + syll - son - ant - cor - back + high + low - vd +  cont - lateral - nasal - strident -))
	  (f   (cons + syll - son - ant + cor - back - high - low - vd -  cont + lateral - nasal - strident -))
	  (v   (cons + syll - son - ant + cor - back - high - low - vd +  cont + lateral - nasal - strident -))
	  (s   (cons + syll - son - ant + cor + back - high - low - vd -  cont + lateral - nasal - strident + del_rel -))
	  (z   (cons + syll - son - ant + cor + back - high - low - vd +  cont + lateral - nasal - strident + del_rel -))
	  (sh   (cons + syll - son - ant - cor + back - high + low - vd - cont + lateral - nasal - strident + del_rel -))
	  (h   (cons + syll - son - ant - cor - back + high + low - vd -  cont + lateral - nasal - strident -))
	  (m   (cons + syll - son + ant + cor - back - high - low - vd +  cont - lateral - nasal + strident -))
	  (n   (cons + syll - son + ant + cor + back - high - low - vd +  cont - lateral - nasal + strident -))
	  (l   (cons + syll - son + ant + cor + back - high - low - vd +  cont + lateral + nasal - strident -))
	  (L   (cons + syll - son + ant - cor + back - high + low - vd +  cont + lateral + nasal - strident -))
	  (r   (cons + syll - son + ant + cor + back - high - low - vd +  cont + lateral - nasal - strident -))
	  (w   (cons - syll - son + ant + cor - back - high - low - vd +  cont + lateral - nasal - strident -))
	  (y   (cons - syll - son + ant - cor + back - high + low - vd +  cont + lateral - nasal - strident -))
	  (a   (cons - syll + high - low + back + round - long - vd +))
	  (e   (cons - syll + high - low - back - round - long - vd +))
	  (i   (cons - syll + high + low - back - round - long - vd +))
	  (o   (cons - syll + high - low - back + round + long - vd +))
	  (u   (cons - syll + high + low - back + round + long - vd +))
	  (ï   (cons - syll + high + low - back + round - long - vd +))
	  (ö   (cons - syll + high - low - back - round + long - vd +))
	  (ü   (cons - syll + high + low - back - round + long - vd +))
	  (A   (cons - syll + high -              round - long - vd +))
	  (H   (cons - syll + high +                      long - vd +))
	)
	bdry_defs (+)
  >
)



;Now set the strata (just one):
(morpher_set message
  (*strata* (morphophonemic)))
;...and set their ctables (msg 6550):
(set_stratum message <stratum_setting nm morphophonemic type ctable value table2>)
(set_stratum message <stratum_setting nm *surface* type ctable value table1>)
;...and the cyclicity of the morphophonemic stratum (msg 6552):
(set_stratum message <stratum_setting nm morphophonemic type cyclicity value noncyclic>)
;...and the order of the prules and mrules:
(set_stratum message <stratum_setting nm morphophonemic type prule value linear>)
(set_stratum message <stratum_setting nm morphophonemic type mrule value linear>)


;Load the natural classes:
(load_nat_class message <nat_class name null            features ()>)
(load_nat_class message <nat_class name cons            features (cons + syll -)>)
(load_nat_class message <nat_class name vowel           features (cons - syll +)>)
(load_nat_class message <nat_class name nonvowel        features (syll -)>)
(load_nat_class message <nat_class name lateral         features (lateral +)>)
(load_nat_class message <nat_class name obstruent       features (cont - nasal -)>)
(load_nat_class message <nat_class name voiced          features (vd +)>)
(load_nat_class message <nat_class name voiceless       features (vd -)>)
(load_nat_class message <nat_class name nonvoiced_obstr features (cont - vd -)>)
(load_nat_class message <nat_class name palatalized     features (ant - high +)>)
(load_nat_class message <nat_class name back_v          features (syll + back -)>)
(load_nat_class message <nat_class name high_v          features (syll + high +)>)
(load_nat_class message <nat_class name sy              features (syll - cor + cont + nasal - lateral -)>)
(load_nat_class message <nat_class name k               features (cons + syll - back + vd - cont -)>)
(load_nat_class message <nat_class name D               features (cons + syll - cor + ant + strident - var_voice +)>)
(load_nat_class message <nat_class name e               features (syll + back - high - round -)>)




;Load the rules
;RULE 1 "Consonant defaults" and RULE 2 "Vowel defaults" are not needed


;RULE "Palatalization, l:L <= V[-bk]:___" 2 4
;The KIMMO palatalization rule is based on underlying vowel quality, hence the HC version is ordered before
; the vowel harmony rule (cf. palatalization2, ordered after vowel harmony)
(load_morpher_rule message
  <prule  nm palatalization1
		  str (morphophonemic)
		  in_pseq (<simp_cntxt class lateral>)
		  subrules (<psub out_pseq (<simp_cntxt class palatalized>)
						  left_environ <ptemp pseq (<simp_cntxt class back_v>)>
					>
				   )
  >
)

;Vowel harmony rules
;Using disjunctive alpha vars, we combine the ff KIMMO rules into two rules.
; KIMMO has to have two sets of rules, one for [+low] vowels (which assimilate in backness only),
; and one for [-low] (= [+high]) vowels (which assimilate in both backness and rounding.
;KIMMO's low vowel harmony:
;RULE 3 "A:a <=> V[+bk]: C* +:0 C*__"
; [V -high] --> [+low +back] / [V +back] C* + C*__
;RULE 4 "A:e <=> V[-bk]: C* (+:0) C*__"
; [V -high] --> [-low -back] / [V -back] C* + C*__
;Note that this would also change e-->a.  Presumably an [e] could appear after a +back vowel root-internal
; (thereby violating vowel harmony), but not across morpheme boundaries.
;KIMMO's high vowel harmony:
;RULE "5 H:u <=> V[+bk+rd]: C* (+:0) __"
; [V +high] --> [+back +round] / [V +back +round] C* + C* __
;We allow more Cs after the "+".  See also remarks re low_V_harmony (this will also turn e.g. i --> u across morph bdry)
;RULE "6 H:ü <=> V[-bk+rd]: C* (+:0) __"
; [V +high] --> [-back +round] / [V -back +round] C* + C* __
; (this will also turn e.g. i --> ü across morph bdry)
;RULE "7 H:i <=> [:V[-bk-rd] | V[-bk-rd]:] C* (+:0) __"
; [V +high] --> [-back -round] / [V -back -round] C* + C* __
; (this will also turn e.g. u --> i across morph bdry)
;RULE "8 H:ï <=> :V[+bk-rd] C* (+:0) __"
; [V +high] --> [+back -round] / [V +back -round] C* + C* __
; (this will also turn e.g. u --> ï across morph bdry)
; Because we work at the level of features, we have two rules: one for backness harmony (which all
; vowels undergo), and one for rounding harmony (which only [+high] vowels undergo).  Note that we
; allow [-syll] segs (the natural class nonvowel) to intervene--they need NOT be [+cons], e.g. /y/ is
; [-cons], but does not block or condition harmony.
(load_morpher_rule message
  <prule nm backness_harmony
		 str (morphophonemic) var_fs (a back)
		 in_pseq (<simp_cntxt class vowel>)
		 subrules (<psub out_pseq (<simp_cntxt class null alpha_vars (a +)>)
						 left_environ <ptemp pseq (<simp_cntxt class vowel alpha_vars (a +)>
												   <opt_seq min 0 max 2 seq (<simp_cntxt class nonvowel>)>
												   <bdry rep + ctable table2>
												   <opt_seq min 0 max 1 seq (<simp_cntxt class nonvowel>)>
												  )
									  >
				   >
				  )
  >
)
(load_morpher_rule message
  <prule nm rounding_harmony
		 str (morphophonemic) var_fs (a round)
		 in_pseq (<simp_cntxt class high_v>)
		 subrules (<psub out_pseq (<simp_cntxt class null alpha_vars (a +)>)
						 left_environ <ptemp pseq (<simp_cntxt class vowel alpha_vars (a +)>
												   <opt_seq min 0 max 2 seq (<simp_cntxt class nonvowel>)>
												   <bdry rep + ctable table2>
												   <opt_seq min 0 max 2 seq (<simp_cntxt class nonvowel>)>
												  )
									  >
				   >
				  )
  >
)


;RULE "Palatalization, l:L <= ___:e"
; [+lateral] --> [+alveopalatal] / __ e
; no instance in data of this change occurring across morpheme boundary (IAW PC-KIMMO file)
;RULE "Palatalization, l:L => [V[-bk]:___ | ___:e]"
;This rule is just the combination of the other two palatalization rules, with the => operator
;The KIMMO rule is based on surface context, hence the HC version is ordered after the vowel harmony rule
; (critically, after the a-->e rule) (cf. palatalization1)
(load_morpher_rule message
  <prule  nm palatalization2
		  str (morphophonemic)
		  in_pseq (<simp_cntxt class lateral>)
		  subrules (<psub out_pseq (<simp_cntxt class palatalized>)
						  right_environ <ptemp pseq (<simp_cntxt class e>)>
					>
				   )
  >
)



; Consonant Deletion
; LR: at+sH  at+yA
; SR: at00ï  at00a
;RULE "S:0 correspondences"
;Above PC-KIMMO rule doesn't correspond directly to anything in HC
; S = s y
;RULE "Deletion, S:0 <=> C (+:0)___"
; [-syll +cor +cont -nasal -lateral] --> 0 / [-syll] __
; As written, also applies to /z/, /sh/, and /r/.  Bleeds v-shortening.
(load_morpher_rule message
  <prule  nm sy_del
		  str (morphophonemic)
		  in_pseq (<simp_cntxt class sy>)
		  subrules (<psub out_pseq ()
						  left_environ <ptemp pseq (<simp_cntxt class nonvowel>)>
					>
				   )
  >
)

; :a rule
; LR: sat  sat+sH
; SR: saat  saat00i
;Bleeds vowel deletion by becoming [+low]
;RULE ":a <= #CV___C[+|#]"
;RULE ":a => #CV___C[+|#]"
; Vowel Deletion and Assimilation
; LR: kalb+sH  usul+sH  kira¦+sH  huku§k+sH
; SR: ka0Lb00i  us£0L00ü  kir 00sï  huk£0k00u
; LR: kira¦
; SR: kir 0
;RULE "Q:0"
;  --> 0 / V __ C* [V -back -round]
;  --> 0 / V __ C* [V -back +round]
; ¦ --> 0 / V __ C* [V +back -round]
; § --> 0 / V __ C* [V +back +round]
; include A and H?
; V[-lng]:V[+lng] word-finally
;RULE "Lengthening, V[-lng]:V[+lng] <= ___Q:0#"
; V[-lng]:V[+lng] in open syllable
;RULE "Lengthening, V[-lng]:V[+lng] <= ___Q:0 C (+:0) C:0 V"
; V[-lng]:V[+lng] prohibited in word-final closed syllable
;RULE "Lengthening, V[-lng]:V[+lng] => ___Q:0 [# | C (+:0) C:0 V]"
;RULE "Lengthening, V[-lng]:V[+lng] /<= ___Q:0 C#"
; Under the PC-KIMMO analysis, the vowels   ¦ § do not surface as such,
; but they condition vowel harmony.  In the underlying forms, they appear immediately after
; another vowel.  If they are in an open syllable after affixation, they coalesce with that
; preceding vowel; otherwise they delete (except that the  vowel can escape deletion by becoming "a",
; see rule v_change).
; For Hermit Crab, we have a different analysis.  We treat the vowels   ¦ § as ordinary vowels
; i u a o, which appear immediately after another vowel.  After conditioning vowel harmony,
; the "extra" vowels delete in closed syllables, or assimilate to the preceding vowel in open sylls.
; The rule is ordered after sy_deletion (underlying /Cs/ or /Cy/ becomes /C/, and the vowel deletion
; subrule doesn't apply then).
; /sait/ is a lexical counterexample to the first two subrules (it surfaces as [saat]).
; Our rules:
; V --> 0 / V __ C#
;       0 / V __ CC
;       [V alpha back beta high gamma low delta round] / [V alpha back beta high gamma low delta round] ___
(load_morpher_rule message
  <prule  nm rm_dummy_vs
		  str (morphophonemic) var_fs (a back b high c low d round)
		  in_pseq (<simp_cntxt class vowel>)
		  subrules (<psub x_rf (no_v_short)
						  out_pseq ()
						  left_environ <ptemp pseq (<simp_cntxt class vowel>)>
						  right_environ <ptemp fin true pseq (<simp_cntxt class cons>)>
					>
					<psub x_rf (no_v_short)
						  out_pseq ()
						  left_environ <ptemp pseq (<simp_cntxt class vowel>)>
						  right_environ <ptemp pseq (<simp_cntxt class cons><simp_cntxt class cons>)>
					>
					<psub out_pseq (<simp_cntxt class null alpha_vars (a + b + c + d +)>)
						  left_environ <ptemp pseq (<simp_cntxt class vowel alpha_vars (a + b + c + d +)>)>
					>
				   )
  >
)

; k-deletion
; LR: inek+sH
; SR: ine000i
; S = s y
;RULE "k-deletion, k:0 <=> V[-lng]___(+:0)S:"
; Here reanalyzed as follows:
; [+cons -cont +back -vd] --> 0 / CV __ + V
; (Note that we are treating long vowels as VV, hence the CV in the above rather than [V +long])
; Counterfeeds vowel deletion (rule "rm_dummy_vs"), hence ordered after that rule;
; fed by sy-deletion, hence ordered after that rule.
(load_morpher_rule message
  <prule  nm k_delete
		  str (morphophonemic)
		  in_pseq (<simp_cntxt class k>)
		  subrules (<psub out_pseq ()
						  left_environ <ptemp pseq (<simp_cntxt class nonvowel>
													<simp_cntxt class vowel>)>
						  right_environ <ptemp pseq (<bdry rep + ctable table2>
													 <simp_cntxt class vowel>
													)
										>
					>
				   )
  >
)


; Devoicing
; LR: kab  kab+DAn
; SR: kap  kap0tan
;RULE "O[+vc]:O[-vc] correspondences"
;This doesn't correspond directly to anything in HC
;RULE "Devoicing, O[+vc]:O[-vc] => [___# | ___(+:0)C]"
;This encodes the => of the ff 2 PC-KIMMO rules; we collapse the two rules into a disjunctive pair
; (note the addition of [-nasal]):
;RULE "Devoicing, O[+vc]:O[-vc] <= ___#"
;RULE "Devoicing, O[+vc]:O[-vc] <= ___(+:0)C"
; [-cont -nasal] --> [-vd] / __ C
;                    [-vd] / __#
(load_morpher_rule message
  <prule  nm devoicing
		  str (morphophonemic)
		  in_pseq (<simp_cntxt class obstruent>)
		  subrules (<psub out_pseq (<simp_cntxt class voiceless>)
						  right_environ <ptemp fin true pseq ()>
					>
					<psub out_pseq (<simp_cntxt class voiceless>)
						  right_environ <ptemp pseq (<simp_cntxt class cons>)>
					>
				   )
  >
)

; D:t rule
; LR: kep+DAn
; SR: kep0ten
;RULE "D:t <=> :O[-vc] (+:0)___"
; We distinguish /D/ from /d/ and /t/ by the diacritic feature [+var_voice], with which only /D/ is marked
; [+cons alveolar -strident -sonorant +var_voiced] --> [-vd] / [-cont -vd] __
;                                                      [+vd] /
; Ordered after devoicing, which feeds this rule (e.g. kurd+Dan --> kurttan)
(load_morpher_rule message
  <prule  nm D
		  str (morphophonemic)
		  in_pseq (<simp_cntxt class D>)
		  subrules (<psub out_pseq (<simp_cntxt class voiceless>)
						  left_environ <ptemp pseq (<simp_cntxt class nonvoiced_obstr>)>
					>
					<psub out_pseq (<simp_cntxt class voiced>)
					>
				   )
  >
)


;Morphological rules.  Unclear whether case suffixes go inside or outside of other two.
(load_morpher_rule message
  <mrule  nm dative
		  str morphophonemic
		  gl  DAT
		  side r
		  subrules (<msub
					  in <m_lhs pseq ((<opt_seq min 0 max -1 seq (<simp_cntxt class null>)>))>
					  out <m_rhs p_out (1 (+yA table2))>
					>)
  >
)
(load_morpher_rule message
  <mrule  nm ablative
		  str morphophonemic
		  gl  ABL
		  side r
		  subrules (<msub
					  in <m_lhs pseq ((<opt_seq min 0 max -1 seq (<simp_cntxt class null>)>))>
					  out <m_rhs p_out (1 (+DAn table2))>
					>)
  >
)
(load_morpher_rule message
  <mrule  nm plural
		  str morphophonemic
		  gl  PLURAL
		  side r
		  subrules (<msub
					  in <m_lhs pseq ((<opt_seq min 0 max -1 seq (<simp_cntxt class null>)>))>
					  out <m_rhs p_out (1 (+lAr table2))>
					>)
  >
)
(load_morpher_rule message
  <mrule  nm possessive
		  str morphophonemic
		  gl  POSS
		  side r
		  subrules (<msub
					  in <m_lhs pseq ((<opt_seq min 0 max -1 seq (<simp_cntxt class null>)>))>
					  out <m_rhs p_out (1 (+sH table2))>
					>)
  >
)


;(trace_morpher_rule message (true true dative))
;(trace_morpher_rule message (true true ablative))
;(trace_morpher_rule message (true true plural))
;(trace_morpher_rule message (true true possessive))
;(trace_morpher_rule message (true true palatalization1))
;(trace_morpher_rule message (true true rm_dummy_vs))
;(trace_morpher_rule message (true true D))
;(trace_lexical_lookup message true)
;(trace_morpher_strata message (true true))
;(morpher_show pretty_print *prules*)
;Don't let errors stop us:
(morpher_set message (*quit_on_error* false))
