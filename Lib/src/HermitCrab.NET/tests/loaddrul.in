;Test loading of disjunctive rules.

;Now load some nat classes (msg 6541):
(load_nat_class message <nat_class name null        features ()>)
(load_nat_class message <nat_class name cons        features (cons + voc -)>)
(load_nat_class message <nat_class name vd_cons     features (cons + vd +)>)
(load_nat_class message <nat_class name asp_cons    features (asp + cons +)>)
(load_nat_class message <nat_class name aspirated   features (asp +)>)
(load_nat_class message <nat_class name unasp_cons  features (asp - cons +)>)
(load_nat_class message <nat_class name unaspirated features (asp -)>)
(load_nat_class message <nat_class name obstruent   features (cons + cont -)>)
(load_nat_class message <nat_class name p           features (cons + cont - poa bilabial vd -)>)
(load_nat_class message <nat_class name vowel       features (cons - voc +)>)
(load_nat_class message <nat_class name high_vowel  features (cons - voc + high +)>)

(load_nat_class message <nat_class name nonback_high_vowel   features (cons - voc + back - high +)>)
(load_nat_class message <nat_class name back_rnd_vowel       features (cons - voc + back + round +)>)
(load_nat_class message <nat_class name back_unrnd_vowel     features (cons - voc + back + round -)>)
(load_nat_class message <nat_class name nonback_rnd_vowel    features (cons - voc + back - round +)>)
(load_nat_class message <nat_class name nonback_unrnd_vowel  features (cons - voc + back - round -)>)
(load_nat_class message <nat_class name back_rnd       features (back + round +)>)
(load_nat_class message <nat_class name back_unrnd     features (back + round -)>)
(load_nat_class message <nat_class name nonback_rnd    features (back - round +)>)
(load_nat_class message <nat_class name nonback_unrnd  features (back - round -)>)

;The first version of the rule is straightforward; note the elsewhere case for the 2nd subrule:
; {p t k} -> {ph th kh} /#_
;   -> {p t k} /
(load_morpher_rule message
  <prule  nm disrule1
		  str (allophonic)
		  mult_applic simultaneous
		  in_pseq (<simp_cntxt class obstruent>)
		  subrules (<psub out_pseq (<simp_cntxt class aspirated>)
						  left_environ <ptemp init true pseq ()>
					>
					<psub out_pseq (<simp_cntxt class unaspirated>)
					>
				   )
  >
)
;Check if we got a simplified rule (we don't show the subrule struc on the output, because the addr's
; of the C strings would be different each time, messing up rcsdiff; so we test if the Simplified_rule
; arg has a subrule functor, and succeed if we do):
.recorded($*rule disrule1*$, Rule, _),
 arg(7, Rule, Simplified_rule),
 ifthenelse(functor(Simplified_rule, psub, _),
			writeln($***** simplified rule CORRECT in disrule1 ***$),
			writeln($***** simplified rule ERROR in disrule1 ****$)).
;Show the rule (msg 6509):
(show_morpher_rule pretty_print disrule1)
;Now test what happens when we delete a natural class used by the rule.
;Rm a class used by the LHS (msg 6542):
(remove_nat_class message obstruent)
;Show the rule (error msg 6042):
(show_morpher_rule pretty_print disrule1)
;Just to be sure, look at the internal form of the rule; there should be two
; 0s in the LHS pseq (which is shared by all subrules):
.recorded($*rule disrule1*$, R, _),
 arg(5, R, LHS_pseq),
 writeln(LHS_pseq).
;--and there should be two in each subrule's target pseq:
.recorded($*rule disrule1*$, R, _),
 arg(8, R, [Subrule1, Subrule2]),
 writeln($First subrule: $),
 arg(10, Subrule1, Target_pseq1),
 writeln(Target_pseq1),
 writeln($Second subrule: $),
 arg(10, Subrule2, Target_pseq2),
 writeln(Target_pseq2).
;Now put the nat class back in:
(load_nat_class message <nat_class name obstruent   features (cons + cont -)>)
;And see if the LHS and target got fixed again.  Show rule (msg 6509):
(show_morpher_rule pretty_print disrule1)
;Just to be sure, we also check the simplified rule and the anal target
; (which aren't shown by show_morpher_rule); there should be no instances of
; 0.  (To avoid outputting ptrs which will be different time we run
; this, so 'diff' wouldn't work, we explicitly check whether the FBs are 0.)
.recorded($*rule disrule1*$, R, _),
 arg(5, R, [LHS_seg]),
 arg(7, R, Simple_rule),
 arg(10, Simple_rule, [Target_seg]),
 ifthenelse(
			(arg(2, LHS_seg, 0)    ; arg(3, LHS_seg, 0) ;
			 arg(2, Target_seg, 0) ; arg(3, Target_seg, 0)
			),
			writeln($********* revision to LHS ERROR **********$),
			writeln($********* revision to LHS CORRECT **********$)
		   ).
;The next version of the rule has an RHS which is longer than 1 seg...
; p -> pph /#_
;   -> pp /
(load_morpher_rule message
  <prule  nm disrule1
		  str (allophonic)
		  mult_applic simultaneous
		  in_pseq (<simp_cntxt class p>)
		  subrules (<psub out_pseq (<simp_cntxt class null> <simp_cntxt class asp_cons>)
						  left_environ <ptemp init true pseq (<simp_cntxt class vowel>)>
					>
					<psub out_pseq (<simp_cntxt class unaspirated>)
					>
				   )
  >
)
;...so we shouldn't get a simplified rule: we should instead get a 'false':
.recorded($*rule disrule1*$, Rule, _),
 ifthenelse(arg(7, Rule, 'false'),
			writeln($***** simplified rule CORRECT in disrule1 ***$),
			writeln($***** simplified rule ERROR in disrule1 ****$)).
;Again test what happens when we delete a natural class used by the rule.
;Rm a class used by the LHS (msg 6542):
(remove_nat_class message p)
;Show the rule (error msg 6042):
(show_morpher_rule pretty_print disrule1)
;Just to be sure, look at the internal form of the rule; there should be two
; 0s in the LHS pseq (the one shared by all subrules):
.recorded($*rule disrule1*$, R, _),
 arg(5, R, LHS_pseq),
 writeln(LHS_pseq).
;--and there should be four in the first subrule's target (because it's two
; segs long) and two in the 2nd target:
.recorded($*rule disrule1*$, R, _),
 arg(8, R, [Subrule1, Subrule2]),
 writeln($First subrule: $),
 arg(10, Subrule1, Target_pseq1),
 writeln(Target_pseq1),
 writeln($Second subrule: $),
 arg(10, Subrule2, Target_pseq2),
 writeln(Target_pseq2).
;Now put the nat class back in:
(load_nat_class message <nat_class name p features (cons + cont - poa bilabial vd -)>)
;And see if the LHS and target got fixed again.  Show rule (msg 6509):
(show_morpher_rule pretty_print disrule1)
;There's no simplified rule to check this time.
;And the next version doesn't have an elsewhere case, nor can we build a simplified form (because
; it relies on differing word bdry conditions):
; {p t k} -> {ph th kh} /#_
;   -> {p t k} / _#
(load_morpher_rule message
  <prule  nm disrule1
		  str (allophonic)
		  mult_applic lr_iterative
		  in_pseq (<simp_cntxt class obstruent>)
		  subrules (<psub out_pseq (<simp_cntxt class aspirated>)
						  left_environ <ptemp init true pseq ()>
					>
					<psub out_pseq (<simp_cntxt class unaspirated>)
						  right_environ <ptemp fin true pseq ()>
					>
				   )
  >
)
;...we shouldn't get a simplified rule: we should instead get an 'false':
.recorded($*rule disrule1*$, Rule, _),
 ifthenelse(arg(7, Rule, 'false'),
			writeln($***** simplified rule CORRECT in disrule1 ***$),
			writeln($***** simplified rule ERROR in disrule1 ****$)).
;Again test what happens when we delete a natural class used by the rule.
;This time we rm a class used by the RHS of one of the subrules (msg 6542):
(remove_nat_class message aspirated)
;Show the rule (error msg 6042):
(show_morpher_rule pretty_print disrule1)
;Just to be sure, look at the internal form of the rule; there should be two
; 0s in the target of the first subrule, and two in its RHS pseq:
.recorded($*rule disrule1*$, R, _),
 arg(8, R, [Subrule1, _]),
 arg(10, Subrule1, Target_pseq1),
 writeln(Target_pseq1),
 arg(8, Subrule1, RHS_pseq1),
 writeln(RHS_pseq1).
;Now put the nat class back in:
(load_nat_class message <nat_class name aspirated   features (asp +)>)
;And see if the RHS and target got fixed again.  Show rule (msg 6509):
(show_morpher_rule pretty_print disrule1)
;Again, there's no simplified rule to check.
;The next version of the rule (a vowel harmony rule) doesn't have an elsewhere case, but we should
; be able to construct a simplified rule because the features are all the same.
;[V +high] -> [+round +back] / [V +round +back] (C [V +high -back])* C __
;    -> [+round -back] / [V +round -back] (C [V +high -back])* C __
;    -> [-round +back] / [V -round +back] (C [V +high -back])* C __
;    -> [-round -back] / [V -round -back] (C [V +high -back])* C __
; Notice the bdry marker in diff positions, which should be skipped in building the simplified rule:
(load_morpher_rule message
  <prule  nm disrule1
		  str (morphophonemic)
		  in_pseq (<simp_cntxt class high_vowel>)
		  subrules (<psub out_pseq (<simp_cntxt class back_rnd>)
						  left_environ <ptemp pseq (<simp_cntxt class back_rnd_vowel>
													 <opt_seq min 0 max 99
															  seq (<simp_cntxt class cons>
																   <simp_cntxt class nonback_high_vowel>)
													 >
													 <opt_seq min 1 max 1
															  seq (<simp_cntxt class cons>)
													 >
												   )
									   >
					>
					<psub out_pseq (<simp_cntxt class nonback_rnd>)
						  left_environ <ptemp pseq (<simp_cntxt class nonback_rnd_vowel>
													<bdry rep + ctable table3>
													<opt_seq min 0 max 99
															 seq (<simp_cntxt class cons>
																  <simp_cntxt class nonback_high_vowel>)>
													<opt_seq min 1 max 1
															 seq (<simp_cntxt class cons>)
													>
												   )
									   >
					>
					<psub out_pseq (<simp_cntxt class back_unrnd>)
												left_environ <ptemp pseq (<simp_cntxt class back_unrnd_vowel>
																		  <opt_seq min 0 max 99
																				   seq (<simp_cntxt class cons>
																						<simp_cntxt class nonback_high_vowel>)
																		  >
																		  <bdry rep + ctable table3>
																		  <opt_seq min 1 max 1
																				   seq (<simp_cntxt class cons>)
																		  >
																		 )
															 >
					>
					<psub out_pseq (<simp_cntxt class nonback_unrnd>)
						  left_environ <ptemp pseq (<simp_cntxt class nonback_unrnd_vowel>
													<opt_seq min 0 max 99
															 seq (<simp_cntxt class cons>
																  <simp_cntxt class nonback_high_vowel>)
													>
													<opt_seq min 1 max 1
															 seq (<simp_cntxt class cons>)>
												   )
									   >
					>
				   )
  >
)
;Check if we got a simplified rule (we should):
.recorded($*rule disrule1*$, Rule, _),
 arg(7, Rule, Simplified_rule),
 ifthenelse(functor(Simplified_rule, psub, _),
			writeln($***** simplified rule CORRECT in disrule1 ***$),
			writeln($***** simplified rule ERROR in disrule1 ****$)).

;The next rule is a deletion rule:
; C --> 0 / C __ [C +asp]
;     C __ [C +vd]
(load_morpher_rule message
  <prule  nm disrule1
		  str (allophonic)
		  mult_applic simultaneous
		  in_pseq (<simp_cntxt class obstruent>)
		  subrules (<psub out_pseq ()
						  left_environ <ptemp pseq (<simp_cntxt class cons>)>
						  right_environ <ptemp pseq (<simp_cntxt class asp_cons>)>
					>
					<psub out_pseq ()
						  left_environ <ptemp pseq (<simp_cntxt class cons>)>
						  right_environ <ptemp pseq (<simp_cntxt class vd_cons>)>
					>
				   )
  >
)
;Should get a simplified rule:
.recorded($*rule disrule1*$, Rule, _),
 arg(7, Rule, Simplified_rule),
 ifthenelse(functor(Simplified_rule, psub, _),
			writeln($***** simplified rule CORRECT in disrule1 ***$),
			writeln($***** simplified rule ERROR in disrule1 ****$)).

;Finally, we try a rule with some variable features:
(load_morpher_rule message
  <prule  nm disrule1
		  str (allophonic)
	var_fs (a high b low)
		  mult_applic simultaneous
		  in_pseq (<simp_cntxt class obstruent alpha_vars (a + b +)>)
		  subrules (<psub out_pseq (<simp_cntxt class aspirated alpha_vars (a - b -)>)
						  left_environ <ptemp init true pseq ()>
					>
					<psub out_pseq (<simp_cntxt class unaspirated>)
					>
				   )
  >
)
;Show it, and ensure the variable features show up right:
(show_morpher_rule pretty_print disrule1)
;Now remove rule1:
(remove_morpher_rule message disrule1)
;and remove the nat classes:
(remove_nat_class message vd_cons)
(remove_nat_class message asp_cons)
(remove_nat_class message aspirated)
(remove_nat_class message unasp_cons)
(remove_nat_class message unaspirated)
(remove_nat_class message cons)
(remove_nat_class message vowel)
(remove_nat_class message high_vowel)

(remove_nat_class message nonback_high_vowel)

(remove_nat_class message back_rnd_vowel)
(remove_nat_class message back_unrnd_vowel)
(remove_nat_class message nonback_rnd_vowel)
(remove_nat_class message nonback_unrnd_vowel)

(remove_nat_class message back_rnd)
(remove_nat_class message back_unrnd)
(remove_nat_class message nonback_rnd)
(remove_nat_class message nonback_unrnd)

(remove_nat_class message obstruent)
(remove_nat_class message p)
(remove_nat_class message null)
