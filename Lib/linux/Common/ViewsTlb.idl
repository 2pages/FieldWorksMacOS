#line 1 ".\\ViewsTlb.idl"














import "oaidl.idl";
import "ocidl.idl";
import "objidl.idl";

#line 1 "C:\\fwrepo\\fw\\Src\\Generic\\common.idh"

































































cpp_quote("")
cpp_quote("#undef ATTACH_GUID_TO_CLASS")
cpp_quote("#if defined(__cplusplus)")
cpp_quote("#define ATTACH_GUID_TO_CLASS(type, guid, cls) \\")
cpp_quote("	type __declspec(uuid(#guid)) cls;")
cpp_quote("#else // !defined(__cplusplus)")
cpp_quote("#define ATTACH_GUID_TO_CLASS(type, guid, cls)")
cpp_quote("#endif // !defined(__cplusplus)")
cpp_quote("")
cpp_quote("#ifndef DEFINE_COM_PTR")
cpp_quote("#define DEFINE_COM_PTR(cls)")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#undef GENERIC_DECLARE_SMART_INTERFACE_PTR")
cpp_quote("#define GENERIC_DECLARE_SMART_INTERFACE_PTR(cls, iid) \\")
cpp_quote("	ATTACH_GUID_TO_CLASS(interface, iid, cls); \\")
cpp_quote("	DEFINE_COM_PTR(cls);")
cpp_quote("")


cpp_quote("")
cpp_quote("#ifndef CUSTOM_COM_BOOL")
typedef VARIANT_BOOL ComBool;
cpp_quote("#endif")
cpp_quote("")

cpp_quote("#if 0")
cpp_quote("// This is so there is an equivalent VB type.")
typedef CY SilTime;
cpp_quote("#elif defined(SILTIME_IS_STRUCT)")
cpp_quote("// This is for code that compiles UtilTime.*.")
cpp_quote("struct SilTime;")
cpp_quote("#else")
cpp_quote("// This is for code that uses a 64-bit integer for SilTime.")
cpp_quote("typedef __int64 SilTime;")
cpp_quote("#endif")
cpp_quote("")
#line 20 ".\\ViewsTlb.idl"

cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("f6d10640-c00c-11d2-8078-0000c0fb81b5") cpp_quote(",") cpp_quote("Views") cpp_quote(");") [ uuid(f6d10640-c00c-11d2-8078-0000c0fb81b5), version(1.0), helpstring("Views 1.0 Type Library") ] library Views
#line 23 ".\\ViewsTlb.idl"
{
	
	importlib("FwKernelTlb.tlb");	

	#line 1 "c:\\fwrepo\\fw\\src\\views\\Views.idh"




















	

	interface IVwNotifier;
	interface IVwNotifyChange;
	interface IVwSelection;
	interface IVwRootContainer;
	interface IVwEmbeddedWindow;
	interface IVwStylesheet;
	interface IVwEnv;
	interface IVwViewConstructor;
	interface IVwRootSite;
	interface ISilDataAccess;
	interface IStructuredTextDataAccess;
	interface IVwCacheDa;
	interface IVwRootBox;
	interface IVwPropertyStore;
	interface IVwOverlay;
	interface IVwPrintContext;
	
	interface IVwSearchKiller;
	interface IVwSynchronizer;
	interface IVwNotifyObjCharDeletion;
	interface IVwVirtualHandler;
	interface IVwLayoutStream;
	interface IVwLayoutManager;
	interface ILgWritingSystemFactory;

	typedef int HVO; 
	typedef int PropTag; 
	
























	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IVwNotifyChange") cpp_quote(",") cpp_quote("6C456541-C2B6-11d3-8078-0000C0FB81B5") cpp_quote(");") [ uuid("6C456541-C2B6-11d3-8078-0000C0FB81B5"), object, pointer_default(unique) ] interface IVwNotifyChange : IUnknown
	{
		
		
		
		
		
		
		
		
		
		
		
		
		
		HRESULT PropChanged(
			[in] HVO hvo,
			[in] PropTag tag,
			[in] int ivMin,
			[in] int cvIns,
			[in] int cvDel);
	};

	















	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ICheckWord") cpp_quote(",") cpp_quote("69F4D944-C786-47EC-94F7-15193EED6758") cpp_quote(");") [ uuid("69F4D944-C786-47EC-94F7-15193EED6758"), object, pointer_default(unique) ] interface ICheckWord : IUnknown
	{
		HRESULT Check(
			[in] LPCOLESTR pszWord,
			[out, retval] ComBool * pfCorrect);
	}

	
















	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IGetSpellChecker") cpp_quote(",") cpp_quote("F0A60670-D280-45EA-A5C5-F0B84C027EFC") cpp_quote(");") [ uuid("F0A60670-D280-45EA-A5C5-F0B84C027EFC"), object, pointer_default(unique) ] interface IGetSpellChecker : IUnknown
	{
		HRESULT GetChecker(
			[in] LPCOLESTR pszDictId,
			[out, retval] ICheckWord ** pcw);
	}

	
	
	
	typedef [v1_enum] enum VwSpecialChars
	{
		kscBackspace = 8,
		kscDelForward = 0x7f
	} VwSpecialChars;

	
	typedef [v1_enum] enum VwSelType
	{
		kstText = 1,
		kstPicture = 2,
	} VwSelType;

	
	
	
	
	
	
	typedef [v1_enum] enum PropChangeType
	{
		kpctNotifyMeThenAll,
		kpctNotifyAll,
		kpctNotifyAllButMe,
	} PropChangeType;

	
	
	typedef [v1_enum] enum VwDelProbType
	{
		
		
		kdptNone,
		
		
		
		
		
		
		
		
		kdptComplexRange,

		
		
		
		
		
		
		kdptBsAtStartPara,
		
		
		
		
		
		kdptDelAtEndPara,

		
		

		
		
		
		
		
		
		kdptBsReadOnly,
		
		
		
		
		
		
		kdptDelReadOnly,
		
		
		
		
		
		kdptReadOnly,
	} VwDelProbType;

	
	
	typedef [v1_enum] enum VwDelProbResponse
	{
		
		
		
		
		kdprAbort,
		
		
		
		
		
		
		kdprFail,
		
		
		
		
		
		kdprDone,
	} VwDelProbResponse;

	
	
	typedef [v1_enum] enum VwInsertDiffParaResponse
	{
		
		
		kidprDefault,
		
		
		kidprFail,
		
		
		
		kidprDone,
	} VwInsertDiffParaResponse;

	



	typedef [v1_enum] enum DbColType
	{
		koctGuid = 0, 
		koctInt = 1, 
		koctString = 2, 
		
		
		koctFmt = 3,
		
		
		koctMlaAlt = 4,
		
		
		koctMlsAlt = 5,
		
		
		koctMltAlt = 6,
		koctObj = 7, 
		koctObjVec = 8, 
		koctBaseId = 9, 
		koctTtp = 10, 
		
		
		koctUnicode = 11, 
		
		
		
		koctInt64 = 12, 
		koctTime = 13, 
		koctEnc = 14, 
		koctFlid = 15, 
		koctTimeStamp = 16, 
		koctObjOwn = 17, 
		koctObjVecOwn = 18, 
		koctBinary = 19, 
		koctTimeStampIfMissing = 20, 
		
		koctLim = 21, 
		koctObjVecExtra = 22,
	} DbColType;  

	




	typedef [v1_enum] enum AutoloadPolicies
	{
		
		
		kalpLoadForThisObject = 0,
		
		kalpNoAutoload = 1,
		
		
		kalpLoadForAllOfObjectClass = 2,
		
		
		
		
		
		kalpLoadForAllOfBaseClass = 3,
		
		
		
		
		
		
		kalpLoadAllOfClassForReadOnly = 4,
		
		
		
		
		
		
		
		
		kalpLoadAllOfClassIncludingAllVirtuals = 5,

		kalpLim = 6, 
	} AutoloadPolicies;  

	






	typedef [v1_enum] enum FldType
	{
		kftString, 
		
		
		
		kftMsa, 
		kftMta,  
		kftRefAtomic, 
		kftRefCombo, 
		kftRefSeq, 
		kftEnum, 
		
		
		
		kftUnicode, 
		kftTtp, 
		kftStText, 
		kftDummy, 

		kftLimEmbedLabel, 

		kftGroup, 
		kftGroupOnePerLine, 
		kftTitleGroup, 
		kftDateRO, 
		kftDate, 
		kftGenDate, 
		kftSubItems, 
		kftObjRefAtomic, 
		kftObjRefSeq, 
		kftInteger, 
		kftBackRefAtomic, 
		kftExpandable, 
		kftObjOwnSeq,	
		kftObjOwnCol,	
		kftGuid,	
		kftStTextParas, 

		kftLim		
	} FldType; 

	
	
	typedef [v1_enum] enum VwBoxType
	{
		kvbtUnknown = 0,
		kvbtGroup,
		kvbtParagraph,
		kvbtConcPara,
		kvbtPile,
		kvbtInnerPile,
		kvbtMoveablePile,
		kvbtDiv,
		kvbtRoot,
		kvbtTable,
		kvbtTableRow,
		kvbtTableCell,
		kvbtLeaf,
		kvbtString,
		kvbtDropCapString,
		kvbtAnchor,
		kvbtSeparator,
		kvbtBar,
		kvbtPicture,
		kvbtIndepPicture,
		kvbtIntegerPicture,
		kvbtLazy
	} VwBoxType;	


	







































	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ISilDataAccess") cpp_quote(",") cpp_quote("26E6E70E-53EB-4372-96F1-0F4707CCD1EB") cpp_quote(");") [ uuid("26E6E70E-53EB-4372-96F1-0F4707CCD1EB"), object, pointer_default(unique) ] interface ISilDataAccess : IUnknown
	{
		
		
		
		
		
		[propget] HRESULT ObjectProp(
			[in] HVO hvo,
			[in] PropTag tag,
			[out, retval] HVO * phvo);
		
		
		
		
		[propget] HRESULT VecItem(
			[in] HVO hvo,
			[in] PropTag tag,
			[in] int index, 
			[out, retval] HVO * phvo);
		
		[propget] HRESULT VecSize(
			[in] HVO hvo,
			[in] PropTag tag,
			[out, retval] int * pchvo);
		
		[propget] HRESULT VecSizeAssumeCached(
			[in] HVO hvo,
			[in] PropTag tag,
			[out, retval] int * pchvo);
		
		HRESULT VecProp(
			[in] HVO hvo,
			[in] PropTag tag,
			[in] int chvoMax,
			[out] int * pchvo,
			[out, size_is(chvoMax), length_is(*pchvo)] HVO * prghvo);


		
		
		
		
		
		
		
		HRESULT BinaryPropRgb(
			[in] HVO obj,
			[in] PropTag tag,
			[out, size_is(cbMax)] byte * prgb,
			[in] int cbMax,
			[out] int * pcb);
		
		
		
		
		[propget] HRESULT GuidProp(
			[in] HVO hvo,
			[in] PropTag tag,
			[out, retval] GUID * puid);
		
		
		
		[propget] HRESULT ObjFromGuid(
			[in] GUID uid,
			[out, retval] HVO * pHvo);
		
		
		
		[propget] HRESULT IntProp(
			[in] HVO hvo,
			[in] PropTag tag,
			[out, retval] int * pn);
		
		
		
		[propget] HRESULT Int64Prop(
			[in] HVO hvo,
			[in] PropTag tag,
			[out, retval] __int64 * plln);
		
		
		[propget] HRESULT BooleanProp(
			[in] HVO hvo,
			[in] PropTag tag,
			[out, retval] ComBool * pn);
		
		
		[propget] HRESULT MultiStringAlt(
			[in] HVO hvo,
			[in] PropTag tag,
			[in] int ws,
			[out, retval] ITsString ** pptss);
		
		
		[propget] HRESULT MultiStringProp(
			[in] HVO hvo,
			[in] PropTag tag,
			[out, retval] ITsMultiString ** pptms);
		
		
		
		
		
		
		
		
		
		
		[propget] HRESULT Prop(
			[in] HVO hvo,
			[in] PropTag tag,
			[out, retval] VARIANT * pvar);
		
		
		[propget] HRESULT StringProp(
			[in] HVO hvo,
			[in] PropTag tag,
			[out, retval] ITsString ** pptss);
		
		
		
		[propget] HRESULT TimeProp(
			[in] HVO hvo,
			[in] PropTag tag,
			[out, retval] __int64 * ptim);
		
		
		
		
		[propget] HRESULT UnicodeProp(
			[in] HVO obj,
			[in] PropTag tag,
			[out, retval] BSTR * pbstr);
		
		[propput] HRESULT UnicodeProp(
			[in] HVO obj,
			[in] PropTag tag,
			[in] BSTR bstr);
		
		
		
		
		
		HRESULT UnicodePropRgch(
			[in] HVO obj,
			[in] PropTag tag,
			[out, size_is(cchMax)] OLECHAR * prgch,
			[in] int cchMax,
			[out] int * pcch);
		
		
		
		[propget] HRESULT UnknownProp(
			[in] HVO hvo,
			[in] PropTag tag,
			[out, retval] IUnknown ** ppunk);

		
		
		
		
		
		
		
		HRESULT BeginUndoTask(
			[in] BSTR bstrUndo,
			[in] BSTR bstrRedo);

		
		
		HRESULT EndUndoTask();

		
		
		
		HRESULT ContinueUndoTask();

		
		
		HRESULT EndOuterUndoTask();

		
		HRESULT Rollback();

		
		
		HRESULT BreakUndoTask(
			[in] BSTR bstrUndo,
			[in] BSTR bstrRedo);

		
		
		HRESULT BeginNonUndoableTask();

		
		HRESULT EndNonUndoableTask();

		
		
		HRESULT GetActionHandler(
			[out, retval] IActionHandler ** ppacth);

		
		
		HRESULT SetActionHandler(
			[in] IActionHandler * pacth);

		
		
		
		
		
		HRESULT DeleteObj(
			[in] HVO hvoObj);
		
		
		
		
		
		
		
		
		

		
		HRESULT DeleteObjOwner(
			[in] HVO hvoOwner,
			[in] HVO hvoObj,
			[in] PropTag tag,
			[in] int ihvo);
		
		
		
		
		
		
		
		

		
		HRESULT InsertNew(
			[in] HVO hvoObj,
			[in] PropTag tag,
			[in] int ihvo,
			[in] int chvo,
			[in] IVwStylesheet * pss);
		
		
		
		
		
		
		
		
		
		
		

		
		HRESULT MakeNewObject(
			[in] int clid,
			[in] HVO hvoOwner,
			[in] PropTag tag,
			[in] int ord,
			[out, retval] HVO * phvoNew);

		
		
		
		

		
		HRESULT MoveOwnSeq(
			[in] HVO hvoSrcOwner,
			[in] PropTag tagSrc,
			[in] int ihvoStart,
			[in] int ihvoEnd,
			[in] HVO hvoDstOwner,
			[in] PropTag tagDst,
			[in] int ihvoDstStart);

		
		
		
		

		
		HRESULT MoveOwn(
			[in] HVO hvoSrcOwner,
			[in] PropTag tagSrc,
			[in] HVO hvo,
			[in] HVO hvoDstOwner,
			[in] PropTag tagDst,
			[in] int ihvoDstStart);

		
		
		
		
		
		
		
		
		
		
		

		
		
		HRESULT Replace(
			[in] HVO hvoObj,
			[in] PropTag tag,
			[in] int ihvoMin,
			[in] int ihvoLim,
			[in, size_is(chvo)] HVO * prghvo,
			[in] int chvo);

		
		

		
		
		HRESULT SetObjProp(
			[in] HVO hvo,
			[in] PropTag tag,
			[in] HVO hvoObj);

		
		
		
		HRESULT RemoveObjRefs(
			[in] HVO hvo);

		

		
		
		HRESULT SetBinary(
			[in] HVO hvo,
			[in] PropTag tag,
			[in, size_is(cb)] byte * prgb,
			[in] int cb);

		

		
		
		HRESULT SetGuid(
			[in] HVO hvo,
			[in] PropTag tag,
			[in] GUID uid);

		

		
		
		HRESULT SetInt(
			[in] HVO hvo,
			[in] PropTag tag,
			[in] int n);

		

		
		
		HRESULT SetInt64(
			[in] HVO hvo,
			[in] PropTag tag,
			[in] __int64 lln);

		
		
		
		HRESULT SetBoolean(
			[in] HVO hvo,
			[in] PropTag tag,
			[in] ComBool n);

		

		
		
		HRESULT SetMultiStringAlt(
			[in] HVO hvo,
			[in] PropTag tag,
			[in] int ws,
			[in] ITsString * ptss);

		

		
		
		HRESULT SetString(
			[in] HVO hvo,
			[in] PropTag tag,
			[in] ITsString * ptss);

		

		
		
		HRESULT SetTime(
			[in] HVO hvo,
			[in] PropTag tag,
			[in] __int64 lln);

		

		
		
		HRESULT SetUnicode(
			[in] HVO hvo,
			[in] PropTag tag,
			[in, size_is(cch)] OLECHAR * prgch,
			[in] int cch);

		
		
		
		

		
		
		HRESULT SetUnknown(
			[in] HVO hvo,
			[in] PropTag tag,
			[in] IUnknown * punk);

		
		
		
		HRESULT AddNotification(
			[in] IVwNotifyChange * pnchng);

		
		
		
		
		

		
		
		

		
		

		
		
		
		
		HRESULT PropChanged(
			[in] IVwNotifyChange * pnchng,
			[in] int pct,
			[in] HVO hvo,
			[in] int tag,
			[in] int ivMin,
			[in] int cvIns,
			[in] int cvDel);

		
		HRESULT RemoveNotification(
			[in] IVwNotifyChange * pnchng);

		
		
		
		HRESULT GetDisplayIndex(
			[in] HVO hvoOwn,
			[in] int tag,
			[in] int ihvo,
			[out, retval] int * ihvoDisp);

		
		
		[propget] HRESULT WritingSystemFactory(
			[out, retval] ILgWritingSystemFactory ** ppwsf);

		
		
		[propputref] HRESULT WritingSystemFactory(
			[in] ILgWritingSystemFactory * pwsf);

		
		
		

		

		
		
		
		[propget] HRESULT WritingSystemsOfInterest(
			[in] int cwsMax,
			[out, size_is(cwsMax)] int * pws,
			[out, retval] int * pcws);

		
		
		
		
		
		
		
		
		
		

		
		

		
		

		
		HRESULT InsertRelExtra(
			[in] HVO hvoSrc,
			[in] PropTag tag,
			[in] int ihvo,
			[in] HVO hvoDst,
			[in] BSTR bstrExtra);

		
		
		
		
		
		
		
		
		
		

		
		

		
		

		
		HRESULT UpdateRelExtra(
			[in] HVO hvoSrc,
			[in] PropTag tag,
			[in] int ihvo,
			[in] BSTR bstrExtra);

		
		
		
		
		
		
		
		
		
		

		
		HRESULT GetRelExtra(
			[in] HVO hvoSrc,
			[in] PropTag tag,
			[in] int ihvo,
			[out, retval] BSTR * pbstrExtra);

		
		
		
		
		[propget] HRESULT IsPropInCache(
			[in] HVO hvo,
			[in] PropTag tag,
			[in] int cpt,
			[in] int ws,
			[out, retval] ComBool * pfCached);

		
		
		
		

		
		
		HRESULT IsDirty(
			[out, retval] ComBool * pf);

		
		HRESULT ClearDirty();

		
		
		
		
		
		[propget] HRESULT MetaDataCache(
			[out, retval] IFwMetaDataCache ** ppmdc);

		
		
		
		[propputref] HRESULT MetaDataCache(
			[in] IFwMetaDataCache * pmdc);

		
		
		
		
		
		
		[propget] HRESULT IsValidObject(
			[in] HVO hvo,
			[out, retval] ComBool * pfValid);

		
		
		
		
		[propget] HRESULT IsDummyId(
			[in] HVO hvo,
			[out, retval] ComBool * pfDummy);

		
		
		
		
		
		
		
		HRESULT GetObjIndex(
			[in] HVO hvoOwn,
			[in] int flid,
			[in] HVO hvo,
			[out, retval] int * ihvo);

		
		
		
		
		
		
		
		
		
		HRESULT GetOutlineNumber(
			[in] HVO hvo,
			[in] int flid,
			[in] ComBool fFinPer,
			[out, retval] BSTR * pbstr);

		
		
		
		
		
		
		
		
		
		
		
		HRESULT MoveString(
			[in] int hvoSource,
			[in] PropTag flidSrc,
			[in] int wsSrc,
			[in] int ichMin,
			[in] int ichLim,
			[in] HVO hvoDst,
			[in] PropTag flidDst,
			[in] int wsDst,
			[in] int ichDest,
			[in] ComBool fDstIsNew);
	};

	















	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IStructuredTextDataAccess") cpp_quote(",") cpp_quote("A2A4F9FA-D4E8-4bfb-B6B7-5F45DAF2DC0C") cpp_quote(");") [ uuid("A2A4F9FA-D4E8-4bfb-B6B7-5F45DAF2DC0C"), object, pointer_default(unique) ] interface IStructuredTextDataAccess : IUnknown
	{
		
		[propget] HRESULT ParaContentsFlid(
			[out, retval] PropTag * pflid);

		
		[propget] HRESULT ParaPropertiesFlid(
			[out, retval] PropTag * pflid);

		
		[propget] HRESULT TextParagraphsFlid(
			[out, retval] PropTag * pflid);
	};

	typedef [v1_enum] enum VwClearInfoAction
	{
		kciaRemoveObjectInfoOnly = 0,		
		kciaRemoveObjectAndOwnedInfo = 1,	
											
		kciaRemoveAllObjectInfo = 2,		
											
	} VwClearInfoAction;

	






















	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IVwCacheDa") cpp_quote(",") cpp_quote("B9ADC49A-E28B-4858-8C04-53E0D2E5A76F") cpp_quote(");") [ uuid("B9ADC49A-E28B-4858-8C04-53E0D2E5A76F"), object, pointer_default(unique) ] interface IVwCacheDa : IUnknown
	{
		
		

		
		
		
		HRESULT CacheObjProp(
			[in] HVO obj,
			[in] PropTag tag,
			[in] HVO val);
		
		
		HRESULT CacheVecProp(
			[in] HVO obj,
			[in] PropTag tag,
			[in, size_is(chvo)] HVO rghvo[],
			[in] const int chvo);
		
		
		
		
		
		
		
		
		
		
		HRESULT CacheReplace(
			[in] HVO hvoObj,
			[in] PropTag tag,
			[in] int ihvoMin,
			[in] int ihvoLim,
			[in, size_is(chvo)] HVO prghvo[],
			[in] int chvo);

		
		
		
		HRESULT CacheBinaryProp(
			[in] HVO obj,
			[in] PropTag tag,
			[in, size_is(cb)] byte * prgb,
			[in] int cb);
		HRESULT CacheGuidProp(
			[in] HVO obj,
			[in] PropTag tag,
			[in] GUID uid);
		HRESULT CacheInt64Prop(
			[in] HVO obj,
			[in] PropTag tag,
			[in] __int64 val);
		HRESULT CacheIntProp(
			[in] HVO obj,
			[in] PropTag tag,
			[in] int val);
		HRESULT CacheBooleanProp(
			[in] HVO obj,
			[in] PropTag tag,
			[in] ComBool val);
		HRESULT CacheStringAlt(
			[in] HVO obj,
			[in] PropTag tag,
			[in] int ws,
			[in] ITsString * ptss);
		HRESULT CacheStringProp(
			[in] HVO obj,
			[in] PropTag tag,
			[in] ITsString * ptss);
		HRESULT CacheTimeProp(
			[in] HVO hvo,
			[in] PropTag tag,
			[in] SilTime val);
		HRESULT CacheUnicodeProp(
			[in] HVO obj,
			[in] PropTag tag,
			[in, size_is(cch)] OLECHAR * prgch,
			[in] int cch);
		HRESULT CacheUnknown(
			[in] HVO obj,
			[in] PropTag tag,
			[in] IUnknown * punk);

		
		
		
		
		
		
		
		
		
		
		
		
		
		HRESULT ClearInfoAbout(
			[in] HVO hvo,
			[in] VwClearInfoAction cia);
		
		
		HRESULT ClearInfoAboutAll(
			[in, size_is(chvo)] HVO * prghvo,
			[in] int chvo,
			[in] VwClearInfoAction cia);

		
		
		
		
		
		[propget] HRESULT CachedIntProp(
			[in] HVO obj,
			[in] PropTag tag,
			[out] ComBool * pf,
			[out, retval] int * pn);

		
		
		
		HRESULT ClearAllData();

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		HRESULT InstallVirtual(
			[in] IVwVirtualHandler * pvh);
		
		HRESULT GetVirtualHandlerId(
			[in] PropTag tag,
			[out, retval] IVwVirtualHandler ** ppvh);
		
		
		
		
		
		HRESULT GetVirtualHandlerName(
			[in] BSTR bstrClass,
			[in] BSTR bstrField,
			[out, retval] IVwVirtualHandler ** ppvh);
		
		HRESULT ClearVirtualProperties();
	};

	
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("81EE73B1-BE31-49cf-BC02-6030113AC56F") cpp_quote(",") cpp_quote("VwCacheDa") cpp_quote(");") [ uuid(81EE73B1-BE31-49cf-BC02-6030113AC56F) ] coclass VwCacheDa
	{
		interface ISilDataAccess;
		interface IVwCacheDa;
		interface IStructuredTextDataAccess;
	};
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("5BEEFFC6-E88C-4258-A269-D58390A1F2C9") cpp_quote(",") cpp_quote("VwUndoDa") cpp_quote(");") [ uuid(5BEEFFC6-E88C-4258-A269-D58390A1F2C9) ] coclass VwUndoDa
	{
		interface ISilDataAccess;
		interface IVwCacheDa;
		interface IStructuredTextDataAccess;
	};
	#line 1384 "c:\\fwrepo\\fw\\src\\views\\Views.idh"


	
	typedef [v1_enum] enum VwShiftStatus
	{
		kfssNone = 0,

		kfssShift = 1,
		kfssControl = 2,

		kgrfssShiftControl = kfssShift | kfssControl,
	} VwShiftStatus;

	
	

	
	
	typedef struct VwSelLevInfo
	{
		
		PropTag tag;
		
		
		int cpropPrevious;
		
		
		
		int ihvo;
		
		
		
		
		int hvo;
		
		
		int ws;
		
		
		
		int ich;
	} VwSelLevInfo; 

	

	typedef struct VwChangeInfo
	{
		HVO hvo; 
		PropTag tag; 
		int ivIns; 
		int cvIns; 
		int cvDel; 
	} VwChangeInfo; 

	
	typedef [v1_enum] enum VwUnit { 
		kunPoint1000 = 0,	
		kunPercent100 = 1,	
		kunRelative = 2		
	} VwUnit;

	
	typedef struct {
		int nVal;
		VwUnit unit;
	} VwLength; 

	
	typedef [v1_enum] enum VwAlignment {
		kvaLeft,
		kvaCenter,
		kvaRight,
		kvaJustified
	} VwAlignment; 

	
	typedef [v1_enum] enum VwFramePosition {
		kvfpVoid = 0x00,
		kvfpAbove = 0x01,
		kvfpBelow = 0x02,
		kvfpLhs = 0x04,
		kvfpRhs = 0x08,

		kvfpHsides = kvfpAbove | kvfpBelow,
		kvfpVsides = kvfpLhs | kvfpRhs,
		kvfpBox = kvfpHsides | kvfpVsides
	} VwFramePosition; 

	
	
	
	
	
	
	typedef [v1_enum] enum VwRule {
		kvrlNone = 0x00,
		kvrlGroups = 0x01,
		kvrlRowNoGroups = 0x02, 
		kvrlRows = kvrlGroups | kvrlRowNoGroups,
		kvrlColsNoGroups = 0x04, 
		kvrlCols = kvrlGroups | kvrlColsNoGroups,
		kvrlAll = kvrlRows | kvrlCols,
	} VwRule; 

	
	
	
	typedef [v1_enum] enum VwBulNum {
		kvbnNone = 0,
		kvbnNumberBase = 10,	
		kvbnArabic = kvbnNumberBase,
		kvbnRomanUpper,
		kvbnRomanLower,
		kvbnLetterUpper,
		kvbnLetterLower,
		kvbnArabic01,
		kvbnNumberMax,
		
		
		kvbnBulletBase = 100,	
		kvbnBullet = kvbnBulletBase,
		kvbnBulletMax = kvbnBulletBase + 100 
	} VwBulNum; 

	
	
	
	
	
	
	
	

	
	
	

	

	

	
	
	

	
	
	typedef [v1_enum] enum VwStyleProperty
	{
	
	

		kspNamedStyle = 133,
		kspMarginLeading = 19,
		kspMarginTrailing = 20,
		kspMarginTop = 21,
		kspMarginBottom = 22,
		kspMaxLines = 151,

		kspWsStyle = 156,
		kspRelLineHeight = 160,
	} VwStyleProperty;

	
	
	typedef [v1_enum] enum VwFontAbsoluteSize
	{
		kvfsXXSmall, kvfsXSmall, kvfsSmall, kvfsNormal, kvfsLarge,
		kvfsXLarge, kvfsXXLarge, kvfsSmaller, kvfsLarger
	} VwFontAbsoluteSize;

	
	
	typedef [v1_enum] enum VwFontWeight {
		kvfw100 = 100,
		kvfw200 = 200,
		kvfw300 = 300,
		kvfw400 = 400,
		kvfw500 = 500,
		kvfw600 = 600,
		kvfw700 = 700,
		kvfw800 = 800,
		kvfw900 = 900,
		kvfwNormal = 400,
		kvfwBold = 700,
		kvfwBolder = -1,
		kvfwLighter = -2
	} VwFontWeight;


	
	
	typedef [v1_enum] enum VwSpecialAttrTags
	{
		
		
		ktagNotAnAttr = -1,
		
		
		ktagGapInAttrs = -2
	} VwSpecialAttrTags;












#line 1598 "c:\\fwrepo\\fw\\src\\views\\Views.idh"

	
	
	typedef [v1_enum] enum VwSelectionState
	{
		vssDisabled, 
		vssOutOfFocus, 
		vssEnabled, 
		vssLim,
	} VwSelectionState;

	
	
	typedef [v1_enum] enum VwPrepDrawResult
	{
		kxpdrNormal, 
		kxpdrAdjust, 
		kxpdrInvalidate, 
		kxpdrLim,
	} VwPrepDrawResult; 

	
	typedef [v1_enum] enum VwBoundaryMark
	{
		none,	
		endOfParagraph,	
		endOfSection, 
		endOfParagraphHighlighted, 
		endofSectionHighlighted, 
	} VwBoundaryMark;

	




































	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IVwRootBox") cpp_quote(",") cpp_quote("A8944421-3A75-4DD5-A469-2EE251228A26") cpp_quote(");") [ uuid("A8944421-3A75-4DD5-A469-2EE251228A26"), object, pointer_default(unique) ] interface IVwRootBox : IVwNotifyChange
	{
		

		
		

		
		
		HRESULT SetSite(
			[in] IVwRootSite * pvrs);
		
		[propget] HRESULT DataAccess(
			[out, retval] ISilDataAccess ** ppsda);
		
		
		
		[propputref] HRESULT DataAccess(
			[in] ISilDataAccess * psda);

		
		

		
		
		
		
		
		
		
		
		HRESULT SetRootObjects(
			[in, size_is(chvo)] HVO * prghvo,
			[in, size_is(chvo)] IVwViewConstructor ** prgpvwvc,
			[in, size_is(chvo)] int * prgfrag,
			[in] IVwStylesheet * pss,
			[in] int chvo);
		
		HRESULT SetRootObject(
			[in] HVO hvo,
			[in] IVwViewConstructor * pvwvc,
			[in] int frag,
			[in] IVwStylesheet * pss);

		
		
		
		
		
		

		
		HRESULT SetRootVariant(
			[in] VARIANT v,
			[in] IVwStylesheet * pss,
			[in] IVwViewConstructor * pvwvc,
			[in] int frag);

		
		
		
		
		
		
		
		
		
		
		
		
		

		
		HRESULT SetRootString(
			[in] ITsString * ptss,
			[in] IVwStylesheet * pss,
			[in] IVwViewConstructor * pvwvc,
			[in] int frag);

		
		[propget] HRESULT Overlay(
			[out, retval] IVwOverlay ** ppvo);
		
		
		
		[propputref] HRESULT Overlay(
			[in] IVwOverlay * pvo);

		
		
		

		
		HRESULT GetRootVariant(
			[out, retval] VARIANT * pv);

		

		
		
		

		
		HRESULT Serialize(
			[in] IStream* pstrm);
		
		

		
		HRESULT Deserialize(
			[in] IStream* pstrm);

		
		
		
		
		
		HRESULT WriteWpx(
			[in] IStream * pstrm);

		
		[propget] HRESULT Selection(
			[out, retval] IVwSelection ** ppsel);

		
		
		
		HRESULT DestroySelection();

		
		
		

		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		

		
		
		
		
		
		
		
		

		

		
		
		
		
		HRESULT MakeTextSelection(
			[in] int ihvoRoot,
			[in] int cvlsi,
			[in, size_is(cvlsi)] VwSelLevInfo * prgvsli,
			[in] int tagTextProp,
			[in] int cpropPrevious,
			[in] int ichAnchor,
			[in] int ichEnd,
			[in] int ws,
			[in] ComBool fAssocPrev,
			[in] int ihvoEnd,
			[in] ITsTextProps * pttpIns,
			[in] ComBool fInstall,
			[out, retval] IVwSelection ** ppsel);

		
		HRESULT MakeRangeSelection(
			[in] IVwSelection * pselAnchor,
			[in] IVwSelection * pselEnd,
			[in] ComBool fInstall,
			[out, retval] IVwSelection ** ppsel);

		
		
		
		
		
		
		
		
		
		
		
		HRESULT MakeSimpleSel(
			[in] ComBool fInitial,
			[in] ComBool fEdit,
			[in] ComBool fRange,
			[in] ComBool fInstall,
			[out, retval] IVwSelection ** ppsel);

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		HRESULT MakeTextSelInObj(
			[in] int ihvoRoot,
			[in] int cvsli,
			[in, size_is(cvsli)] VwSelLevInfo * prgvsli,
			[in] int cvsliEnd,
			[in, size_is(cvsliEnd)] VwSelLevInfo * prgvsliEnd,
			[in] ComBool fInitial,
			[in] ComBool fEdit,
			[in] ComBool fRange,
			[in] ComBool fWholeObj,
			[in] ComBool fInstall,
			[out, retval] IVwSelection ** ppsel);

		
		
		
		
		
		
		HRESULT MakeSelInObj(
			[in] int ihvoRoot,
			[in] int cvsli,
			[in, size_is(cvsli)] VwSelLevInfo * prgvsli,
			[in] int tag,
			[in] ComBool fInstall,
			[out, retval] IVwSelection ** ppsel);

		
		
		
		
		
		HRESULT MakeSelAt(
			[in] int xd,
			[in] int yd,
			[in] RECT rcSrc,
			[in] RECT rcDst,
			[in] ComBool fInstall,
			[out, retval] IVwSelection ** ppsel);

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		HRESULT MakeSelInBox(
			[in] IVwSelection * pselInit,
			[in] ComBool fEndPoint,
			[in] int iLevel,
			[in] int iBox,
			[in] ComBool fInitial,
			[in] ComBool fRange,
			[in] ComBool fInstall,
			[out, retval] IVwSelection ** ppsel);

		
		
		
		
		[propget] HRESULT IsClickInText(
			[in] int xd,
			[in] int yd,
			[in] RECT rcSrc,
			[in] RECT rcDst,
			[out, retval] ComBool * pfInText);

		
		
		[propget] HRESULT IsClickInObject(
			[in] int xd,
			[in] int yd,
			[in] RECT rcSrc,
			[in] RECT rcDst,
			[out] int * podt,
			[out, retval] ComBool * pfInObject);

		[propget] HRESULT IsClickInOverlayTag(
			[in] int xd,
			[in] int yd,
			[in] RECT rcSrc1,
			[in] RECT rcDst1,
			[out] int * piGuid,
			[out] BSTR * pbstrGuids,
			[out] RECT * prcTag,
			[out] RECT * prcAllTags,
			[out] ComBool * pfOpeningTag,
			[out, retval] ComBool * pfInOverlayTag);

		

		
		
		
		
		
		
		
		
		
		
		
		
		HRESULT OnTyping(
			[in] IVwGraphics * pvg,
			[in] BSTR bstrInput,
			[in] VwShiftStatus ss,
			[in, out] int * pwsPending);

		
		
		
		
		HRESULT DeleteRangeIfComplex(
			[in] IVwGraphics * pvg,
			[out] ComBool * pfWasComplex);

		

		
		HRESULT OnChar(
			[in] int chw);
		
		HRESULT OnSysChar(
			[in] int chw);
		
		
		
		
		
		[custom("842883D3-DC67-45cf-B968-E763D37A7A19", "true")]
		HRESULT OnExtendedKey(
			[in] int chw,
			[in] VwShiftStatus ss,
			[in] int nFlags);
		
		
		
		
		HRESULT FlashInsertionPoint();
		
		
		
		
		
		HRESULT MouseDown(
			[in] int xd,
			[in] int yd,
			[in] RECT rcSrc,
			[in] RECT rcDst);
		
		
		
		
		
		HRESULT MouseDblClk(
			[in] int xd,
			[in] int yd,
			[in] RECT rcSrc,
			[in] RECT rcDst);
		
		
		
		
		HRESULT MouseMoveDrag(
			[in] int xd,
			[in] int yd,
			[in] RECT rcSrc,
			[in] RECT rcDst);
		
		
		
		
		HRESULT MouseDownExtended(
			[in] int xd,
			[in] int yd,
			[in] RECT rcSrc,
			[in] RECT rcDst);
		
		
		
		HRESULT MouseUp( 
			[in] int xd,
			[in] int yd,
			[in] RECT rcSrc,
			[in] RECT rcDst);

		
		
		
		
		HRESULT Activate( 
			[in] VwSelectionState vss);

		
		[propget] HRESULT SelectionState(
			[out, retval] VwSelectionState * pvss);

		
		
		

		
		
		
		
		
		
		
		
		
		
		
		HRESULT PrepareToDraw(
			[in] IVwGraphics * pvg,
			[in] RECT rcSrc,
			[in] RECT rcDst,
			[out, retval] VwPrepDrawResult * pxpdr);

		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		

		
		HRESULT DrawRoot(
			[in] IVwGraphics * pvg,
			[in] RECT rcSrc,
			[in] RECT rcDst,
			[in] ComBool fDrawSel);
		
		
		HRESULT Layout(
			[in] IVwGraphics * pvg,
			[in] int dxsAvailWidth);
		
		[propget] HRESULT Height(
			[out, retval] int * pdysHeight);
		
		[propget] HRESULT Width(
			[out, retval] int * pdxsWidth);

		
		
		HRESULT InitializePrinting(
			[in] IVwPrintContext * pvpc);

		
		
		HRESULT GetTotalPrintPages(
			[in] IVwPrintContext * pvpc,
			[out, retval] int *pcPageTotal);

		
		
		
		HRESULT PrintSinglePage(
			[in] IVwPrintContext * pvpc,
			[in] int nPageNo);

		

		
		[propget] HRESULT Site(
			[out, retval] IVwRootSite ** ppvrs);

		

		
		
		
		
		HRESULT LoseFocus(
			[out, retval] ComBool * pfOk);

		

		
		
		
		
		
		HRESULT Close();

		

		

		

		

		
		
		

		
		
		
		
		HRESULT Reconstruct();

		
		
		
		
		HRESULT OnStylesheetChange();

		
		HRESULT DrawingErrors(
			[in] IVwGraphics * pvg);

		
		[propget] HRESULT Stylesheet(
			[out, retval] IVwStylesheet ** ppvss);

		
		
		
		

		
		
		
		
		HRESULT SetTableColWidths(
			[in, size_is(cvlen)] VwLength * prgvlen,
			[in] int cvlen);

		
		HRESULT IsDirty(
			[out, retval] ComBool * pfDirty);

		
		
		
		
		
		[propget] HRESULT XdPos(
			[out, retval] int * pxdPos);

		
		
		
		
		
		
		[propget] HRESULT Synchronizer(
			[out, retval] IVwSynchronizer ** ppsync);
		
		
		
		
		

		
		HRESULT GetRootObject(
			[out] HVO * phvo,
			[out] IVwViewConstructor ** ppvwvc,
			[out] int * pfrag,
			[out] IVwStylesheet ** ppss);

		
		
		HRESULT DrawRoot2(
			[in] IVwGraphics * pvg,
			[in] RECT rcSrc,
			[in] RECT rcDst,
			[in] ComBool fDrawSel,
			[in] int ysTop,
			[in] int dysHeight);

		
		
		
		
		
		
		
		[propget] HRESULT MaxParasToScan(
			[out, retval] int * pcParas);
		[propput] HRESULT MaxParasToScan(
			[in] int cParas);

		
		
		
		HRESULT DoSpellCheckStep(
			[out, retval] ComBool * pfComplete);

		
		
		
		
		HRESULT IsSpellCheckComplete(
			[out, retval] ComBool * pfComplete);

		
		
		
		
		[propget] HRESULT IsCompositionInProgress(
			[out, retval] ComBool * pfInProgress);

		
		
		
		[propget] HRESULT IsPropChangedInProgress(
			[out, retval] ComBool * pfInProgress);

		
		HRESULT RestartSpellChecking();

		
		HRESULT SetSpellingRepository(
			[in] IGetSpellChecker * pgsp);
	}


	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("705C1A9A-D6DC-4C3F-9B29-85F0C4F4B7BE") cpp_quote(",") cpp_quote("VwRootBox") cpp_quote(");") [ uuid(705C1A9A-D6DC-4C3F-9B29-85F0C4F4B7BE) ] coclass VwRootBox
	{
		interface IVwRootBox;
	};
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("73BCAB14-2537-4b7d-B1C7-7E3DD7A089AD") cpp_quote(",") cpp_quote("VwInvertedRootBox") cpp_quote(");") [ uuid(73BCAB14-2537-4b7d-B1C7-7E3DD7A089AD) ] coclass VwInvertedRootBox
	{
		interface IVwRootBox;
	};
#line 2400 "c:\\fwrepo\\fw\\src\\views\\Views.idh"

	

























	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IVwViewConstructor") cpp_quote(",") cpp_quote("5b1a08f6-9af9-46f9-9fd7-1011a3039191") cpp_quote(");") [ uuid("5b1a08f6-9af9-46f9-9fd7-1011a3039191"), object, pointer_default(unique) ] interface IVwViewConstructor : IUnknown
	{
		
		
		
		
		
		
		
		
		
		
		HRESULT Display(
			[in] IVwEnv * pvwenv,
			[in] HVO hvo,
			[in] int frag);
		
		
		
		
		
		
		
		
		
		
		
		
		HRESULT DisplayVec(
			[in] IVwEnv * pvwenv,
			[in] HVO hvo,
			[in] int tag,
			[in] int frag);

		
		
		
		

		
		
		

		
		
		

		
		
		
		
		
		
		HRESULT DisplayVariant(
			[in] IVwEnv * pvwenv,
			[in] int tag,
			[in] int frag,
			[out, retval] ITsString ** pptss);
		
		
		
		
		HRESULT DisplayPicture(
			[in] IVwEnv * pvwenv,
			[in] int hvo,
			[in] int tag,
			[in] int val,
			[in] int frag,
			[out, retval] IPicture ** ppPict);

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		HRESULT UpdateProp(
			[in] IVwSelection * pvwsel,
			[in] HVO hvo,
			[in] int tag,
			[in] int frag,
			[in] ITsString * ptssVal,
			[out, retval] ITsString ** pptssRepVal);

		
		
		
		
		

		
		
		
		

		
		
		
		
		
		

		
		
		

		
		
		
		
		HRESULT EstimateHeight(
			[in] HVO hvo,
			[in] int frag,
			[in] int dxAvailWidth,
			[out, retval] int * pdyHeight);

		
		
		
		
		
		
		
		
		
		
		
		

		HRESULT LoadDataFor(
			[in] IVwEnv * pvwenv,
			[in, size_is(chvo)] HVO * prghvo,
			[in] int chvo,
			[in] HVO hvoParent,
			[in] int tag,
			[in] int frag,
			[in] int ihvoMin);

		
		
		
		
		
		
		

		
		
		
		
		
		
		HRESULT GetStrForGuid(
			[in] BSTR bstrGuid,
			[out, retval] ITsString ** pptss);

		
		
		
		
		
		
		

		
		
		HRESULT DoHotLinkAction(
			[in] BSTR bstrData,
			[in] ISilDataAccess * psda);

		
		
		HRESULT GetIdFromGuid(
			[in] ISilDataAccess * psda,
			[in] GUID * puid,
			[out, retval] HVO * phvo);

		
		
		
		
		
		
		
		
		HRESULT DisplayEmbeddedObject(
			[in] IVwEnv * pvwenv,
			[in] HVO hvo);

		
		
		
		
		HRESULT UpdateRootBoxTextProps(
			[in] ITsTextProps * pttp,
			[out, retval] ITsTextProps ** ppttp);
	}

	
	typedef [v1_enum] enum VwScrollSelOpts
	{
		kssoDefault = 1,	
							
		kssoNearTop = 2,	
							
		kssoTop = 3,		


		kssoBoth = 4, 

	} VwScrollSelOpts;

	





































	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IVwRootSite") cpp_quote(",") cpp_quote("C999413C-28C8-481c-9543-B06C92B812D1") cpp_quote(");") [ uuid("C999413C-28C8-481c-9543-B06C92B812D1"), object, pointer_default(unique) ] interface IVwRootSite : IUnknown
	{
		
		
		HRESULT InvalidateRect(
			[in] IVwRootBox * pRoot, 
			[in] int xsLeft,
			[in] int ysTop,
			[in] int dxsWidth,
			[in] int dysHeight);
		
		
		

		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		HRESULT GetGraphics(
			[in] IVwRootBox * pRoot, 
			[out] IVwGraphics ** ppvg,
			[out] RECT * prcSrcRoot,
			[out] RECT * prcDstRoot);
		
		
		[propget] HRESULT LayoutGraphics(
			[in] IVwRootBox * pRoot,
			[out, retval] IVwGraphics ** ppvg);
		
		
		
		[propget] HRESULT ScreenGraphics(
			[in] IVwRootBox * pRoot,
			[out, retval] IVwGraphics ** ppvg);
		
		
		HRESULT GetTransformAtDst(
			[in] IVwRootBox * pRoot, 
			[in] POINT pt,
			[out] RECT * prcSrcRoot,
			[out] RECT * prcDstRoot);
		
		
		HRESULT GetTransformAtSrc(
			[in] IVwRootBox * pRoot, 
			[in] POINT pt,
			[out] RECT * prcSrcRoot,
			[out] RECT * prcDstRoot);

		
		
		
		
		
		HRESULT ReleaseGraphics(
			[in] IVwRootBox * pRoot, 
			[in] IVwGraphics * pvg);

		

		
		
		HRESULT GetAvailWidth(
			[in] IVwRootBox * pRoot, 
			[out, retval] int * ptwWidth);

		
		
		
		
		HRESULT DoUpdates(
			[in] IVwRootBox * pRoot); 

		
		
		HRESULT RootBoxSizeChanged(
			[in] IVwRootBox * pRoot); 

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		HRESULT AdjustScrollRange(
			[in] IVwRootBox * pRoot, 
			[in] int dxdSize,
			[in] int dxdPosition,
			[in] int dydSize,
			[in] int dydPosition,
			[out, retval] ComBool * pfForcedScroll);

		
		HRESULT SelectionChanged(
			[in] IVwRootBox * pRoot, 
			[in] IVwSelection * pvwselNew);

		
		HRESULT OverlayChanged(
			[in] IVwRootBox * pRoot, 
			[in] IVwOverlay * pvo);

		
		
		[propget] HRESULT SemiTagging(
			[in] IVwRootBox * pRoot, 
			[out, retval] ComBool *pf);

		
		HRESULT ScreenToClient(
			[in] IVwRootBox * pRoot, 
			[in, out] POINT * ppnt);

		
		HRESULT ClientToScreen(
			[in] IVwRootBox * pRoot, 
			[in, out] POINT * ppnt);

		
		
		
		
		
		HRESULT GetAndClearPendingWs(
			[in] IVwRootBox * pRoot, 
			[out, retval] int * pws);

		
		
		
		
		HRESULT IsOkToMakeLazy(
			[in] IVwRootBox * pRoot, 
			[in] int ydTop,
			[in] int ydBottom,
			[out, retval] ComBool * pfOK);

		
		
		
		
		
		
		
		
		

		
		

		
		

		
		
		
		
		

		
		HRESULT OnProblemDeletion(
			[in] IVwSelection * psel,
			[in] VwDelProbType dpt,
			[out, retval] VwDelProbResponse * pdpr);

		
		
		
		
		

		
		
		

		
		
		
		
		

		
		
		

		HRESULT OnInsertDiffParas(
			[in] IVwRootBox * pRoot, 
			[in] ITsTextProps * pttpDest, 
			[in] int cPara, 
			[in, size_is(cPara)] ITsTextProps ** prgpttpSrc, 
			[in, size_is(cPara)] ITsString ** prgptssSrc, 
			[in] ITsString * ptssTrailing, 
			[out, retval] VwInsertDiffParaResponse * pidpr);

		

		HRESULT OnInsertDiffPara(
			[in] IVwRootBox * pRoot, 
			[in] ITsTextProps * pttpDest, 
			[in] ITsTextProps * prgpttpSrc, 
			[in] ITsString * prgptssSrc, 
			[in] ITsString * ptssTrailing, 
			[out, retval] VwInsertDiffParaResponse * pidpr);

		
		
		
		
		
		
		
		
		
		
		
		[propget] HRESULT TextRepOfObj(
			[in] GUID * pguid,
			[out, retval] BSTR * pbstrRep);

		
		
		
		

		
		[propget] HRESULT MakeObjFromText(
			[in] BSTR bstrText,
			[in] IVwSelection * pselDst,
			[out] int * podt,
			[out, retval] GUID * pGuid);

		
		
		HRESULT ScrollSelectionIntoView(
			[in] IVwSelection * psel,
			[in] VwScrollSelOpts ssoFlag,
			[out, retval] ComBool * pfRet);

		
		[propget] HRESULT RootBox(
			[out, retval] IVwRootBox ** prootb);

		
		[propget] HRESULT Hwnd(
			[out, retval] DWORD * phwnd);

		
		
		
		
		
		HRESULT RequestSelectionAtEndOfUow(
			[in] IVwRootBox * prootb,
			[in] int ihvoRoot,
			[in] int cvlsi,
			[in, size_is(cvlsi)] VwSelLevInfo * prgvsli,
			[in] int tagTextProp,
			[in] int cpropPrevious,
			[in] int ich,
			[in] int wsAlt,
			[in] ComBool fAssocPrev,
			[in] ITsTextProps * selProps);
	};

	
	typedef [v1_enum] enum VwConcParaOpts
	{
		kcpoBold = 1, 
		kcpoAlign = 2, 
		kcpoDefault = 3, 
		
	} VwConcParaOpts;

	
	typedef struct DispPropOverride
	{
		LgCharRenderProps chrp;
		int ichMin;
		int ichLim;
	} DispPropOverride;


	






































	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IVwEnv") cpp_quote(",") cpp_quote("92B462E8-75D5-42c1-8B63-84878E8964C0") cpp_quote(");") [ uuid("92B462E8-75D5-42c1-8B63-84878E8964C0"), object, pointer_default(unique) ] interface IVwEnv : IUnknown
	{
		
		
		
		
		
		
		
		
		
		
		HRESULT AddObjProp(
			[in] int tag,
			[in] IVwViewConstructor * pvwvc,
			[in] int frag);
		
		
		
		HRESULT AddObjVec(
			[in] int tag,
			[in] IVwViewConstructor * pvwvc,
			[in] int frag);
		
		
		
		
		HRESULT AddObjVecItems(
			[in] int tag,
			[in] IVwViewConstructor * pvwvc,
			[in] int frag);

		
		
		
		
		HRESULT AddReversedObjVecItems(
			[in] int tag,
			[in] IVwViewConstructor * pvwvc,
			[in] int frag);

		
		
		

		
		
		HRESULT AddObj(
			[in] HVO hvo,
			[in] IVwViewConstructor * pvwvc,
			[in] int frag);

		
		
		
		
		
		

		
		HRESULT AddLazyVecItems(
			[in] int tag,
			[in] IVwViewConstructor * pvwvc,
			[in] int frag);

		
		
		
		
		
		
		

		
		HRESULT AddLazyItems(
			[in, size_is(chvo)] HVO * prghvo,
			[in] int chvo,
			[in] IVwViewConstructor * pvwvc,
			[in] int frag);

		

		
		
		
		
		
		

		
		
		
		

		
		

		
		
		HRESULT AddProp(
			[in] int tag,
			[in] IVwViewConstructor * pvwvc,
			[in] int frag);
		
		
		
		
		
		
		
		

		
		HRESULT AddDerivedProp(
			[in, size_is(ctag)] int * prgtag,
			[in] int ctag,
			[in] IVwViewConstructor * pvwvc,
			[in] int frag);

		
		
		
		HRESULT NoteDependency(
			[in, size_is(chvo)] HVO * prghvo,
			[in, size_is(chvo)] PropTag * prgtag,
			[in] int chvo);

		
		
		
		
		
		
		
		HRESULT NoteStringValDependency(
			[in] HVO hvo,
			[in] PropTag tag,
			[in] int ws,
			[in] ITsString * ptssVal);

		

		
		
		HRESULT AddStringProp(
			[in] int tag,
			[in] IVwViewConstructor * pvwvc);

		
		HRESULT AddUnicodeProp(
			[in] int tag,
			[in] int ws,
			[in] IVwViewConstructor * pvwvc);

		
		
		HRESULT AddIntProp(
			[in] int tag);

		
		
		
		
		
		HRESULT AddIntPropPic(
			[in] int tag,
			[in] IVwViewConstructor * pvc,
			[in] int frag,
			[in] int nMin,
			[in] int nMax);
		
		

		
		
		HRESULT AddStringAltMember(
			[in] int tag,
			[in] int ws,
			[in] IVwViewConstructor * pvwvc);

		
		

		
		
		

		
		
		

		
		HRESULT AddStringAlt(
			[in] int tag);

		
		
		

		
		
		

		
		HRESULT AddStringAltSeq(
			[in] int tag,
			[in, size_is(cws)] int * prgenc,
			[in] int cws);

		
		HRESULT AddString(
			[in] ITsString * pss);

		
		
		
		
		
		HRESULT AddTimeProp(
			[in] int tag,
			[in] DWORD flags);

		
		
		HRESULT CurrentObject(
			[out, retval] HVO * phvo);

		
		
		
		[propget] HRESULT OpenObject(
			[out, retval] HVO * phvoRet);

		
		
		
		[propget] HRESULT EmbeddingLevel(
			[out, retval] int * pchvo);
		
		

		
		

		
		
		

		
		HRESULT GetOuterObject(
			[in] int ichvoLevel,
			[out] HVO * phvo,
			[out] int * ptag,
			[out] int * pihvo);
		
		
		[propget] HRESULT DataAccess(
			[out, retval] ISilDataAccess ** ppsda);

		
		
		
		

		
		
		

		
		
		
		
		

		
		HRESULT AddWindow(
			[in] IVwEmbeddedWindow * pew,
			[in] int dmpAscent,
			[in] ComBool fJustifyRight,
			[in] ComBool fAutoShow);
		
		HRESULT AddSeparatorBar();
		
		
		
		HRESULT AddSimpleRect(
			[in] int rgb,
			[in] int dmpWidth,
			[in] int dmpHeight,
			[in] int dmpBaselineOffset);

		

		
		HRESULT OpenDiv();
		
		HRESULT CloseDiv();
		
		HRESULT OpenParagraph();
		
		
		HRESULT OpenTaggedPara();

		

		
		
		
		
		HRESULT OpenMappedPara();

		
		HRESULT OpenMappedTaggedPara();

		

		
		
		
		

		

		
		
		
		
		
		
		
		HRESULT OpenConcPara(
			[in] int ichMinItem,
			[in] int ichLimItem,
			[in] VwConcParaOpts cpoFlags,
			[in] int dmpAlign);

		
		
		
		HRESULT OpenOverridePara(
			[in] int cOverrideProperties,
			[in, size_is(cOverrideProperties)] DispPropOverride *prgOverrideProperties);

		
		HRESULT CloseParagraph();

		
		HRESULT OpenInnerPile();
		
		HRESULT CloseInnerPile();
		
		HRESULT OpenSpan();
		
		HRESULT CloseSpan();
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		HRESULT OpenTable(
			[in] int cCols,
			[in] VwLength vlWidth,
			[in] int mpBorder,
			[in] VwAlignment vwalign,
			[in] VwFramePosition frmpos,
			[in] VwRule vwrule,
			[in] int mpSpacing,
			[in] int mpPadding,
			[in] ComBool fSelectOneCol);
		
		HRESULT CloseTable();
		
		HRESULT OpenTableRow();
		
		HRESULT CloseTableRow();
		
		
		
		HRESULT OpenTableCell(
			[in] int nRowSpan,
			[in] int nColSpan);
		
		HRESULT CloseTableCell();
		
		HRESULT OpenTableHeaderCell(
			[in] int nRowSpan,
			[in] int nColSpan);
		
		HRESULT CloseTableHeaderCell();

		
		
		
		

		
		
		HRESULT MakeColumns(
			[in] int nColSpan,
			[in] VwLength vlWidth);
		
		
		
		
		HRESULT MakeColumnGroup( 
			[in] int nColSpan,
			[in] VwLength vlWidth);
		
		
		HRESULT OpenTableHeader();
		
		HRESULT CloseTableHeader();
		
		
		
		
		HRESULT OpenTableFooter();
		
		HRESULT CloseTableFooter();
		
		
		
		
		HRESULT OpenTableBody();
		
		HRESULT CloseTableBody();

		
		
		
		
		
		
		
		

		
		
		
		
		
		[propput] HRESULT IntProperty(
			[in] int tpt, 
			[in] int tpv,
			[in] int nValue);

		
		
		
		
		
		
		[propput] HRESULT StringProperty(
			[in] int sp, 
			[in] BSTR bstrValue);

		
		
		
		
		
		
		
		
		
		[propput] HRESULT Props(
			[in] ITsTextProps * pttp);

		

		
		
		
		
		
		
		
		HRESULT get_StringWidth(
			[in] ITsString * ptss,
			[in] ITsTextProps * pttp,
			[out] int * dmpx,
			[out] int * dmpy);

		
		
		
		
		
		
		
		
		HRESULT AddPictureWithCaption(
			[in] IPicture * ppict,
			[in] PropTag tag,
			[in] ITsTextProps * pttpCaption,
			[in] HVO hvoCmFile,
			[in] int ws,
			[in] int dxmpWidth,
			[in] int dympHeight,
			[in] IVwViewConstructor * pvwvc);

		
		
		
		
		
		
		
		
		HRESULT AddPicture(
			[in] IPicture * ppict,
			[in] PropTag tag,
			[in] int dxmpWidth,
			[in] int dympHeight);

		
		HRESULT SetParagraphMark(
			[in] VwBoundaryMark boundaryMark);
		
		
		
		
		
		
		
		
		HRESULT EmptyParagraphBehavior(
			[in] int behavior);
		
		HRESULT IsParagraphOpen(
			[out, retval] ComBool * pfRet);
	};


	

































	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IVwEmbeddedWindow") cpp_quote(",") cpp_quote("f6d10646-c00c-11d2-8078-0000c0fb81b5") cpp_quote(");") [ uuid("f6d10646-c00c-11d2-8078-0000c0fb81b5"), object, pointer_default(unique) ] interface IVwEmbeddedWindow : IUnknown
	{
		
		
		
		
		
		
		HRESULT MoveWindow(
			[in] IVwGraphics* pvg,
			[in] int xdLeft,
			[in] int ydTop,
			[in] int dxdWidth,
			[in] int dydHeight);

		
		
		
		
		[propget] HRESULT IsWindowVisible(
			[out, retval] ComBool* pfRet);
		
		
		
		HRESULT ShowWindow();
		
		

		
		HRESULT DrawWindow(
			[in] IVwGraphics* pvg);
		

		
		
		[propget] HRESULT Width(
			[out, retval] int* pnTwips);
		
		[propget] HRESULT Height(
			[out, retval] int* pnTwips);
	};

	























	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IVwSelection") cpp_quote(",") cpp_quote("4F8B678D-C5BA-4a2f-B9B3-2780956E3616") cpp_quote(");") [ uuid("4F8B678D-C5BA-4a2f-B9B3-2780956E3616"), object, pointer_default(unique) ] interface IVwSelection : IUnknown
	{
		
		[propget] HRESULT IsRange(
			[out, retval] ComBool* pfRet);
		
		
		
		
		
		

		
		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		HRESULT GetSelectionProps(
			[in] int cttpMax,
			[in, out, size_is(cttpMax)] ITsTextProps ** prgpttp,
			[in, out, size_is(cttpMax)] IVwPropertyStore ** prgpvps,
			[out] int * pcttp);

		
		
		
		HRESULT GetHardAndSoftCharProps(
			[in] int cttpMax,
			[in, out, size_is(cttpMax)] ITsTextProps ** prgpttpSel,
			[in, out, size_is(cttpMax)] IVwPropertyStore ** prgpvpsSoft,
			[out] int * pcttp);


		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		HRESULT GetParaProps(
			[in] int cttpMax,
			[in, out, size_is(cttpMax)] IVwPropertyStore ** prgpvps,
			[out] int * pcttp);

		
		
		
		
		HRESULT GetHardAndSoftParaProps(
			[in] int cttpMax,
			[in, size_is(cttpMax)] ITsTextProps ** prgpttpPara,
			[in, out, size_is(cttpMax)] ITsTextProps ** prgpttpHard,
			[in, out, size_is(cttpMax)] IVwPropertyStore ** prgpvpsSoft,
			[out] int * pcttp);

		

		
		
		
		
		HRESULT SetSelectionProps(
			[in] int cttp,
			[in, size_is(cttp)] ITsTextProps ** prgpttp);

		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		HRESULT TextSelInfo(
			[in] ComBool fEndPoint,
			[out] ITsString ** pptss,
			[out] int * pich,
			[out] ComBool * pfAssocPrev,
			[out] HVO * phvoObj,
			[out] PropTag * ptag,
			[out] int * pws);

		
		
		HRESULT CLevels(
			[in] ComBool fEndPoint, 
			[out, retval] int * pclev);

		
		
		
		
		

		
		
		
		
		
		
		

		
		
		
		HRESULT PropInfo(
			[in] ComBool fEndPoint,
			[in] int ilev,
			[out] HVO * phvoObj,
			[out] PropTag * ptag,
			[out] int * pihvo,
			[out] int * pcpropPrevious,
			[out] IVwPropertyStore ** ppvps);

		
		
		

		
		
		
		
		
		

		
		
		
		HRESULT AllTextSelInfo(
			[out] int * pihvoRoot,
			[in] int cvlsi,
			[out, size_is(cvlsi)] VwSelLevInfo * prgvsli,
			[out] PropTag * ptagTextProp,
			[out] int * pcpropPrevious,
			[out] int * pichAnchor,
			[out] int * pichEnd,
			[out] int * pws,
			[out] ComBool * pfAssocPrev,
			[out] int * pihvoEnd,
			[out] ITsTextProps ** ppttp);

		
		
		
		
		
		
		
		
		
		
		HRESULT AllSelEndInfo(
			[in] ComBool fEndPoint,
			[out] int * pihvoRoot,
			[in] int cvlsi,
			[out, size_is(cvlsi)] VwSelLevInfo * prgvsli,
			[out] PropTag * ptagTextProp,
			[out] int * pcpropPrevious,
			[out] int * pich,
			[out] int * pws,
			[out] ComBool * pfAssocPrev,
			[out] ITsTextProps ** ppttp);

		
		
		
		
		
		HRESULT CompleteEdits(
			[out] VwChangeInfo * pci,
			[out, retval] ComBool * pfOk);

		
		HRESULT ExtendToStringBoundaries();

		
		[propget] HRESULT EndBeforeAnchor(
			[out, retval] ComBool * pfRet);

		
		
		
		
		
		HRESULT Location(
			[in] IVwGraphics * pvg,
			[in] RECT rcSrc,
			[in] RECT rcDst,
			[out] RECT * prdPrimary,
			[out] RECT * prdSecondary,
			[out] ComBool * pfSplit,
			[out] ComBool * pfEndBeforeAnchor);

		
		

		
		
		
		
		
		
		

		
		
		
		

		HRESULT GetParaLocation(
			[out] RECT * prdLoc);

		
		
		
		
		HRESULT ReplaceWithTsString(
			[in] ITsString * ptss);

		
		
		HRESULT GetSelectionString(
			[out] ITsString ** pptss,
			[in] BSTR bstrSep );

		
		
		
		HRESULT GetFirstParaString(
			[out] ITsString ** pptss,
			[in] BSTR bstrSep,
			[out] ComBool * pfGotItAll );

		
		HRESULT SetIPLocation(
			[in] ComBool fTopLine,
			[in] int xdPos);

		
		
		[propget] HRESULT CanFormatPara(
			[out, retval] ComBool * pfRet);
		
		
		[propget] HRESULT CanFormatChar(
			[out, retval] ComBool * pfRet);
		
		
		[propget] HRESULT CanFormatOverlay(
			[out, retval] ComBool * pfRet);
		
		HRESULT Install();
		
		
		[propget] HRESULT Follows(
			[in] IVwSelection * psel,
			[out, retval] ComBool * pfFollows);
		
		
		[propget] HRESULT IsValid(
			[out, retval] ComBool * pfValid);
		
		
		
		
		[propget] HRESULT ParagraphOffset(
			[in] ComBool fEndPoint,
			[out, retval] int * pich);
		
		[propget] HRESULT AssocPrev(
			[out, retval] ComBool * pfValue);
		
		
		
		
		[propput] HRESULT AssocPrev(
			[in] ComBool fValue);
		
		[propget] HRESULT SelType(
			[out, retval] VwSelType * piType);
		
		[propget] HRESULT RootBox(
			[out, retval] IVwRootBox ** pprootb);
		
		
		
		
		HRESULT GrowToWord(
			[out, retval] IVwSelection ** ppsel);
		
		HRESULT EndPoint(
			[in] ComBool fEndPoint,
			[out, retval] IVwSelection ** ppsel);
		
		
		
		HRESULT SetTypingProps(
			[in] ITsTextProps * pttp);

		
		[propget] HRESULT BoxDepth(
			[in] ComBool fEndPoint,
			[out, retval] int * pcDepth);

		
		
		[propget] HRESULT BoxIndex(
			[in] ComBool fEndPoint,
			[in] int iLevel,
			[out, retval] int * piAtLevel);

		
		[propget] HRESULT BoxCount(
			[in] ComBool fEndPoint,
			[in] int iLevel,
			[out, retval] int * pcAtLevel);

		
		
		[propget] HRESULT BoxType(
			[in] ComBool fEndPoint,
			[in] int iLevel,
			[out, retval] VwBoxType * pvbt);

		
		
		[propget] HRESULT IsEditable(
			[out, retval] ComBool * pfEditable);

		
		
		[propget] HRESULT IsEnabled(
			[out, retval] ComBool * pfEnabled);
	};

	
	typedef [v1_enum] enum StyleType
	{
		kstParagraph = 0,
		kstCharacter,
		kstLim
	} StyleType;


	



















	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IVwStylesheet") cpp_quote(",") cpp_quote("D77C0DBC-C7BC-441d-9587-1E3664E1BCD3") cpp_quote(");") [ uuid("D77C0DBC-C7BC-441d-9587-1E3664E1BCD3"), object, pointer_default(unique) ] interface IVwStylesheet : IUnknown
	{
		
		
		HRESULT GetDefaultBasedOnStyleName(
			[out, retval] BSTR * pbstrNormal);

		
		HRESULT GetDefaultStyleForContext(
			[in] int nContext,
			[in] ComBool fCharStyle,
			[out, retval] BSTR * pbstrStyleName);

		
		
		HRESULT PutStyle(
			[in] BSTR bstrName,
			[in] BSTR bstrUsage,
			[in] HVO hvoStyle,
			[in] HVO hvoBasedOn,
			[in] HVO hvoNext,
			[in] int nType,
			[in] ComBool fBuiltIn,
			[in] ComBool fModified,
			[in] ITsTextProps * pttp);
		

		
		
		
		
		
		HRESULT GetStyleRgch(
			[in] int cch,
			[in, size_is(cch)] OLECHAR * prgchName,
			[out, retval] ITsTextProps ** ppttp);

		
		
		
		
		HRESULT GetNextStyle(
			[in] BSTR bstrName,
			[out, retval] BSTR * pbstrNext);
		
		
		HRESULT GetBasedOn(
			[in] BSTR bstrName,
			[out, retval] BSTR * pbstrBasedOn);
		
		
		
		
		
		
		HRESULT GetType(
			[in] BSTR bstrName,
			[out, retval] int * pnType);

		
		
		
		
		HRESULT GetContext(
			[in] BSTR bstrName,
			[out, retval] int * pnContext);

		
		
		HRESULT IsBuiltIn(
			[in] BSTR bstrName,
			[out, retval] ComBool * pfBuiltIn);

		
		
		HRESULT IsModified(
			[in] BSTR bstrName,
			[out, retval] ComBool * pfModified);

		

		
		
		
		[propget] HRESULT DataAccess(
			[out, retval] ISilDataAccess ** ppsda);

		
		HRESULT MakeNewStyle(
			[out, retval] HVO * phvoNewStyle);

		
		HRESULT Delete(
			[in] HVO hvoStyle);
		
		[propget] HRESULT CStyles(
			[out, retval] int * pcttp);
		
		[propget] HRESULT NthStyle(
			[in] int ihvo,
			[out, retval] HVO * phvo);

		
		[propget] HRESULT NthStyleName(
			[in] int ihvo,
			[out, retval] BSTR * pbstrStyleName);

		
		
		
		[propget] HRESULT NormalFontStyle(
			[out, retval] ITsTextProps ** ppttp);

		
		[propget] HRESULT IsStyleProtected(
			[in] BSTR bstrName,
			[out, retval] ComBool * pfProtected);

		
		
		
		
		HRESULT CacheProps(
			[in] int cch,
			[in, size_is(cch)] OLECHAR * prgchName,
			[in] HVO hvoStyle,
			[in] ITsTextProps * pttp);


		






















#line 4246 "c:\\fwrepo\\fw\\src\\views\\Views.idh"
	};

	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("CCE2A7ED-464C-4ec7-A0B0-E3C1F6B94C5A") cpp_quote(",") cpp_quote("VwStylesheet") cpp_quote(");") [ uuid(CCE2A7ED-464C-4ec7-A0B0-E3C1F6B94C5A) ] coclass VwStylesheet
	{
		interface IVwStylesheet;
	};
#line 4253 "c:\\fwrepo\\fw\\src\\views\\Views.idh"

	

























	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IVwPropertyStore") cpp_quote(",") cpp_quote("3D4847FE-EA2D-4255-A496-770059A134CC") cpp_quote(");") [ uuid("3D4847FE-EA2D-4255-A496-770059A134CC"), object, pointer_default(unique) ] interface IVwPropertyStore : IUnknown
	{
		
		
		
		
		
		
		[propget] HRESULT IntProperty(
			[in] int nID,
			[out, retval] int * pnValue);
		
		[propget] HRESULT StringProperty(
			[in] int sp,
			[out, retval] BSTR * bstrValue);
		
		
		
		[propget] HRESULT ChrpFor(
			[in] ITsTextProps * pttp,
			[out, retval] LgCharRenderProps * pchrp);
		
		[propputref] HRESULT Stylesheet(
			[in] IVwStylesheet * pvps);

		
		[propputref] HRESULT WritingSystemFactory(
			[in] ILgWritingSystemFactory * pwsf);

		
		[propget] HRESULT ParentStore([out, retval]IVwPropertyStore ** ppvps);

		
		
		
		[propget] HRESULT TextProps([out,retval] ITsTextProps ** ppttp);

		
		[propget] HRESULT DerivedPropertiesForTtp(
			[in] ITsTextProps * pttp,
			[out, retval] IVwPropertyStore ** ppvps);

	};

	
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("CB59916A-C532-4a57-8CB4-6E1508B4DEC1") cpp_quote(",") cpp_quote("VwPropertyStore") cpp_quote(");") [ uuid(CB59916A-C532-4a57-8CB4-6E1508B4DEC1) ] coclass VwPropertyStore
	{
		interface IVwPropertyStore;
	};
	#line 4330 "c:\\fwrepo\\fw\\src\\views\\Views.idh"

	
	typedef [v1_enum] enum VwOverlayFlags
	{
		kfofTagsUseAttribs = 1, 
		kfofLeadBracket = 2, 
		kfofLeadTag = 4, 
		kfofTrailBracket = 8, 
		kfofTrailTag = 16,	

		kgrfofTagAbove = 6, 
		kgrfofTagBelow = 24, 
		kgrfofTagAnywhere = 30, 
		kgrfofBracketAnywhere = 10, 

		kgrfofDefault = 31, 
	} VwOverlayFlags; 

	
	
	
	
	typedef [v1_enum] enum VwConst1 
	{
		kcchGuidRepLength  = 8,
	} VwConst1;
	

	
	
	
	
	
	typedef [v1_enum] enum FwOverlaySetMask
	{
		kosmAbbr =      0x01,
		kosmName =      0x02,
		kosmClrFore =   0x04,
		kosmClrBack =   0x08,
		kosmClrUnder =  0x10,
		kosmUnderType = 0x20,
		kosmHidden =    0x40,

		kosmAll =       0x7F,
	} FwOverlaySetMask;

	
























	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IVwOverlay") cpp_quote(",") cpp_quote("7D9089C1-3BB9-11d4-8078-0000C0FB81B5") cpp_quote(");") [ uuid("7D9089C1-3BB9-11d4-8078-0000C0FB81B5"), object, pointer_default(unique) ] interface IVwOverlay : IUnknown
	{
		
		[propget] HRESULT Name(
			[out, retval] BSTR * pbstr);
		
		[propput] HRESULT Name(
			[in] BSTR bstr);

		
		
		
		[propget] HRESULT Guid(
			[out, size_is(8), retval] OLECHAR * prgchGuid);
		
		[propput] HRESULT Guid(
			[in, size_is(8)] OLECHAR * prgchGuid);

		
		
		[propget] HRESULT PossListId(
			[out, retval] HVO * ppsslId);
		
		
		[propput] HRESULT PossListId(
			[in] HVO psslId);

		
		
		[propget] HRESULT Flags(
			[out, retval] VwOverlayFlags * pvof);
		
		
		[propput] HRESULT Flags(
			[in] VwOverlayFlags vof);

		
		[propget] HRESULT FontName(
			[out, retval] BSTR * pbstr);
		
		[propput] HRESULT FontName(
			[in] BSTR bstr);

		
		HRESULT FontNameRgch(
			[out, size_is(32)] OLECHAR * prgch);
		
		[propget] HRESULT FontSize(
			[out, retval] int * pmp);
		
		[propput] HRESULT FontSize(
			[in] int mp);

		
		[propget] HRESULT MaxShowTags(
			[out, retval] int * pctag); 
		
		[propput] HRESULT MaxShowTags(
			[in] int ctag);

		
		
		[propget] HRESULT CTags(
			[out, retval] int * pctag);

		
		
		
		
		
		
		
		
		
		
		
		HRESULT GetDbTagInfo(
			[in] int itag,
			[out] HVO * phvo, 
			[out] COLORREF * pclrFore,
			[out] COLORREF * pclrBack,
			[out] COLORREF * pclrUnder,
			[out] int * punt, 
			[out] ComBool * pfHidden,
			[out, size_is(8)] OLECHAR * prgchGuid);

		
		
		
		
		
		
		
		
		
		
		
		
		HRESULT SetTagInfo(
			[in, size_is(8)] OLECHAR * prgchGuid,
			[in] HVO hvo, 
			[in] int grfosm, 
			[in] BSTR bstrAbbr,
			[in] BSTR bstrName,
			[in] COLORREF clrFore,
			[in] COLORREF clrBack,
			[in] COLORREF clrUnder,
			[in] int unt,  
			[in] ComBool fHidden);

		
		
		
		
		
		
		
		
		
		
		
		HRESULT GetTagInfo(
			[in, size_is(8)] OLECHAR * prgchGuid,
			[out] HVO * phvo, 
			[out] BSTR * pbstrAbbr,
			[out] BSTR * pbstrName,
			[out] COLORREF * pclrFore,
			[out] COLORREF * pclrBack,
			[out] COLORREF * pclrUnder,
			[out] int * punt,  
			[out] ComBool * pfHidden);

		
		
		
		
		
		
		
		
		
		HRESULT GetDlgTagInfo(
			[in] int itag,
			[out] ComBool * pfHidden,
			[out] COLORREF * pclrFore,
			[out] COLORREF * pclrBack,
			[out] COLORREF * pclrUnder,
			[out] int * punt, 
			[out] BSTR * pbstrAbbr,
			[out] BSTR * pbstrName);

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		HRESULT GetDispTagInfo(
			[in, size_is(8)] OLECHAR * prgchGuid,
			[out] ComBool * pfHidden,
			[out] COLORREF * pclrFore,
			[out] COLORREF * pclrBack,
			[out] COLORREF * pclrUnder,
			[out] int * punt, 
			[out, size_is (cchMaxAbbr)] OLECHAR * prgchAbbr,
			[in] int cchMaxAbbr,
			[out] int * pcchAbbr,
			[out, size_is (cchMaxName)] OLECHAR * prgchName,
			[in] int cchMaxName,
			[out] int * pcchName);

		
		
		
		HRESULT RemoveTag(
			[in, size_is(8)] OLECHAR * prgchGuid);

		
		
		HRESULT Sort(
			[in] ComBool fByAbbr); 

		
		
		
		
		
		
		
		
		
		
		
		
		HRESULT Merge(
			[in] IVwOverlay * pvo,
			[out, retval] IVwOverlay ** ppvoMerged);
	};
	
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("73F5DB01-3D2A-11d4-8078-0000C0FB81B5") cpp_quote(",") cpp_quote("VwOverlay") cpp_quote(");") [ uuid(73F5DB01-3D2A-11d4-8078-0000C0FB81B5) ] coclass VwOverlay
	{
		interface IVwOverlay;
	};
	#line 4614 "c:\\fwrepo\\fw\\src\\views\\Views.idh"

	
	
	
	typedef [v1_enum] enum VwHeaderPositions
	{
		kvhpLeft = 1,
		kvhpRight = 2,
		kvhpOutside = 4,
		kvhpInside = 8,
		kvhpCenter = 16,
		kvhpOdd = 32,
		kvhpEven = 64,
		kvhpTop = 128,
		kvhpBottom = 256,
		kvhpFirst = 512,  
		kgrfvhpNormal = 915, 
	} VwHeaderPositions; 


	






















	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IVwPrintContext") cpp_quote(",") cpp_quote("FF2E1DC2-95A8-41c6-85F4-FFCA3A64216A") cpp_quote(");") [ uuid("FF2E1DC2-95A8-41c6-85F4-FFCA3A64216A"), object, pointer_default(unique) ] interface IVwPrintContext : IUnknown
	{
		
		[propget] HRESULT Graphics(
			[out, retval] IVwGraphics ** ppvg);
		
		
		
		[propget] HRESULT FirstPageNumber(
			[out, retval] int * pn);
		

		
		
		
		[propget] HRESULT IsPageWanted(
			[in] int nPageNo,
			[out, retval] ComBool * pfWanted);
		

		

		
		
		[propget] HRESULT AreMorePagesWanted(
			[in] int nPageNo,
			[out, retval] ComBool * pfWanted);
		
		
		[propget] HRESULT Aborted(
			[out, retval] ComBool * pfAborted);

		

		
		
		
		[propget] HRESULT Copies(
			[out, retval] int * pnCopies);

		
		
		[propget] HRESULT Collate(
			[out, retval] ComBool * pfCollate);

		
		
		
		
		
		
		
		
		
		
		[propget] HRESULT HeaderString(
			[in] VwHeaderPositions grfvhp,
			[in] int pn,
			[out, retval] ITsString ** pptss);
		
		
		
		
		
		HRESULT GetMargins(
			[out] int * pdxpLeft,
			[out] int * pdxpRight,
			[out] int * pdypHeader,
			[out] int * pdypTop,
			[out] int * pdypBottom,
			[out] int * pdypFooter);
		
		
		HRESULT OpenPage();
		
		HRESULT ClosePage();
		
		
		HRESULT OpenDoc();
		
		HRESULT CloseDoc();
		
		
		
		

		
		
		[propget] HRESULT LastPageNo(
			[out, retval] int * pnPageNo);

		
		
		

		
		
		
		
		
		[propput] HRESULT HeaderMask(
			[in] VwHeaderPositions grfvhp);
		
		
		
		HRESULT SetHeaderString(
			[in] VwHeaderPositions grfvhp,
			[in] ITsString * ptss);
		

		
		

		
		
		
		
		
		
		
		
		HRESULT SetMargins(
			[in] int dxpLeft,
			[in] int dxpRight,
			[in] int dypHeader,
			[in] int dypTop,
			[in] int dypBottom,
			[in] int dypFooter);
		
		
		
		
		
		
		
		HRESULT SetPagePrintInfo(
			[in] int nFirstPageNo, 
			[in] int nFirstPrintPage, 
			[in] int nLastPrintPage,
			[in] int nCopies, 
			[in] ComBool fCollate); 
		
		
		
		
		

		
		
		HRESULT SetGraphics(
			[in] IVwGraphics * pvg);
		
		

		
		
		HRESULT RequestAbort();
		
		
		
		
		HRESULT AbortDoc();
	};
	
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("5E9FB977-66AE-4c16-A036-1D40E7713573") cpp_quote(",") cpp_quote("VwPrintContextWin32") cpp_quote(");") [ uuid(5E9FB977-66AE-4c16-A036-1D40E7713573) ] coclass VwPrintContextWin32
	{
		interface IVwPrintContext;
	};
	#line 4826 "c:\\fwrepo\\fw\\src\\views\\Views.idh"


	

















	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IVwPattern") cpp_quote(",") cpp_quote("EFEBBD00-D418-4157-A730-C648BFFF3D8D") cpp_quote(");") [ uuid("EFEBBD00-D418-4157-A730-C648BFFF3D8D"), object, pointer_default(unique) ] interface IVwPattern : IUnknown
	{
		
		[propget] HRESULT Pattern(
			[out, retval] ITsString ** pptssPattern);
		
		
		
		
		[propputref] HRESULT Pattern(
			[in] ITsString * ptssPattern);

		
		[propget] HRESULT Overlay(
			[out, retval] IVwOverlay ** ppvo);
		
		[propputref] HRESULT Overlay(
			[in] IVwOverlay * pvo);

		
		[propget] HRESULT MatchCase(
			[out, retval] ComBool * pfMatch);
		
		[propput] HRESULT MatchCase(
			[in] ComBool fMatch);

		
		[propget] HRESULT MatchDiacritics(
			[out, retval] ComBool * pfMatch);
		
		[propput] HRESULT MatchDiacritics(
			[in] ComBool fMatch);

		
		
		[propget] HRESULT MatchWholeWord(
			[out, retval] ComBool * pfMatch);
		
		
		[propput] HRESULT MatchWholeWord(
			[in] ComBool fMatch);

		
		
		[propget] HRESULT MatchOldWritingSystem(
			[out, retval] ComBool * pfMatch);
		
		
		[propput] HRESULT MatchOldWritingSystem(
			[in] ComBool fMatch);

		
		
		

		
		
		
		[propget] HRESULT MatchExactly(
			[out, retval] ComBool * pfMatch);
		
		
		[propput] HRESULT MatchExactly(
			[in] ComBool fMatch);

		
		
		
		
		[propget] HRESULT MatchCompatibility(
			[out, retval] ComBool * pfMatch);
		
		
		
		
		[propput] HRESULT MatchCompatibility(
			[in] ComBool fMatch);

		
		

		
		
		HRESULT Find(
			[in] IVwRootBox * prootb,
			[in] ComBool fForward,
			[in] IVwSearchKiller * pxserkl);
		
		
		
		HRESULT FindFrom(
			[in] IVwSelection * psel,
			[in] ComBool fForward,
			[in] IVwSearchKiller * pxserkl);
		
		
		
		HRESULT FindNext(
			[in] ComBool fForward,
			[in] IVwSearchKiller * pxserkl);
		
		
		
		
		
		
		
		
		

		
		

		
		
		
		

		
		HRESULT FindIn(
			[in] IVwTextSource * pts,
			[in] int ichStartLog,
			[in] int ichEndLog,
			[in] ComBool fForward,
			[out] int * pichMinFoundLog,
			[out] int * pichLimFoundLog,
			[in] IVwSearchKiller * pxserkl);

		
		HRESULT Install();

		
		
		
		[propget] HRESULT Found(
			[out, retval] ComBool * pfFound);

		
		
		HRESULT GetSelection(
			[in] ComBool fInstall,
			[out, retval] IVwSelection ** ppsel);

		
		
		HRESULT CLevels(
			[out] int * pclev);

		
		
		
		
		
		
		HRESULT AllTextSelInfo(
			[out] int * pihvoRoot,
			[in] int cvlsi,
			[out, size_is(cvlsi)] VwSelLevInfo * prgvsli,
			[out] PropTag * ptagTextProp,
			[out] int * pcpropPrevious,
			[out] int * pichAnchor,
			[out] int * pichEnd,
			[out] int * pws);

		
		HRESULT MatchWhole(
			[in] IVwSelection * psel,
			[out, retval] ComBool * pfMatch);

		
		
		[propget] HRESULT Limit(
			[out, retval] IVwSelection ** ppsel);
		
		
		
		[propputref] HRESULT Limit(
			[in] IVwSelection * psel);

		
		
		
		
		
		[propget] HRESULT StartingPoint(
			[out, retval] IVwSelection ** ppsel);
		
		
		
		
		[propputref] HRESULT StartingPoint(
			[in] IVwSelection * psel);

		
		
		[propget] HRESULT SearchWindow(
			[out, retval] DWORD * phwnd);
		
		
		
		[propput] HRESULT SearchWindow(
			[in] DWORD hwnd);

		
		
		
		[propget] HRESULT StoppedAtLimit(
			[out, retval] ComBool * pfAtLimit);

		
		
		
		
		[propput] HRESULT StoppedAtLimit(
			[in] ComBool fAtLimit);

		
		[propget] HRESULT LastDirection(
			[out, retval] ComBool * pfForward);

		
		[propget] HRESULT ReplaceWith(
			[out, retval] ITsString ** pptssPattern);
		
		
		
		
		[propputref] HRESULT ReplaceWith(
			[in] ITsString * ptssPattern);

		
		
		[propget] HRESULT ShowMore(
			[out, retval] ComBool * pfMore);
		
		
		[propput] HRESULT ShowMore(
			[in] ComBool fMore);

		
		
		[propget] HRESULT IcuLocale(
			[out, retval] BSTR * pbstrLocale);
		
		[propput] HRESULT IcuLocale(
			[in] BSTR bstrLocale);

		
		
		[propget] HRESULT IcuCollatingRules(
			[out, retval] BSTR * pbstrRules);
		
		
		[propput] HRESULT IcuCollatingRules(
			[in] BSTR bstrRules);

		
		[propget] HRESULT UseRegularExpressions(
			[out, retval] ComBool * pfMatch);
		
		[propput] HRESULT UseRegularExpressions(
			[in] ComBool fMatch);

		
		
		[propget] HRESULT ErrorMessage(
			[out, retval] BSTR * pbstrMsg);

		
		
		
		[propget] HRESULT ReplacementText(
			[out, retval] ITsString ** pptssText);
		
		
		
		
		
		[propget] HRESULT Group(
			[in] int iGroup,
			[out, retval] ITsString ** pptssGroup);

		
		
	};
	
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("6C659C76-3991-48dd-93F7-DA65847D4863") cpp_quote(",") cpp_quote("VwPattern") cpp_quote(");") [ uuid(6C659C76-3991-48dd-93F7-DA65847D4863) ] coclass VwPattern
	{
		interface IVwPattern;
	};
	#line 5137 "c:\\fwrepo\\fw\\src\\views\\Views.idh"


	
















	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IVwTxtSrcInit2") cpp_quote(",") cpp_quote("8E3EFDB9-4721-4f17-AA50-48DF65078680") cpp_quote(");") [ uuid("8E3EFDB9-4721-4f17-AA50-48DF65078680"), object, pointer_default(unique) ] interface IVwTxtSrcInit2 : IUnknown
	{
		
		HRESULT SetString(
			[in] ITsString * ptss,
			[in] IVwViewConstructor * pvc,
			[in] ILgWritingSystemFactory * pwsf);
	}
	
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("01D1C8A7-1222-49c9-BFE6-30A84CE76A40") cpp_quote(",") cpp_quote("VwMappedTxtSrc") cpp_quote(");") [ uuid(01D1C8A7-1222-49c9-BFE6-30A84CE76A40) ] coclass VwMappedTxtSrc
	{
		interface IVwTxtSrcInit2;
		interface IVwTextSource;
	};
	#line 5171 "c:\\fwrepo\\fw\\src\\views\\Views.idh"


	
















	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IVwTxtSrcInit") cpp_quote(",") cpp_quote("1AB3C970-3EC1-4d97-A7B8-122642AF6333") cpp_quote(");") [ uuid("1AB3C970-3EC1-4d97-A7B8-122642AF6333"), object, pointer_default(unique) ] interface IVwTxtSrcInit : IUnknown
	{
		
		HRESULT SetString(
			[in] ITsString * ptss);
	}
	
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("DAF01E81-3026-4480-8783-EEA04CD2EC80") cpp_quote(",") cpp_quote("VwStringTextSource") cpp_quote(");") [ uuid(DAF01E81-3026-4480-8783-EEA04CD2EC80) ] coclass VwStringTextSource
	{
		interface IVwTxtSrcInit;
		interface IVwTextSource;
	};
	#line 5203 "c:\\fwrepo\\fw\\src\\views\\Views.idh"

	

















	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IVwSearchKiller") cpp_quote(",") cpp_quote("FF1B39DE-20D3-4cdd-A134-DCBE3BE23F3E") cpp_quote(");") [ uuid("FF1B39DE-20D3-4cdd-A134-DCBE3BE23F3E"), object, pointer_default(unique) ] interface IVwSearchKiller : IUnknown
	{
		
		
		[propput] HRESULT Window([in] int hwnd);

		
		HRESULT FlushMessages();

		
		
		[propget] HRESULT AbortRequest([out, retval] ComBool * pfAbort);

		
		
		[propput] HRESULT AbortRequest([in] ComBool fAbort);
	};
	
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("4ADA9157-67F8-499b-88CE-D63DF918DF83") cpp_quote(",") cpp_quote("VwSearchKiller") cpp_quote(");") [ uuid(4ADA9157-67F8-499b-88CE-D63DF918DF83) ] coclass VwSearchKiller
	{
		interface IVwSearchKiller;
	};
	#line 5245 "c:\\fwrepo\\fw\\src\\views\\Views.idh"

	















	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IVwDrawRootBuffered") cpp_quote(",") cpp_quote("D9E9D65F-E81F-439e-8010-5B22BAEBB92D") cpp_quote(");") [ uuid("D9E9D65F-E81F-439e-8010-5B22BAEBB92D"), object, pointer_default(unique) ] interface IVwDrawRootBuffered : IUnknown
	{
		
		
		
		
		
		HRESULT DrawTheRoot(
			[in] IVwRootBox * prootb,
			[in] HDC hdc,
			[in] RECT rcpDraw,
			[in] COLORREF bkclr,
			[in] ComBool fDrawSel,
			[in] IVwRootSite * pvrs);

		
		
		
		
		HRESULT ReDrawLastDraw(
			[in] HDC hdc,
			[in] RECT rcpDraw);

		
		
		HRESULT DrawTheRootAt(
			[in] IVwRootBox * prootb,
			[in] HDC hdc,
			[in] RECT rcpDraw,
			[in] COLORREF bkclr,
			[in] ComBool fDrawSel,
			[in] IVwGraphics * pvg,
			[in] RECT rcSrc,
			[in] RECT rcDst,
			[in] int ysTop, 
			[in] int dysHeight); 

		
		
		
		
		
		
		
		
		
		
		
		HRESULT DrawTheRootRotated(
			[in] IVwRootBox * prootb,
			[in] HDC hdc,
			[in] RECT rcpDraw, 
			[in] COLORREF bkclr,
			[in] ComBool fDrawSel,
			[in] IVwRootSite * pvrs,
			[in] int nHow);
	};
	
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("97199458-10C7-49da-B3AE-EA922EA64859") cpp_quote(",") cpp_quote("VwDrawRootBuffered") cpp_quote(");") [ uuid(97199458-10C7-49da-B3AE-EA922EA64859) ] coclass VwDrawRootBuffered
	{
		interface IVwDrawRootBuffered;
	};
	#line 5325 "c:\\fwrepo\\fw\\src\\views\\Views.idh"

	



















	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IVwSynchronizer") cpp_quote(",") cpp_quote("C5C1E9DC-5880-4ee3-B3CD-EBDD132A6294") cpp_quote(");") [ uuid("C5C1E9DC-5880-4ee3-B3CD-EBDD132A6294"), object, pointer_default(unique) ] interface IVwSynchronizer : IUnknown
	{
		
		HRESULT AddRoot(
			[in] IVwRootBox * prootb);
		
		
		
		
		
		
		
		
		
		
		

		
		[propget] HRESULT IsExpandingLazyItems(
			[out, retval] ComBool * fAlreadyExpandingItems);
	};
	
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("5E149A49-CAEE-4823-97F7-BB9DED2A62BC") cpp_quote(",") cpp_quote("VwSynchronizer") cpp_quote(");") [ uuid(5E149A49-CAEE-4823-97F7-BB9DED2A62BC) ] coclass VwSynchronizer
	{
		interface IVwSynchronizer;
	};
	#line 5373 "c:\\fwrepo\\fw\\src\\views\\Views.idh"
























cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IVwLayoutStream") cpp_quote(",") cpp_quote("5DB26616-2741-4688-BC53-24C2A13ACB9A") cpp_quote(");") [ uuid("5DB26616-2741-4688-BC53-24C2A13ACB9A"), object, pointer_default(unique) ] interface IVwLayoutStream : IUnknown
{
	
	HRESULT SetManager(
		[in] IVwLayoutManager * plm);
	
	
	
	
	
	
	
	
	HRESULT LayoutObj(
		[in] IVwGraphics * pvg,
		[in] int dxsAvailWidth,
		[in] int ihvoRoot,
		[in] int cvsli,
		[in, size_is(cvsli)] VwSelLevInfo * prgvsli,
		[in] int hPage);
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	HRESULT LayoutPage(
		[in] IVwGraphics * pvg,
		[in] int dxsAvailWidth,
		[in] int dysAvailHeight,
		[in, out] int * pysStartThisPageBoundary,
		[in] int hPage,
		[in] int nColumns,
		[out] int * pdysUsedHeight,
		[out] int * pysStartNextPageBoundary);
	
	
	HRESULT DiscardPage(
		[in] int hPage);
	
	
	
	
	
	
	
	
	
	HRESULT PageBoundary(
		[in] int hPage,
		[in] ComBool fEnd,
		[out, retval] IVwSelection ** ppsel);
	
	
	
	
	
	HRESULT PageHeight(
		[in] int hPage,
		[out, retval] int * pdysHeight);
	
	
	
	
	HRESULT PagePostion(
		[in] int hPage,
		[out, retval] int * pysPosition);

	
	
	
	
	
	HRESULT RollbackLayoutObjects(
		[in] int hPage);
	
	
	
	HRESULT CommitLayoutObjects(
		[in] int hPage);

	
	
	
	HRESULT ColumnHeight(
		[in] int iColumn,					
		[out, retval] int * pdysHeight);	
	
	
	
	
	HRESULT ColumnOverlapWithPrevious(
		[in] int iColumn,					
		[out, retval] int * pdysHeight);	
	
	
	
	
	
	
	
	
	
	
	
	
	
	HRESULT IsInPageAbove(
		[in] int xs,
		[in] int ys,
		[in] int ysBottomOfPage,
		[in] IVwGraphics * pvg,
		[out] int * pxsLeft,
		[out] int * pxsRight,
		[out, retval] ComBool * pfInLineAbove);
};


cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("1CD09E06-6978-4969-A1FC-462723587C32") cpp_quote(",") cpp_quote("VwLayoutStream") cpp_quote(");") [ uuid(1CD09E06-6978-4969-A1FC-462723587C32) ] coclass VwLayoutStream
{
	interface IVwLayoutStream;
};
#line 5542 "c:\\fwrepo\\fw\\src\\views\\Views.idh"




















cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IVwLayoutManager") cpp_quote(",") cpp_quote("13F3A421-4915-455b-B57F-AFD4073CFFA0") cpp_quote(");") [ uuid("13F3A421-4915-455b-B57F-AFD4073CFFA0"), object, pointer_default(unique) ] interface IVwLayoutManager : IUnknown
{
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
	HRESULT AddDependentObjects(
		[in] IVwLayoutStream * play,
		[in] IVwGraphics * pvg,
		[in] int hPage,
		[in] int cguid,
		[in, size_is(cguid)] GUID * prgguidObj,
		[in] ComBool fAllowFail,
		[out] ComBool * pfFailed,
		[in, out] int * pdysAvailHeight);
	
	
	
	
	
	
	
	
	
	
	
	HRESULT PageBroken(
		[in] IVwLayoutStream * play,
		[in] int hPage);
	
	
	
	
	
	
	
	
	
	
	
	HRESULT PageBoundaryMoved(
		[in] IVwLayoutStream * play,
		[in] int hPage,
		[in] int ichOld);
	
	
	
	HRESULT EstimateHeight(
		[in] int dxpWidth,
		[out, retval] int * pdxpHeight);
};

	



	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IPictureFactory") cpp_quote(",") cpp_quote("110B7E88-2968-11E0-B493-0019DBF4566E") cpp_quote(");") [ uuid("110B7E88-2968-11E0-B493-0019DBF4566E"), object, pointer_default(unique) ] interface IPictureFactory : IUnknown
	{
		
		HRESULT ImageFromBytes(
			[in, size_is(cbData)] byte * pbData,
			[in] int cbData,
			[out,retval] IPicture ** pppic);
	}

	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("17A2E876-2968-11E0-8046-0019DBF4566E") cpp_quote(",") cpp_quote("PictureFactory") cpp_quote(");") [ uuid(17A2E876-2968-11E0-8046-0019DBF4566E) ] coclass PictureFactory
	{
		interface IPictureFactory;
	};
#line 5655 "c:\\fwrepo\\fw\\src\\views\\Views.idh"

	




























	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IVwVirtualHandler") cpp_quote(",") cpp_quote("581E3FE0-F0C0-42A7-96C7-76B23B8BE580") cpp_quote(");") [ uuid("581E3FE0-F0C0-42A7-96C7-76B23B8BE580"), object, pointer_default(unique) ] interface IVwVirtualHandler : IUnknown
	{
		
		[propget] HRESULT ClassName(
			[out, retval] BSTR * pbstr);
		
		
		
		
		[propput] HRESULT ClassName(
			[in] BSTR bstr);
		
		[propget] HRESULT FieldName(
			[out, retval] BSTR * pbstr);
		
		
		
		[propput] HRESULT FieldName(
			[in] BSTR bstr);
		
		
		[propget] HRESULT Tag(
			[out, retval] PropTag * ptag);
		
		
		
		[propput] HRESULT Tag(
			[in] PropTag tag);
		
		[propget] HRESULT Type(
			[out, retval] int * pcpt);
		
		
		[propput] HRESULT Type(
			[in] int cpt);
		
		[propget] HRESULT Writeable(
			[out, retval] ComBool * pf);
		
		
		
		
		
		[propput] HRESULT Writeable(
			[in] ComBool f);
		
		[propget] HRESULT ComputeEveryTime(
			[out, retval] ComBool * pf);
		
		
		
		
		
		
		
		[propput] HRESULT ComputeEveryTime(
			[in] ComBool f);
		
		
		
		
		
		
		HRESULT Load(
			[in] HVO hvo,
			[in] PropTag tag,
			[in] int ws,
			[in] IVwCacheDa * pcda);
		
		
		
		
		
		
		
		
		
		
		
		
		
		HRESULT Replace(
			[in] HVO hvo,
			[in] PropTag tag,
			[in] int ihvoMin,
			[in] int ihvoLim,
			[in, size_is(chvo)] HVO * prghvo,
			[in] int chvo,
			[in] ISilDataAccess * psda);
		
		
		
		
		
		
		
		HRESULT WriteObj(
			[in] HVO hvo,
			[in] PropTag tag,
			[in] int ws,
			[in] IUnknown * punk,
			[in] ISilDataAccess * psda);
		
		
		
		
		
		HRESULT WriteInt64(
			[in] HVO hvo,
			[in] PropTag tag,
			[in] __int64 val,
			[in] ISilDataAccess * psda);
		
		
		
		
		
		
		HRESULT WriteUnicode(
			[in] HVO hvo,
			[in] PropTag tag,
			[in] BSTR bstr,
			[in] ISilDataAccess * psda);
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		HRESULT PreLoad(
			[in] int chvo,
			[in, size_is(chvo)] HVO * prghvo,
			[in] PropTag tag,
			[in] int ws,
			[in] IVwCacheDa * pcda);
		
		
		
		HRESULT Initialize(
			[in] BSTR bstrData);

		
		
		
		HRESULT DoesResultDependOnProp(
			[in] HVO hvoObj, 
			[in] HVO hvoChange, 
			[in] PropTag tag, 
			[in] int ws, 
			[out, retval] ComBool * pfDepends);

		
		
		
		
		
		
		
		
		
		
		
		
		HRESULT SetLoadForAllOfClass(
			[in] ComBool fLoadAll);
	};

	
	
	typedef [v1_enum] enum FieldSource
	{
		kModel = 0, 
		kCustom = 1, 
		kVirtual = 2, 
	} FieldSource;

	




	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IVwWindow") cpp_quote(",") cpp_quote("8856396c-63a9-4bc7-ad47-87ec8b6ef5a4") cpp_quote(");") [ uuid("8856396c-63a9-4bc7-ad47-87ec8b6ef5a4"), object, pointer_default(unique) ] interface IVwWindow : IUnknown
	{
		[propput] HRESULT Window([in] DWORD * hwnd);

		HRESULT GetClientRectangle(
			[out] RECT * prcClientRectangle);
	}

	
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("3fb0fcd2-ac55-42a8-b580-73b89a2b6215") cpp_quote(",") cpp_quote("VwWindow") cpp_quote(");") [ uuid(3fb0fcd2-ac55-42a8-b580-73b89a2b6215) ] coclass VwWindow
	{
		interface IVwWindow;
	};
	#line 5889 "c:\\fwrepo\\fw\\src\\views\\Views.idh"


typedef [v1_enum] enum VwMouseEvent
{
	
	kmeDown, 
	kmeDblClick, 
	kmeMoveDrag, 
	kmeExtend, 
	kmeUp, 
} VwMouseEvent; 






cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IViewInputMgr") cpp_quote(",") cpp_quote("e41668f7-d506-4c8a-a5d7-feae5630797e") cpp_quote(");") [ uuid("e41668f7-d506-4c8a-a5d7-feae5630797e"), object, pointer_default(unique) ] interface IViewInputMgr : IUnknown
{
	HRESULT Init(
		[in] IVwRootBox * prootb);

	HRESULT Close();

	
	HRESULT TerminateAllCompositions();

	
	HRESULT SetFocus();

	
	HRESULT KillFocus();

	
	[propget] HRESULT IsCompositionActive(
		[out, retval] ComBool * pfCompositionActive);

	
	
	[propget] HRESULT IsEndingComposition(
		[out, retval] ComBool * pfEnding);

	
	
	
	HRESULT OnUpdateProp(
		[out, retval] ComBool * pfProcessed);

	
	HRESULT OnMouseEvent(
		[in] int xd,
		[in] int yd,
		[in] RECT rcSrc,
		[in] RECT rcDst,
		[in] VwMouseEvent me,
		[out, retval] ComBool * pfProcessed);

	
	HRESULT OnLayoutChange();

	
	HRESULT OnSelectionChange(
		[in] int nHow);

	
	HRESULT OnTextChange();
}

#line 28 ".\\ViewsTlb.idl"

};
