#line 1 "C:\\develop\\fwrepo\\fw\\src\\Kernel\\FwKernelTlb.idl"











import "oaidl.idl";
import "ocidl.idl";
import "objidl.idl";

#line 1 "C:\\develop\\fwrepo\\fw\\src\\Generic\\common.idh"

































































cpp_quote("")
cpp_quote("#undef ATTACH_GUID_TO_CLASS")
cpp_quote("#if defined(__cplusplus)")
cpp_quote("#define ATTACH_GUID_TO_CLASS(type, guid, cls) \\")
cpp_quote("	type __declspec(uuid(#guid)) cls;")
cpp_quote("#else // !defined(__cplusplus)")
cpp_quote("#define ATTACH_GUID_TO_CLASS(type, guid, cls)")
cpp_quote("#endif // !defined(__cplusplus)")
cpp_quote("")
cpp_quote("#ifndef DEFINE_COM_PTR")
cpp_quote("#define DEFINE_COM_PTR(cls)")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#undef GENERIC_DECLARE_SMART_INTERFACE_PTR")
cpp_quote("#define GENERIC_DECLARE_SMART_INTERFACE_PTR(cls, iid) \\")
cpp_quote("	ATTACH_GUID_TO_CLASS(interface, iid, cls); \\")
cpp_quote("	DEFINE_COM_PTR(cls);")
cpp_quote("")


cpp_quote("")
cpp_quote("#ifndef CUSTOM_COM_BOOL")
typedef VARIANT_BOOL ComBool;
cpp_quote("#endif")
cpp_quote("")

cpp_quote("#if 0")
cpp_quote("// This is so there is an equivalent VB type.")
typedef CY SilTime;
cpp_quote("#elif defined(SILTIME_IS_STRUCT)")
cpp_quote("// This is for code that compiles UtilTime.*.")
cpp_quote("struct SilTime;")
cpp_quote("#else")
cpp_quote("// This is for code that uses a 64-bit integer for SilTime.")
cpp_quote("typedef __int64 SilTime;")
cpp_quote("#endif")
cpp_quote("")
#line 17 "C:\\develop\\fwrepo\\fw\\src\\Kernel\\FwKernelTlb.idl"

cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("F1EF76E0-BE04-11d3-8D9A-005004DEFEC4") cpp_quote(",") cpp_quote("FwKernelLib") cpp_quote(");") [ uuid(F1EF76E0-BE04-11d3-8D9A-005004DEFEC4), version(1.0), helpstring("FieldWorks Kernel") ] library FwKernelLib
{
	#line 1 "c:\\develop\\fwrepo\\fw\\src\\kernel\\FwKernel.idh"

















interface IFwMetaDataCache;
interface ILgWritingSystemFactory;
interface ITsMultiString;
interface ITsString;
interface ITsTextProps;
interface IVwStylesheet;

typedef int HVO; 
typedef int PropTag; 

typedef [v1_enum] enum UndoResult
{
	kuresSuccess,		
	kuresRefresh,		
	kuresFailed,		
						
						
						
	kuresError,			
						
} UndoResult;


















cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ICheckWord") cpp_quote(",") cpp_quote("69F4D944-C786-47EC-94F7-15193EED6758") cpp_quote(");") [ uuid("69F4D944-C786-47EC-94F7-15193EED6758"), object, pointer_default(unique) ] interface ICheckWord : IUnknown
{
	HRESULT Check(
		[in] LPCOLESTR pszWord,
		[out, retval] ComBool * pfCorrect);
}


















cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IGetSpellChecker") cpp_quote(",") cpp_quote("F0A60670-D280-45EA-A5C5-F0B84C027EFC") cpp_quote(");") [ uuid("F0A60670-D280-45EA-A5C5-F0B84C027EFC"), object, pointer_default(unique) ] interface IGetSpellChecker : IUnknown
{
	HRESULT GetChecker(
		[in] LPCOLESTR pszDictId,
		[out, retval] ICheckWord ** pcw);
}


























cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IVwNotifyChange") cpp_quote(",") cpp_quote("6C456541-C2B6-11d3-8078-0000C0FB81B5") cpp_quote(");") [ uuid("6C456541-C2B6-11d3-8078-0000C0FB81B5"), object, pointer_default(unique) ] interface IVwNotifyChange : IUnknown
{
	
	
	
	
	
	
	
	
	
	
	
	
	
	HRESULT PropChanged(
		[in] HVO hvo,
		[in] PropTag tag,
		[in] int ivMin,
		[in] int cvIns,
		[in] int cvDel);
};


























cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IUndoAction") cpp_quote(",") cpp_quote("B831F535-0D5F-42c8-BF9F-7F5ECA2C4657") cpp_quote(");") [ uuid("B831F535-0D5F-42c8-BF9F-7F5ECA2C4657"), object, pointer_default(unique) ] interface IUndoAction : IUnknown
{
	
	
	
	HRESULT Undo([out, retval] ComBool * pfSuccess);

	
	HRESULT Redo([out, retval] ComBool * pfSuccess);

	
	HRESULT Commit();

	
	
	[propget] HRESULT IsDataChange([out, retval] ComBool * pfRet);

	
	
	[propget] HRESULT IsRedoable([out, retval] ComBool * pfRet);

	
	
	[propput] HRESULT SuppressNotification(
		[in] ComBool fSuppress);
};























cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IActionHandler") cpp_quote(",") cpp_quote("7E8BC421-4CB2-4CF9-8C4C-73A5FD87CA7A") cpp_quote(");") [ uuid("7E8BC421-4CB2-4CF9-8C4C-73A5FD87CA7A"), object, pointer_default(unique) ] interface IActionHandler : IUnknown
{
	
	
	
	
	
	
	
	HRESULT BeginUndoTask(
		[in] BSTR bstrUndo,
		[in] BSTR bstrRedo);

	
	
	HRESULT EndUndoTask();

	
	
	
	HRESULT ContinueUndoTask();

	
	
	HRESULT EndOuterUndoTask();

	
	
	HRESULT BreakUndoTask(
		[in] BSTR bstrUndo,
		[in] BSTR bstrRedo);

	
	
	HRESULT BeginNonUndoableTask();

	
	HRESULT EndNonUndoableTask();

	
	
	HRESULT CreateMarkIfNeeded(
		[in] ComBool fCreateMark);

	
	
	
	
	
	
	
	
	
	
	HRESULT StartSeq(
		[in] BSTR bstrUndo,
		[in] BSTR bstrRedo,
		[in] IUndoAction * puact);

	
	
	
	
	HRESULT AddAction(
		[in] IUndoAction * puact);

	
	
	
	HRESULT GetUndoText(
		[out, retval] BSTR * pbstrUndoText);

	
	
	
	
	HRESULT GetUndoTextN(
		[in] int iAct,
		[out, retval] BSTR * pbstrUndoText);

	
	
	
	
	HRESULT GetRedoText(
		[out, retval] BSTR * pbstrRedoText);

	
	
	
	
	
	HRESULT GetRedoTextN(
		[in] int iAct,
		[out, retval] BSTR * pbstrRedoText);

	
	
	HRESULT CanUndo(
		[out, retval] ComBool * pfCanUndo);

	
	
	HRESULT CanRedo(
		[out, retval] ComBool * pfCanRedo);

	
	
	HRESULT Undo(
		[out, retval] UndoResult * pures);

	
	
	HRESULT Redo(
		[out, retval] UndoResult * pures);

	
	
	HRESULT Rollback(
		[in] int nDepth);

	
	
	[propget] HRESULT CurrentDepth(
		[out, retval] int * pnDepth);

	
	
	
	HRESULT Commit();

	
	
	
	HRESULT Close();

	
	
	HRESULT Mark(
		[out, retval] int * phMark);

	
	
	
	
	
	
	
	
	
	
	HRESULT CollapseToMark(
		[in] int hMark,
		[in] BSTR bstrUndo,
		[in] BSTR bstrRedo,
		[out, retval] ComBool * pf);

	
	
	HRESULT DiscardToMark(
		[in] int hMark);

	
	[propget] HRESULT TopMarkHandle(
		[out, retval] int * phMark);

	
	
	[propget] HRESULT TasksSinceMark(
		[in] ComBool fUndo,
		[out, retval] ComBool * pf);

	
	
	
	[propget] HRESULT UndoableActionCount(
		[out, retval] int * pcAct);

	
	
	[propget] HRESULT UndoableSequenceCount(
		[out, retval] int * pcSeq);

	
	
	[propget] HRESULT RedoableSequenceCount(
		[out, retval] int * pcSeq);

	
	
	
	
	
	[propget] HRESULT IsUndoOrRedoInProgress(
		[out, retval] ComBool * pfInProgress);

	
	
	[propget] HRESULT SuppressSelections(
		[out, retval] ComBool * pfSupressSel);
};


cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("CF0F1C0B-0E44-4C1E-9912-2048ED12C2B4") cpp_quote(",") cpp_quote("ActionHandler") cpp_quote(");") [ uuid(CF0F1C0B-0E44-4C1E-9912-2048ED12C2B4) ] coclass ActionHandler
{
	interface IActionHandler;
};
#line 418 "c:\\develop\\fwrepo\\fw\\src\\kernel\\FwKernel.idh"









































cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ISilDataAccess") cpp_quote(",") cpp_quote("26E6E70E-53EB-4372-96F1-0F4707CCD1EB") cpp_quote(");") [ uuid("26E6E70E-53EB-4372-96F1-0F4707CCD1EB"), object, pointer_default(unique) ] interface ISilDataAccess : IUnknown
{
	
	
	
	
	
	[propget] HRESULT ObjectProp(
		[in] HVO hvo,
		[in] PropTag tag,
		[out, retval] HVO * phvo);
	
	
	
	
	[propget] HRESULT VecItem(
		[in] HVO hvo,
		[in] PropTag tag,
		[in] int index, 
		[out, retval] HVO * phvo);
	
	[propget] HRESULT VecSize(
		[in] HVO hvo,
		[in] PropTag tag,
		[out, retval] int * pchvo);
	
	[propget] HRESULT VecSizeAssumeCached(
		[in] HVO hvo,
		[in] PropTag tag,
		[out, retval] int * pchvo);
	
	HRESULT VecProp(
		[in] HVO hvo,
		[in] PropTag tag,
		[in] int chvoMax,
		[out] int * pchvo,
		[out, size_is(chvoMax), length_is(*pchvo)] HVO * prghvo);


	
	
	
	
	
	
	
	HRESULT BinaryPropRgb(
		[in] HVO obj,
		[in] PropTag tag,
		[out, size_is(cbMax)] byte * prgb,
		[in] int cbMax,
		[out] int * pcb);
	
	
	
	
	[propget] HRESULT GuidProp(
		[in] HVO hvo,
		[in] PropTag tag,
		[out, retval] GUID * puid);
	
	
	
	[propget] HRESULT ObjFromGuid(
		[in] GUID uid,
		[out, retval] HVO * pHvo);
	
	
	
	[propget] HRESULT IntProp(
		[in] HVO hvo,
		[in] PropTag tag,
		[out, retval] int * pn);
	
	
	
	[propget] HRESULT Int64Prop(
		[in] HVO hvo,
		[in] PropTag tag,
		[out, retval] __int64 * plln);
	
	
	[propget] HRESULT BooleanProp(
		[in] HVO hvo,
		[in] PropTag tag,
		[out, retval] ComBool * pn);
	
	
	[propget] HRESULT MultiStringAlt(
		[in] HVO hvo,
		[in] PropTag tag,
		[in] int ws,
		[out, retval] ITsString ** pptss);
	
	
	[propget] HRESULT MultiStringProp(
		[in] HVO hvo,
		[in] PropTag tag,
		[out, retval] ITsMultiString ** pptms);
	
	
	
	
	
	
	
	
	
	
	[propget] HRESULT Prop(
		[in] HVO hvo,
		[in] PropTag tag,
		[out, retval] VARIANT * pvar);
	
	
	[propget] HRESULT StringProp(
		[in] HVO hvo,
		[in] PropTag tag,
		[out, retval] ITsString ** pptss);
	
	
	
	[propget] HRESULT TimeProp(
		[in] HVO hvo,
		[in] PropTag tag,
		[out, retval] __int64 * ptim);
	
	
	
	
	[propget] HRESULT UnicodeProp(
		[in] HVO obj,
		[in] PropTag tag,
		[out, retval] BSTR * pbstr);
	
	[propput] HRESULT UnicodeProp(
		[in] HVO obj,
		[in] PropTag tag,
		[in] BSTR bstr);
	
	
	
	
	
	HRESULT UnicodePropRgch(
		[in] HVO obj,
		[in] PropTag tag,
		[out, size_is(cchMax)] OLECHAR * prgch,
		[in] int cchMax,
		[out] int * pcch);
	
	
	
	[propget] HRESULT UnknownProp(
		[in] HVO hvo,
		[in] PropTag tag,
		[out, retval] IUnknown ** ppunk);

	
	
	
	
	
	
	
	HRESULT BeginUndoTask(
		[in] BSTR bstrUndo,
		[in] BSTR bstrRedo);

	
	
	HRESULT EndUndoTask();

	
	
	
	HRESULT ContinueUndoTask();

	
	
	HRESULT EndOuterUndoTask();

	
	HRESULT Rollback();

	
	
	HRESULT BreakUndoTask(
		[in] BSTR bstrUndo,
		[in] BSTR bstrRedo);

	
	
	HRESULT BeginNonUndoableTask();

	
	HRESULT EndNonUndoableTask();

	
	
	HRESULT GetActionHandler(
		[out, retval] IActionHandler ** ppacth);

	
	
	HRESULT SetActionHandler(
		[in] IActionHandler * pacth);

	
	
	
	
	
	HRESULT DeleteObj(
		[in] HVO hvoObj);
	
	
	
	
	
	
	
	
	

	
	HRESULT DeleteObjOwner(
		[in] HVO hvoOwner,
		[in] HVO hvoObj,
		[in] PropTag tag,
		[in] int ihvo);
	
	
	
	
	
	
	
	

	
	HRESULT InsertNew(
		[in] HVO hvoObj,
		[in] PropTag tag,
		[in] int ihvo,
		[in] int chvo,
		[in] IVwStylesheet * pss);
	
	
	
	
	
	
	
	
	
	
	

	
	HRESULT MakeNewObject(
		[in] int clid,
		[in] HVO hvoOwner,
		[in] PropTag tag,
		[in] int ord,
		[out, retval] HVO * phvoNew);

	
	
	
	

	
	HRESULT MoveOwnSeq(
		[in] HVO hvoSrcOwner,
		[in] PropTag tagSrc,
		[in] int ihvoStart,
		[in] int ihvoEnd,
		[in] HVO hvoDstOwner,
		[in] PropTag tagDst,
		[in] int ihvoDstStart);

	
	
	
	

	
	HRESULT MoveOwn(
		[in] HVO hvoSrcOwner,
		[in] PropTag tagSrc,
		[in] HVO hvo,
		[in] HVO hvoDstOwner,
		[in] PropTag tagDst,
		[in] int ihvoDstStart);

	
	
	
	
	
	
	
	
	
	
	

	
	
	HRESULT Replace(
		[in] HVO hvoObj,
		[in] PropTag tag,
		[in] int ihvoMin,
		[in] int ihvoLim,
		[in, size_is(chvo)] HVO * prghvo,
		[in] int chvo);

	
	

	
	
	HRESULT SetObjProp(
		[in] HVO hvo,
		[in] PropTag tag,
		[in] HVO hvoObj);

	
	
	
	HRESULT RemoveObjRefs(
		[in] HVO hvo);

	

	
	
	HRESULT SetBinary(
		[in] HVO hvo,
		[in] PropTag tag,
		[in, size_is(cb)] byte * prgb,
		[in] int cb);

	

	
	
	HRESULT SetGuid(
		[in] HVO hvo,
		[in] PropTag tag,
		[in] GUID uid);

	

	
	
	HRESULT SetInt(
		[in] HVO hvo,
		[in] PropTag tag,
		[in] int n);

	

	
	
	HRESULT SetInt64(
		[in] HVO hvo,
		[in] PropTag tag,
		[in] __int64 lln);

	
	
	
	HRESULT SetBoolean(
		[in] HVO hvo,
		[in] PropTag tag,
		[in] ComBool n);

	

	
	
	HRESULT SetMultiStringAlt(
		[in] HVO hvo,
		[in] PropTag tag,
		[in] int ws,
		[in] ITsString * ptss);

	

	
	
	HRESULT SetString(
		[in] HVO hvo,
		[in] PropTag tag,
		[in] ITsString * ptss);

	

	
	
	HRESULT SetTime(
		[in] HVO hvo,
		[in] PropTag tag,
		[in] __int64 lln);

	

	
	
	HRESULT SetUnicode(
		[in] HVO hvo,
		[in] PropTag tag,
		[in, size_is(cch)] OLECHAR * prgch,
		[in] int cch);

	
	
	
	

	
	
	HRESULT SetUnknown(
		[in] HVO hvo,
		[in] PropTag tag,
		[in] IUnknown * punk);

	
	
	
	HRESULT AddNotification(
		[in] IVwNotifyChange * pnchng);

	
	
	
	
	

	
	
	

	
	

	
	
	
	
	HRESULT PropChanged(
		[in] IVwNotifyChange * pnchng,
		[in] int pct,
		[in] HVO hvo,
		[in] int tag,
		[in] int ivMin,
		[in] int cvIns,
		[in] int cvDel);

	
	HRESULT RemoveNotification(
		[in] IVwNotifyChange * pnchng);

	
	
	
	HRESULT GetDisplayIndex(
		[in] HVO hvoOwn,
		[in] int tag,
		[in] int ihvo,
		[out, retval] int * ihvoDisp);

	
	
	[propget] HRESULT WritingSystemFactory(
		[out, retval] ILgWritingSystemFactory ** ppwsf);

	
	
	[propputref] HRESULT WritingSystemFactory(
		[in] ILgWritingSystemFactory * pwsf);

	
	
	

	

	
	
	
	[propget] HRESULT WritingSystemsOfInterest(
		[in] int cwsMax,
		[out, size_is(cwsMax)] int * pws,
		[out, retval] int * pcws);

	
	
	
	
	
	
	
	
	
	

	
	

	
	

	
	HRESULT InsertRelExtra(
		[in] HVO hvoSrc,
		[in] PropTag tag,
		[in] int ihvo,
		[in] HVO hvoDst,
		[in] BSTR bstrExtra);

	
	
	
	
	
	
	
	
	
	

	
	

	
	

	
	HRESULT UpdateRelExtra(
		[in] HVO hvoSrc,
		[in] PropTag tag,
		[in] int ihvo,
		[in] BSTR bstrExtra);

	
	
	
	
	
	
	
	
	
	

	
	HRESULT GetRelExtra(
		[in] HVO hvoSrc,
		[in] PropTag tag,
		[in] int ihvo,
		[out, retval] BSTR * pbstrExtra);

	
	
	
	
	[propget] HRESULT IsPropInCache(
		[in] HVO hvo,
		[in] PropTag tag,
		[in] int cpt,
		[in] int ws,
		[out, retval] ComBool * pfCached);

	
	
	
	

	
	
	HRESULT IsDirty(
		[out, retval] ComBool * pf);

	
	HRESULT ClearDirty();

	
	
	
	
	
	[propget] HRESULT MetaDataCache(
		[out, retval] IFwMetaDataCache ** ppmdc);

	
	
	
	[propputref] HRESULT MetaDataCache(
		[in] IFwMetaDataCache * pmdc);

	
	
	
	
	
	
	[propget] HRESULT IsValidObject(
		[in] HVO hvo,
		[out, retval] ComBool * pfValid);

	
	
	
	
	[propget] HRESULT IsDummyId(
		[in] HVO hvo,
		[out, retval] ComBool * pfDummy);

	
	
	
	
	
	
	
	HRESULT GetObjIndex(
		[in] HVO hvoOwn,
		[in] int flid,
		[in] HVO hvo,
		[out, retval] int * ihvo);

	
	
	
	
	
	
	
	
	
	HRESULT GetOutlineNumber(
		[in] HVO hvo,
		[in] int flid,
		[in] ComBool fFinPer,
		[out, retval] BSTR * pbstr);

	
	
	
	
	
	
	
	
	
	
	
	HRESULT MoveString(
		[in] int hvoSource,
		[in] PropTag flidSrc,
		[in] int wsSrc,
		[in] int ichMin,
		[in] int ichLim,
		[in] HVO hvoDst,
		[in] PropTag flidDst,
		[in] int wsDst,
		[in] int ichDest,
		[in] ComBool fDstIsNew);
};



typedef [v1_enum] enum FieldSource
{
	kModel = 0, 
	kCustom = 1, 
	kVirtual = 2, 
} FieldSource;
























cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IFwMetaDataCache") cpp_quote(",") cpp_quote("EDBB1DED-7065-4b56-A262-746453835451") cpp_quote(");") [ uuid("EDBB1DED-7065-4b56-A262-746453835451"), object, pointer_default(unique) ] interface IFwMetaDataCache : IUnknown
{
	
	
	
	
	
	
	
	
	HRESULT InitXml(
		[in] BSTR bstrPathname,
		[in] ComBool fClearPrevCache);

	
	
	

	
	
	[propget] HRESULT FieldCount(
		[out, retval] int * pcflid);

	
	
	
	
	
	HRESULT GetFieldIds(
		[in] int cflid,
		[out, size_is(cflid)] int * rgflid);

	
	
	
	
	
	
	HRESULT GetOwnClsName(
		[in] int luFlid,
		[out, retval] BSTR * pbstrOwnClsName);

	
	
	
	
	
	
	
	HRESULT GetDstClsName(
		[in] int luFlid,
		[out, retval] BSTR * pbstrDstClsName);

	
	
	
	
	
	HRESULT GetOwnClsId(
		[in] int luFlid,
		[out, retval] int * pluOwnClsid);

	
	
	
	
	
	
	
	
	HRESULT GetDstClsId(
		[in] int luFlid,
		[out, retval] int * pluDstClsid);

	
	
	
	
	
	HRESULT GetFieldName(
		[in] int luFlid,
		[out, retval] BSTR * pbstrFieldName);

	
	
	
	
	
	HRESULT GetFieldLabel(
		[in] int luFlid,
		[out, retval] BSTR * pbstrFieldLabel);

	
	
	
	
	
	HRESULT GetFieldHelp(
		[in] int luFlid,
		[out, retval] BSTR * pbstrFieldHelp);

	
	
	
	
	
	HRESULT GetFieldXml(
		[in] int luFlid,
		[out, retval] BSTR * pbstrFieldXml);

	
	
	
	
	
	HRESULT GetFieldWs(
		[in] int luFlid,
		[out, retval] int * piWs);

	
	
	
	
	
	
	
	
	
	HRESULT GetFieldType(
		[in] int luFlid,
		[out, retval] int * piType);

	
	
	
	
	
	
	[propget] HRESULT IsValidClass(
		[in] int luFlid,
		[in] int luClid,
		[out, retval] ComBool * pfValid);

	
	
	

	
	
	[propget] HRESULT ClassCount(
		[out, retval] int * pcclid);

	
	
	
	
	
	HRESULT GetClassIds(
		[in] int cclid,
		[out, size_is(cclid)] int * rgclid);

	
	
	
	
	
	HRESULT GetClassName(
		[in] int luClid,
		[out, retval] BSTR * pbstrClassName);

	
	
	
	
	
	HRESULT GetAbstract(
		[in] int luClid,
		[out, retval] ComBool * pfAbstract);

	
	
	
	
	
	HRESULT GetBaseClsId(
		[in] int luClid,
		[out, retval] int * pluClid);

	
	
	
	
	
	
	HRESULT GetBaseClsName(
		[in] int luClid,
		[out, retval] BSTR * pbstrBaseClsName);

	
	
	
	
	
	
	
	
	
	HRESULT GetFields(
		[in] int luClid,
		[in] ComBool fIncludeSuperclasses,
		[in] int grfcpt,
		[in] int cflidMax,
		[out, size_is(cflidMax)] int * prgflid,
		[out, retval] int * pcflid);

	
	
	

	
	HRESULT GetClassId(
		[in] BSTR bstrClassName,
		[out, retval] int * pluClid);

	
	
	HRESULT GetFieldId(
		[in] BSTR bstrClassName,
		[in] BSTR bstrFieldName,
		[in, defaultvalue(-1)] ComBool fIncludeBaseClasses,
		[out, retval] int * pluFlid);

	
	
	
	HRESULT GetFieldId2(
		[in] int luClid,
		[in] BSTR bstrFieldName,
		[in, defaultvalue(-1)] ComBool fIncludeBaseClasses,
		[out, retval] int * pluFlid);
	
	HRESULT GetDirectSubclasses(
		[in] int luClid,
		[in] int cluMax,
		[out] int * pcluOut,
		[out, size_is(cluMax)] int * prgluSubclasses);
	
	
	
	
	HRESULT GetAllSubclasses(
		[in] int luClid,
		[in] int cluMax,
		[out] int * pcluOut,
		[out, size_is(cluMax)] int * prgluSubclasses);

	
	
	HRESULT AddVirtualProp(
		[in] BSTR bstrClass,
		[in] BSTR bstrField,
		[in] int luFlid,
		[in] int type);

	[propget] HRESULT IsVirtual(
		[in] int luFlid,
		[out, retval] ComBool * pfVirtual);

	
	
	
	
	
	
	HRESULT GetFieldNameOrNull(
		[in] int luFlid,
		[out, retval] BSTR * pbstrFieldName);
}


















cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IStructuredTextDataAccess") cpp_quote(",") cpp_quote("A2A4F9FA-D4E8-4bfb-B6B7-5F45DAF2DC0C") cpp_quote(");") [ uuid("A2A4F9FA-D4E8-4bfb-B6B7-5F45DAF2DC0C"), object, pointer_default(unique) ] interface IStructuredTextDataAccess : IUnknown
{
	
	[propget] HRESULT ParaContentsFlid(
		[out, retval] PropTag * pflid);

	
	[propget] HRESULT ParaPropertiesFlid(
		[out, retval] PropTag * pflid);

	
	[propget] HRESULT TextParagraphsFlid(
		[out, retval] PropTag * pflid);
};








typedef [v1_enum] enum PropChangeType
{
	kpctNotifyMeThenAll,
	kpctNotifyAll,
	kpctNotifyAllButMe,
} PropChangeType;






typedef [v1_enum] enum CrtReportType
{
	Warn    = 0x0,	
	Error   = 0x1,	
	Assert  = 0x2,	
} CrtReportType;


















cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IDebugReportSink") cpp_quote(",") cpp_quote("DD9CE7AD-6ECC-4e0c-BBFC-1DC52E053354") cpp_quote(");") [ uuid("DD9CE7AD-6ECC-4e0c-BBFC-1DC52E053354"), object, pointer_default(unique) ] interface IDebugReportSink : IUnknown
{
	
	
	
	
	
	HRESULT Report(
		[in] CrtReportType nReportType,
		[in] BSTR szMsg);

	
	
	
	
	
	HRESULT AssertProc(
		[in] BSTR pszExp,
		[in] BSTR pszFile,
		[in] int nLine);

};


















cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IDebugReport") cpp_quote(",") cpp_quote("3D6A0880-D17D-4e4a-9DE9-861A85CA4046") cpp_quote(");") [ uuid("3D6A0880-D17D-4e4a-9DE9-861A85CA4046"), object, pointer_default(unique) ] interface IDebugReport : IUnknown
{
	
	HRESULT SetSink(
		[in] IDebugReportSink * pSink);

	
	HRESULT ClearSink();
};


cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("24636FD1-DB8D-4b2c-B4C0-44C2592CA482") cpp_quote(",") cpp_quote("DebugReport") cpp_quote(");") [ uuid(24636FD1-DB8D-4b2c-B4C0-44C2592CA482) ] coclass DebugReport
{
	interface IDebugReport;
};
#line 1574 "c:\\develop\\fwrepo\\fw\\src\\kernel\\FwKernel.idh"

#line 1576 "c:\\develop\\fwrepo\\fw\\src\\kernel\\FwKernel.idh"













cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IComDisposable") cpp_quote(",") cpp_quote("CA9AAF91-4C34-4c6a-8E07-97C1A7B3486A") cpp_quote(");") [ uuid("CA9AAF91-4C34-4c6a-8E07-97C1A7B3486A"), object, pointer_default(unique) ] interface IComDisposable : IUnknown
{
	HRESULT Dispose();
};



#line 1597 "c:\\develop\\fwrepo\\fw\\src\\kernel\\FwKernel.idh"

#line 21 "C:\\develop\\fwrepo\\fw\\src\\Kernel\\FwKernelTlb.idl"
	#line 1 "c:\\develop\\fwrepo\\fw\\src\\kernel\\TextServ.idh"





































interface ITsString;
interface ITsTextProps;
interface ITsStrFactory;
interface ITsPropsFactory;
interface ITsStrBldr;
interface ITsIncStrBldr;
interface ITsPropsBldr;
interface ITsMultiString;

interface ILgWritingSystemFactory;









cpp_quote("")
cpp_quote("#if defined(__cplusplus)")
cpp_quote("const OLECHAR kchObject = 0xFFFC;")
cpp_quote("#else // !defined(__cplusplus)")
const OLECHAR kchObject = 0xFFFC;
cpp_quote("#endif // !defined(__cplusplus)")
cpp_quote("")

















typedef [v1_enum] enum FwTextPropVar
{
	ktpvDefault    = 0x0,	
	ktpvMilliPoint = 0x1,	
	ktpvRelative   = 0x2,	
	ktpvEnum       = 0x3,	

	ktpvNinch      = 0xF
} FwTextPropVar;






typedef [v1_enum] enum FwNormalizationMode
{
	knmNone    = 1,	
	knmNFD = 2,	
	knmNFKD   = 3,	
	knmNFC      = 4,	
	knmDefault = 4, 
	knmNFKC = 5, 
	knmFCD = 6, 
	knmNFSC = 7, 
		
		
		
	knmLim
} FwNormalizationMode;








typedef [v1_enum] enum FwTextPropType
{
	
	ktptWs = 1,

	
	ktptItalic = 2,

	
	ktptBold = 3,

	
	ktptSuperscript = 4,

	
	ktptUnderline = 5,

	
	
	ktptFontSize = 6,

	
	
	ktptOffset = 7,

	
	
	ktptForeColor = 8,

	
	
	ktptBackColor = 9,

	
	
	ktptUnderColor = 10, 

	




	
	ktptBaseWs = 16,

	
	ktptAlign = 17,

	
	
	
	ktptFirstIndent = 18,

	
	ktptLeadingIndent = 19,
	ktptMarginLeading = 19,

	
	ktptTrailingIndent = 20,
	ktptMarginTrailing = 20,

	
	ktptSpaceBefore = 21,
	ktptMswMarginTop = 21, 

	
	ktptSpaceAfter = 22,
	ktptMarginBottom = 22,

	
	ktptTabDef = 23,

	
	
	
	ktptLineHeight = 24,

	
	
	ktptParaColor = 25,

	
	ktptSpellCheck = 26,

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	ktptMarginTop = 50,

	




	ktptFontFamily = 1,
	ktptCharStyle = 2,
	ktptParaStyle = 3,
	ktptTabList = 4,
	ktptTags = 5, 
	ktptObjData = 6, 
		

	



	ktptRightToLeft = 128,		
	ktptDirectionDepth = 129,	
	
	ktptFontVariations = 130,	
	ktptNamedStyle = 133,		
	ktptPadLeading = 134,
	ktptPadTrailing = 135,
	ktptPadTop = 136,
	ktptPadBottom = 137,
	
	ktptBorderTop = 138,		
	ktptBorderBottom = 139,	
	ktptBorderLeading = 140,		
	ktptBorderTrailing = 141,		
	ktptBorderColor = 142,
	
	ktptBulNumScheme = 143,	
	ktptBulNumStartAt = 144,	
	ktptBulNumTxtBef = 145,	
	ktptBulNumTxtAft = 146,	
	ktptBulNumFontInfo = 147,	

	
	ktptKeepWithNext = 148,	
	ktptKeepTogether = 149,	
	ktptHyphenate = 150,		
	ktptMaxLines = 151,		

	
	ktptCellBorderWidth = 152, 
	ktptCellSpacing = 153,		
	ktptCellPadding = 154,		

	ktptEditable = 155, 

	ktptWsStyle = 156, 

	
	ktptSetRowDefaults = 159,  
	
	
	
	ktptRelLineHeight = 160,
	ktptTableRule = 161,		

	
	ktptWidowOrphanControl = 162,	

	
	ktptFieldName = 9998,

	
	
	ktptMarkItem = 9999

} FwTextPropType;






typedef [v1_enum] enum TptEditable
 {
	ktptNotEditable = 0,
	ktptIsEditable,
	ktptSemiEditable, 
} TptEditable;








typedef [v1_enum] enum SpellingModes
 {
	ksmMin = 0,
	ksmNormalCheck = 0, 
	ksmDoNotCheck, 
	ksmForceCheck, 
	ksmLim,
} SpellingModes;








typedef [v1_enum] enum FwObjDataTypes
{
	
	
	
	kodtPictEvenHot = 1, 
	kodtPictOddHot = 2, 
	
	
	
	
	
	
	
	
	kodtNameGuidHot = 3,
	
	
	
	
	kodtExternalPathName = 4,
	
	
	
	
	
	
	kodtOwnNameGuidHot = 5,
	
	
	
	
	
	
	kodtEmbeddedObjectData = 6,
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	kodtContextString = 7,
	
	
	
	
	
	
	
	kodtGuidMoveableObjDisp = 8,
} FwObjDataTypes;


















typedef [v1_enum] enum FwTextScalarProp
{
	



	
	
	kscpWs = ((ktptWs) << 2) | 2,

	
	
	kscpWsAndOws = ((ktptWs) << 2) | 3,

	
	
	kscpItalic = ((ktptItalic) << 2) | 0,

	
	
	kscpBold = ((ktptBold) << 2) | 0,

	
	
	kscpSuperscript = ((ktptSuperscript) << 2) | 0,

	
	
	kscpUnderline = ((ktptUnderline) << 2) | 0,

	
	
	
	kscpFontSize = ((ktptFontSize) << 2) | 2,

	
	
	
	kscpOffset = ((ktptOffset) << 2) | 2,

	
	
	
	kscpForeColor = ((ktptForeColor) << 2) | 2,

	
	
	
	kscpBackColor = ((ktptBackColor) << 2) | 2,

	
	
	
	kscpUnderColor = ((ktptUnderColor) << 2) | 2,

	
	
	kscpSpellCheck = ((ktptSpellCheck) << 2) | 0,


	




	
	
	kscpBaseWs = ((ktptBaseWs) << 2) | 2,

	
	
	kscpBaseWsAndOws = ((ktptBaseWs) << 2) | 3,

	
	
	kscpAlign = ((ktptAlign) << 2) | 0,

	
	
	
	
	kscpFirstIndent = ((ktptFirstIndent) << 2) | 2,

	
	
	kscpLeadingIndent = ((ktptLeadingIndent) << 2) | 2,

	
	
	kscpTrailingIndent = ((ktptTrailingIndent) << 2) | 2,

	
	
	kscpSpaceBefore = ((ktptSpaceBefore) << 2) | 2,

	
	
	kscpSpaceAfter = ((ktptSpaceAfter) << 2) | 2,

	
	
	kscpTabDef = ((ktptTabDef) << 2) | 2,

	
	
	
	
	kscpLineHeight = ((ktptLineHeight) << 2) | 2,

	
	
	
	kscpParaColor = ((ktptParaColor) << 2) | 2,

	
	
	kscpKeepWithNext = ((ktptKeepWithNext) << 2) | 0,

	
	
	kscpKeepTogether = ((ktptKeepTogether) << 2) | 0,

	
	
	kscpWidowOrphanControl = ((ktptWidowOrphanControl) << 2) | 0,

	
	
	kscpMarkItem = ((ktptMarkItem) << 2) | 0

} FwTextScalarProp;





typedef [v1_enum] enum FwTextStringProp
{
	kstpFontFamily = ktptFontFamily,
	kstpCharStyle = ktptCharStyle,
	kstpParaStyle = ktptParaStyle,
	kstpTabList = ktptTabList,
	kstpTags = ktptTags,
	kstpObjData = ktptObjData,

	kstpFontVariations = ktptFontVariations,
	kstpNamedStyle = ktptNamedStyle,
	kstpBulNumTxtBef = ktptBulNumTxtBef,
	kstpBulNumTxtAft = ktptBulNumTxtAft,
	kstpBulNumFontInfo = ktptBulNumFontInfo,
	kstpWsStyle = ktptWsStyle,

	
	 kstpFieldName = ktptFieldName

} FwTextStringProp;





typedef [v1_enum] enum FwTextPropConstants
{
	
	kdenTextPropRel = 10000,

	
	kcbitTextPropVar = 4,

	
	
	knNinch = 0x80000000,
	
	knConflicting = 0x80000001,
} FwTextPropConstants;






typedef [v1_enum] enum FwTextToggleVal
{
	kttvOff = 0,
	kttvForceOn = 1,
	kttvInvert = 2,
} FwTextToggleVal;






typedef [v1_enum] enum FwSuperscriptVal
{
	kssvOff = 0,
	kssvSuper = 1,
	kssvSub = 2,
} FwSuperscriptVal;






typedef [v1_enum] enum FwTextColor
{
	kclrWhite       = 0x00FFFFFF,
	kclrBlack       = 0x00000000,
	kclrRed         = 0x000000FF,
	kclrGreen       = 0x0000FF00,
	kclrBlue        = 0x00FF0000,
	kclrYellow		= 0x0000FFFF,
	kclrMagenta		= 0x00FF00FF,
	kclrCyan		= 0x00FFFF00,

	
	kclrTransparent = 0xC0000000,
} FwTextColor;








typedef [v1_enum] enum FwUnderlineType
{
	kuntMin,

	kuntNone = kuntMin,
	kuntDotted,
	kuntDashed,
	kuntSingle,
	kuntDouble,
	kuntStrikethrough,
	
	
	kuntSquiggle, 

	kuntLim, 
} FwUnderlineType;





typedef [v1_enum] enum FwTextAlign
{
	ktalMin,

	ktalLeading = ktalMin,
	ktalLeft,
	ktalCenter,
	ktalRight,
	ktalTrailing,
	ktalJustify,

	ktalLim,
} FwTextAlign;



typedef struct TsRunInfo
{
	int ichMin;
	int ichLim;
	int irun; 
} TsRunInfo;










cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ITsString") cpp_quote(",") cpp_quote("BC00014B-842F-4A4A-B3F4-2ED3B0BAADF8") cpp_quote(");") [ uuid("BC00014B-842F-4A4A-B3F4-2ED3B0BAADF8"), object, pointer_default(unique) ] interface ITsString : IUnknown
{
	
	[propget, id(0)] HRESULT Text(
		[out, retval] BSTR * pbstr);
	
	[propget] HRESULT Length(
		[out, retval] int * pcch);
	
	[propget] HRESULT RunCount(
		[out, retval] int * pcrun);

	
	
	
	
	[propget] HRESULT RunAt(
		[in] int ich,
		[out, retval] int * pirun);
	
	[propget] HRESULT MinOfRun(
		[in] int irun,
		[out, retval] int * pichMin);
	
	[propget] HRESULT LimOfRun(
		[in] int irun,
		[out, retval] int * pichLim);
	
	HRESULT GetBoundsOfRun(
		[in] int irun,
		[out] int * pichMin,
		[out] int * pichLim);

	
	
	
	HRESULT FetchRunInfoAt(
		[in] int ich,
		[out] TsRunInfo * ptri,
		[out, retval] ITsTextProps ** ppttp);
	
	HRESULT FetchRunInfo(
		[in] int irun,
		[out] TsRunInfo * ptri,
		[out, retval] ITsTextProps ** ppttp);

	
	
	[propget] HRESULT RunText(
		[in] int irun,
		[out, retval] BSTR * pbstr);
	
	HRESULT GetChars(
		[in] int ichMin,
		[in] int ichLim,
		[out, retval] BSTR * pbstr);
	
	
	[restricted, local] HRESULT FetchChars(
		[in] int ichMin,
		[in] int ichLim,
		[in, out, size_is(ichLim - ichMin)] OLECHAR * prgch);

	
	
	
	[restricted, local] HRESULT LockText(
		[out, string] const OLECHAR ** pprgch,
		[out] int * pcch);
	
	[restricted, local] HRESULT UnlockText(
		[in, string] const OLECHAR * prgch);
	
	[restricted, local] HRESULT LockRun(
		[in] int irun,
		[out, string] const OLECHAR ** pprgch,
		[out] int * pcch);
	
	[restricted, local] HRESULT UnlockRun(
		[in] int irun,
		[in, string] const OLECHAR * prgch);

	
	
	[propget] HRESULT PropertiesAt(
		[in] int ich,
		[out, retval] ITsTextProps ** ppttp);
	
	[propget] HRESULT Properties(
		[in] int irun,
		[out, retval] ITsTextProps ** ppttp);

	
	
	
	
	HRESULT GetBldr(
		[out, retval] ITsStrBldr ** pptsb);
	
	
	
	HRESULT GetIncBldr(
		[out, retval] ITsIncStrBldr ** pptisb);

	
	HRESULT Equals(
		[in] ITsString * ptss,
		[out, retval] ComBool * pfEqual);

	
	
	
	
	
	[propget] HRESULT IsNormalizedForm(
		[in] FwNormalizationMode nm,
		[out, retval] ComBool * pfRet);

	
	
	
	
	
	
	
	[propget] HRESULT NormalizedForm(
		[in] FwNormalizationMode nm,
		[out, retval] ITsString ** pptssRet);

	
	
	
	
	
	
	
	
	
	[restricted, local] HRESULT NfdAndFixOffsets(
		[out] ITsString ** pptssRet,
		[in, size_is(cichOffsetsToFix)] int ** prgpichOffsetsToFix, 
		[in] int cichOffsetsToFix);

	
	HRESULT GetSubstring(
		[in] int ichMin,
		[in] int ichLim,
		[out, retval] ITsString ** pptssRet);
};









cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ITsTextProps") cpp_quote(",") cpp_quote("9B804BE2-0F75-4182-AC97-77F477546AB0") cpp_quote(");") [ uuid("9B804BE2-0F75-4182-AC97-77F477546AB0"), object, pointer_default(unique) ] interface ITsTextProps : IUnknown
{

	
	[propget] HRESULT IntPropCount(
		[out, retval] int * pcv);
	
	
	HRESULT GetIntProp(
		[in] int iv,
		[out] int * ptpt,
		[out] int * pnVar,
		[out, retval] int * pnVal);
	
	
	HRESULT GetIntPropValues(
		[in] int tpt,
		[out] int * pnVar,
		[out, retval] int * pnVal);

	
	[propget] HRESULT StrPropCount(
		[out, retval] int * pcv);
	
	HRESULT GetStrProp(
		[in] int iv,
		[out] int * ptpt,
		[out, retval] BSTR * pbstrVal);
	
	
	HRESULT GetStrPropValue(
		[in] int tpt,
		[out, retval] BSTR * pbstrVal);

	
	
	
	
	HRESULT GetBldr(
		[out, retval] ITsPropsBldr ** pptpb);
};













cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ITsStrFactory") cpp_quote(",") cpp_quote("721A8D21-9900-4CB0-B4C0-9380A23140E3") cpp_quote(");") [ uuid("721A8D21-9900-4CB0-B4C0-9380A23140E3"), object, pointer_default(unique) ] interface ITsStrFactory : IUnknown
{
	
	
	
	HRESULT MakeString(
		[in] BSTR bstr,
		[in] int ws,
		[out, retval] ITsString ** pptss);

	
	
	[restricted] HRESULT MakeStringRgch(
		[in, size_is(cch)] const OLECHAR * prgch,
		[in] int cch,
		[in] int ws,
		[out, retval] ITsString ** pptss);

	
	
	[restricted] HRESULT MakeStringWithPropsRgch(
		[in, size_is(cch)] const OLECHAR * prgch,
		[in] int cch,
		[in] ITsTextProps * pttp,
		[out, retval] ITsString ** pptss);

	
	
	HRESULT GetBldr(
		[out, retval] ITsStrBldr ** pptsb);

	
	HRESULT GetIncBldr(
		[out, retval] ITsIncStrBldr ** pptisb);

	
	
	HRESULT EmptyString(
		[in] int ws,
		[out, retval] ITsString ** pptss);
};









cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ITsPropsFactory") cpp_quote(",") cpp_quote("FF3D947F-1D35-487B-A769-5B6C68722054") cpp_quote(");") [ uuid("FF3D947F-1D35-487B-A769-5B6C68722054"), object, pointer_default(unique) ] interface ITsPropsFactory : IUnknown
{
	
	
	
	
	HRESULT MakeProps(
		[in] BSTR bstrStyle,
		[in] int ws,
		[in] int ows,
		[out, retval] ITsTextProps ** ppttp);
	
	
	
	
	[restricted] HRESULT MakePropsRgch(
		[in, size_is(cch)] const OLECHAR * prgchStyle,
		[in] int cch,
		[in] int ws,
		[in] int ows,
		[out, retval] ITsTextProps ** ppttp);

	
	HRESULT GetPropsBldr(
		[out, retval] ITsPropsBldr ** pptpb);
};

















cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ITsStrBldr") cpp_quote(",") cpp_quote("71D84C4A-10A2-4A7C-B58C-D01386DAE5F7") cpp_quote(");") [ uuid("71D84C4A-10A2-4A7C-B58C-D01386DAE5F7"), object, pointer_default(unique) ] interface ITsStrBldr : IUnknown
{
	
	
	
	[propget, id(0)] HRESULT Text(
		[out, retval] BSTR * pbstr);
	[propget] HRESULT Length(
		[out, retval] int * pcch);
	[propget] HRESULT RunCount(
		[out, retval] int * pcrun);

	
	[propget] HRESULT RunAt(
		[in] int ich,
		[out, retval] int * pirun);

	HRESULT GetBoundsOfRun(
		[in] int irun,
		[out] int * pichMin,
		[out] int * pichLim);
	[restricted] HRESULT FetchRunInfoAt(
		[in] int ich,
		[out] TsRunInfo * ptri,
		[out, retval] ITsTextProps ** ppttp);
	[restricted] HRESULT FetchRunInfo(
		[in] int irun,
		[out] TsRunInfo * ptri,
		[out, retval] ITsTextProps ** ppttp);

	
	[propget] HRESULT RunText(
		[in] int irun,
		[out, retval] BSTR * pbstr);
	HRESULT GetChars(
		[in] int ichMin,
		[in] int ichLim,
		[out, retval] BSTR * pbstr);
	[restricted, local] HRESULT FetchChars(
		[in] int ichMin,
		[in] int ichLim,
		[in, out, size_is(ichLim - ichMin)] OLECHAR * prgch);

	
	[propget] HRESULT PropertiesAt(
		[in] int ich,
		[out, retval] ITsTextProps ** pttp);
	[propget] HRESULT Properties(
		[in] int irun,
		[out, retval] ITsTextProps ** pttp);


	
	
	
	
	
	
	HRESULT Replace(
		[in] int ichMin,
		[in] int ichLim,
		[in] BSTR bstrIns,
		[in] ITsTextProps * pttp);
	
	
	
	HRESULT ReplaceTsString(
		[in] int ichMin,
		[in] int ichLim,
		[in] ITsString * ptssIns);
	
	
	
	HRESULT ReplaceRgch(
		[in] int ichMin,
		[in] int ichLim,
		[in, size_is(cchIns)] const OLECHAR * prgchIns,
		[in] int cchIns,
		[in] ITsTextProps * pttp);

	
	HRESULT SetProperties(
		[in] int ichMin,
		[in] int ichLim,
		[in] ITsTextProps * pttp);

	
	
	HRESULT SetIntPropValues(
		[in] int ichMin,
		[in] int ichLim,
		[in] int tpt,
		[in] int nVar,
		[in] int nVal);
	
	
	HRESULT SetStrPropValue(
		[in] int ichMin,
		[in] int ichLim,
		[in] int tpt,
		[in] BSTR bstrVal);

	
	HRESULT GetString(
		[out, retval] ITsString ** pptss);

	HRESULT Clear(
		);
};












cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ITsIncStrBldr") cpp_quote(",") cpp_quote("87ECD3CD-6011-485F-8651-DBA0B79245AF") cpp_quote(");") [ uuid("87ECD3CD-6011-485F-8651-DBA0B79245AF"), object, pointer_default(unique) ] interface ITsIncStrBldr : IUnknown
{
	
	[propget, id(0)] HRESULT Text(
		[out, retval] BSTR * pbstr);

	
	
	HRESULT Append(
		[in] BSTR bstrIns);
	
	HRESULT AppendTsString(
		[in] ITsString * ptssIns);
	
	[restricted] HRESULT AppendRgch(
		[in, size_is(cchIns)] const OLECHAR * prgchIns,
		[in] int cchIns);


	
	
	
	HRESULT SetIntPropValues(
		[in] int tpt,
		[in] int nVar,
		[in] int nVal);
	
	
	
	HRESULT SetStrPropValue(
		[in] int tpt,
		[in] BSTR bstrVal);

	
	HRESULT GetString(
		[out, retval] ITsString ** pptss);

	HRESULT Clear(
		);

	
	
	HRESULT SetStrPropValueRgch(
		[in] int tpt,
		[in, size_is(nValLength)] const byte* rgchVal,
		[in] int nValLength);
	
	HRESULT ClearProps();
};






cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ITsPropsBldr") cpp_quote(",") cpp_quote("F1EF76E8-BE04-11d3-8D9A-005004DEFEC4") cpp_quote(");") [ uuid("F1EF76E8-BE04-11d3-8D9A-005004DEFEC4"), object, pointer_default(unique) ] interface ITsPropsBldr : IUnknown
{
	
	[propget] HRESULT IntPropCount(
		[out, retval] int * pcv);
	
	HRESULT GetIntProp(
		[in] int iv,
		[out] int * ptpt,
		[out] int * pnVar,
		[out, retval] int * pnVal);
	
	
	HRESULT GetIntPropValues(
		[in] int tpt,
		[out] int * pnVar,
		[out, retval] int * pnVal);

	
	[propget] HRESULT StrPropCount(
		[out, retval] int * pcv);
	
	HRESULT GetStrProp(
		[in] int iv,
		[out] int * ptpt,
		[out, retval] BSTR * pbstrVal);
	
	
	HRESULT GetStrPropValue(
		[in] int tpt,
		[out, retval] BSTR * pbstrVal);


	
	HRESULT SetIntPropValues(
		[in] int tpt,
		[in] int nVar,
		[in] int nVal);
	
	HRESULT SetStrPropValue(
		[in] int tpt,
		[in] BSTR bstrVal);
	
	
	HRESULT SetStrPropValueRgch(
		[in] int tpt,
		[in, size_is(nValLength)] const byte* rgchVal,
		[in] int nValLength);

	
	
	HRESULT GetTextProps(
		[out, retval] ITsTextProps ** ppttp);

	
	HRESULT Clear();
};









cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ITsMultiString") cpp_quote(",") cpp_quote("DD409520-C212-11d3-9BB7-00400541F9E9") cpp_quote(");") [ uuid("DD409520-C212-11d3-9BB7-00400541F9E9"), object, pointer_default(unique) ] interface ITsMultiString : IUnknown
{
	
	[propget] HRESULT StringCount(
		[out, retval] int * pctss);

	
	
	
	
	
	HRESULT GetStringFromIndex(
		[in] int iws,
		[out] int * pws,
		[out, retval] ITsString ** pptss);

	
	
	[propget] HRESULT String(
		[in] int ws,
		[out, retval] ITsString ** pptss);

	
	
	[propputref] HRESULT String(
		[in] int ws,
		[in] ITsString * ptss);
};


typedef [v1_enum] enum StyleType
{
	kstParagraph = 0,
	kstCharacter,
	kstLim
} StyleType;




typedef [v1_enum] enum VwBulNum {
	kvbnNone = 0,
	kvbnNumberBase = 10,	
	kvbnArabic = kvbnNumberBase,
	kvbnRomanUpper,
	kvbnRomanLower,
	kvbnLetterUpper,
	kvbnLetterLower,
	kvbnArabic01,
	kvbnNumberMax,
	
	
	kvbnBulletBase = 100,	
	kvbnBullet = kvbnBulletBase,
	kvbnBulletMax = kvbnBulletBase + 100 
} VwBulNum; 





















cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IVwStylesheet") cpp_quote(",") cpp_quote("D77C0DBC-C7BC-441d-9587-1E3664E1BCD3") cpp_quote(");") [ uuid("D77C0DBC-C7BC-441d-9587-1E3664E1BCD3"), object, pointer_default(unique) ] interface IVwStylesheet : IUnknown
{
	
	
	HRESULT GetDefaultBasedOnStyleName(
		[out, retval] BSTR * pbstrNormal);

	
	HRESULT GetDefaultStyleForContext(
		[in] int nContext,
		[in] ComBool fCharStyle,
		[out, retval] BSTR * pbstrStyleName);

	
	
	HRESULT PutStyle(
		[in] BSTR bstrName,
		[in] BSTR bstrUsage,
		[in] HVO hvoStyle,
		[in] HVO hvoBasedOn,
		[in] HVO hvoNext,
		[in] int nType,
		[in] ComBool fBuiltIn,
		[in] ComBool fModified,
		[in] ITsTextProps * pttp);
	

	
	
	
	
	
	HRESULT GetStyleRgch(
		[in] int cch,
		[in, size_is(cch)] OLECHAR * prgchName,
		[out, retval] ITsTextProps ** ppttp);

	
	
	
	
	HRESULT GetNextStyle(
		[in] BSTR bstrName,
		[out, retval] BSTR * pbstrNext);
	
	
	HRESULT GetBasedOn(
		[in] BSTR bstrName,
		[out, retval] BSTR * pbstrBasedOn);
	
	
	
	
	
	
	HRESULT GetType(
		[in] BSTR bstrName,
		[out, retval] int * pnType);

	
	
	
	
	HRESULT GetContext(
		[in] BSTR bstrName,
		[out, retval] int * pnContext);

	
	
	HRESULT IsBuiltIn(
		[in] BSTR bstrName,
		[out, retval] ComBool * pfBuiltIn);

	
	
	HRESULT IsModified(
		[in] BSTR bstrName,
		[out, retval] ComBool * pfModified);

	

	
	
	
	[propget] HRESULT DataAccess(
		[out, retval] ISilDataAccess ** ppsda);

	
	HRESULT MakeNewStyle(
		[out, retval] HVO * phvoNewStyle);

	
	HRESULT Delete(
		[in] HVO hvoStyle);
	
	[propget] HRESULT CStyles(
		[out, retval] int * pcttp);
	
	[propget] HRESULT NthStyle(
		[in] int ihvo,
		[out, retval] HVO * phvo);

	
	[propget] HRESULT NthStyleName(
		[in] int ihvo,
		[out, retval] BSTR * pbstrStyleName);

	
	
	
	[propget] HRESULT NormalFontStyle(
		[out, retval] ITsTextProps ** ppttp);

	
	[propget] HRESULT IsStyleProtected(
		[in] BSTR bstrName,
		[out, retval] ComBool * pfProtected);

	
	
	
	
	HRESULT CacheProps(
		[in] int cch,
		[in, size_is(cch)] OLECHAR * prgchName,
		[in] HVO hvoStyle,
		[in] ITsTextProps * pttp);


	






















#line 1463 "c:\\develop\\fwrepo\\fw\\src\\kernel\\TextServ.idh"
};






cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("F3359BD1-EFA1-49E6-A82E-E55893FE63E0") cpp_quote(",") cpp_quote("TsStrFactory") cpp_quote(");") [ uuid(F3359BD1-EFA1-49E6-A82E-E55893FE63E0) ] coclass TsStrFactory
{
	interface ITsStrFactory;
	interface IMarshal;
};


cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("396D737F-3BFD-4BDA-A8CA-8242098EF798") cpp_quote(",") cpp_quote("TsPropsFactory") cpp_quote(");") [ uuid(396D737F-3BFD-4BDA-A8CA-8242098EF798) ] coclass TsPropsFactory
{
	interface ITsPropsFactory;
	interface IMarshal;
};


cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("426038D4-2E52-4329-B697-FB926FF7538C") cpp_quote(",") cpp_quote("TsStrBldr") cpp_quote(");") [ uuid(426038D4-2E52-4329-B697-FB926FF7538C) ] coclass TsStrBldr
{
	interface ITsStrBldr;
};


cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("BD8EFD5A-2ACC-40AC-B73B-051344525B5B") cpp_quote(",") cpp_quote("TsIncStrBldr") cpp_quote(");") [ uuid(BD8EFD5A-2ACC-40AC-B73B-051344525B5B) ] coclass TsIncStrBldr
{
	interface ITsIncStrBldr;
};


cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("F1EF76ED-BE04-11d3-8D9A-005004DEFEC4") cpp_quote(",") cpp_quote("TsPropsBldr") cpp_quote(");") [ uuid(F1EF76ED-BE04-11d3-8D9A-005004DEFEC4) ] coclass TsPropsBldr
{
	interface ITsPropsBldr;
};
#line 1501 "c:\\develop\\fwrepo\\fw\\src\\kernel\\TextServ.idh"

#line 22 "C:\\develop\\fwrepo\\fw\\src\\Kernel\\FwKernelTlb.idl"
	#line 1 "c:\\develop\\fwrepo\\fw\\src\\kernel\\Render.idh"


















	
	
	
	interface ILgInputMethodEditor;
	interface ILgLineBreakEngine;
	interface IVwGraphics;
	interface ILgWritingSystemFactory;
	interface IJustifyingRenderer;

	
	typedef [v1_enum] enum LgLineBreak {

		klbNoBreak = 0,			
		klbWsBreak = 10,
		klbWordBreak = 15,		
		klbGoodBreak = 19,		
		klbHyphenBreak = 20,	
		klbLetterBreak = 30,	
		klbClipBreak = 40		
	} LgLineBreak;  











	
	
	
	
	typedef [v1_enum] enum LgLineBreakStatus
	{
		kflbsBrk = 0x1,		
		kflbsSpace = 0x2,	
							
							
		kflbsBrkL = 0x4		
	} LgLineBreakStatus;	

	typedef [v1_enum] enum LgIPDrawMode			
	{
		kdmNormal,			
		kdmSplitPrimary,	
		kdmSplitSecondary	
	} LgIPDrawMode;

	typedef [v1_enum] enum LgIpValidResult		
	{
		kipvrOK,		
		kipvrBad,		
		kipvrUnknown	
	} LgIpValidResult;

	typedef [v1_enum] enum LgTrailingWsHandling		
	{
		ktwshAll,		
		ktwshNoWs,		
		ktwshOnlyWs,	
	} LgTrailingWsHandling;

	typedef [v1_enum] enum LgUtfForm
	{
		kutf8,
		kutf16,
		kutf32
	} LgUtfForm;

	
	

	typedef [v1_enum] enum VwGenericFontNames
	{
		kvgfnCustom,			
		kvgfnSerif,
		kvgfnSansSerif,
		kvgfnMonospace
	} VwGenericFontNames;

	typedef [v1_enum] enum VwFontStyle {
		kfsNormal,
		kfsItalic,
		kfsOblique
	} VwFontStyle;

	typedef [v1_enum] enum VwTextUnderline {
		ktuNoUnderline,
		ktuSingleUnderline
	} VwTextUnderline;

	

	
	
	
	
	
	
	
	
	

	
	
	
	

	
	
	
	
	

	
	
	
	
	
	
	
	typedef struct
	{
		COLORREF clrFore;
		COLORREF clrBack;
		COLORREF clrUnder;		
		int dympOffset;		
		int ws;
		byte fWsRtl;		
		int nDirDepth;		
		int ssv;			
		int unt;			
		
		
		
		
		
		int ttvBold;
		int ttvItalic;
		int dympHeight; 
		OLECHAR szFaceName[32];
		OLECHAR szFontVar[64];
	} LgCharRenderProps;	

	
	typedef enum ScriptDirCode
	{
		kfsdcNone			= 0,
		kfsdcHorizLtr		= 1,	
		kfsdcHorizRtl		= 2,	
		kfsdcVertFromLeft	= 4,	
		kfsdcVertFromRight	= 8,	

	} ScriptDirCode;	

	
	typedef enum JustGlyphAttr
	{
		kjgatStretch = 1,
		kjgatShrink,
		kjgatWeight,
		kjgatStep,
		kjgatChunk,
		kjgatWidth,
		kjgatBreak,
		
		kjgatStretchInSteps,
		kjgatWidthInSteps,
		
		kjgatAdvWidth,
		kjgatAdvHeight,
		kjgatBbLeft,
		kjgatBbRight,
		kjgatBbTop,
		kjgatBbBottom,

	} JustGlyphAttr;	

	
	
	
	
	typedef struct
	{
	
	
	
	
	
	
	
	
	
	
	
	
		ScriptDirCode sdcPara;		
		ScriptDirCode sdcOuter;		
	} LgParaRenderProps;	

	typedef struct
	{
		OLECHAR glyphIndex;
		int x;
		int y;
	} GlyphInfo;

	





	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ISimpleInit") cpp_quote(",") cpp_quote("6433D19E-2DA2-4041-B202-DB118EE1694D") cpp_quote(");") [ uuid("6433D19E-2DA2-4041-B202-DB118EE1694D"), object, pointer_default(unique) ] interface ISimpleInit : IUnknown
	{
		[restricted] HRESULT InitNew(
			[in, size_is(cb)] const BYTE * prgb,
			[in] int cb);

		
		[propget, restricted] HRESULT InitializationData(
			[out, retval] BSTR * pbstr);
	};


	







	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IVwGraphics") cpp_quote(",") cpp_quote("F7233278-EA87-4FC9-83E2-CB7CC45DEBE7") cpp_quote(");") [ uuid("F7233278-EA87-4FC9-83E2-CB7CC45DEBE7"), object, pointer_default(unique) ] interface IVwGraphics : IUnknown
	{
		
		
		HRESULT InvertRect(
			[in] int xLeft,
			[in] int yTop,
			[in] int xRight,
			[in] int yBottom);
		
		[propput] HRESULT ForeColor(
			[in] int clr);   
		
		[propput] HRESULT BackColor(
			[in] int clr);   
		
		HRESULT DrawRectangle(
			[in] int xLeft,
			[in] int yTop,
			[in] int xRight,
			[in] int yBottom);
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		HRESULT DrawHorzLine(
			[in] int xLeft,
			[in] int xRight,
			[in] int y,
			[in] int dyHeight,
			[in] int cdx,
			[in, size_is(cdx)] int * prgdx,
			[in, out] int * pdxStart);
		HRESULT DrawLine(
			[in] int xLeft,
			[in] int yTop,
			[in] int xRight,
			[in] int yBottom);
		HRESULT DrawText(
			[in] int x,
			[in] int y,
			[in] int cch,
			[in, size_is(cch)] const OLECHAR * prgch,
			[in] int xStretch); 
		HRESULT DrawGlyphs(
			[in] int x,
			[in] int y,
			[in] int cgi,
			[in, size_is(cgi)] const GlyphInfo * prggi);
		HRESULT GetTextExtent(
			[in] int cch,
			[in, size_is(cch)] const OLECHAR * prgch,
			[out] int * px,
			[out] int * py);
		
		
		HRESULT GetTextLeadWidth(
			[in] int cch,
			[in, size_is(cch)] const OLECHAR * prgch,
			[in] int ich,
			[in] int xStretch,
			[out, retval] int * px);
		HRESULT GetClipRect(
			[out] int * pxLeft,
			[out] int * pyTop,
			[out] int * pxRight,
			[out] int * pyBottom);
		
		HRESULT GetFontEmSquare(
			[out, retval] int * pxyFontEmSquare);
		HRESULT GetGlyphMetrics(
			[in] int chw,
			[out] int * psBoundingWidth,
			[out] int * pyBoundingHeight,
			[out] int * pxBoundingX,
			[out] int * pyBoundingY,
			[out] int * pxAdvanceX,
			[out] int * pyAdvanceY);
		
		HRESULT GetFontData(
			[in] int nTableId,
			[in, out] int * pcbTableSz,
			[out, size_is(*pcbTableSz)] BYTE * prgb);
		HRESULT XYFromGlyphPoint(
			[in] int chw,
			[in] int nPoint,
			[out] int * pxRet,
			[out] int * pyRet);
		[propget] HRESULT FontAscent(
			[out, retval] int * py);
		[propget] HRESULT FontDescent(
			[out, retval] int * pyRet);
		[propget] HRESULT FontCharProperties(
			[out, retval] LgCharRenderProps * pchrp);
		
		
		
		
		
		HRESULT ReleaseDC();
		
		
		
		[propget] HRESULT XUnitsPerInch(
			[out, retval] int * pxInch);
		
		[propput] HRESULT XUnitsPerInch(
			[in] int xInch);
		
		
		
		[propget] HRESULT YUnitsPerInch(
			[out, retval] int * pyInch);
		
		[propput] HRESULT YUnitsPerInch(
			[in] int yInch);

		
		
		HRESULT GetSuperscriptHeightRatio(
			[out] int * piNumerator,
			[out] int * piDenominator);
		
		
		HRESULT GetSuperscriptYOffsetRatio(
			[out] int * piNumerator,
			[out] int * piDenominator);

		
		
		HRESULT GetSubscriptHeightRatio(
			[out] int * piNumerator,
			[out] int * piDenominator);
		
		
		HRESULT GetSubscriptYOffsetRatio(
			[out] int * piNumerator,
			[out] int * piDenominator);

		
		
		
		HRESULT SetupGraphics(
		
			[in, out] LgCharRenderProps * pchrp);
		
		
		HRESULT PushClipRect(
			[in] RECT rcClip);
		HRESULT PopClipRect();

		
		HRESULT DrawPolygon(
			[in] int cvpnt,
			[in, size_is(cvpnt)] POINT prgvpnt[]);
		
		HRESULT RenderPicture(
		  [in] IPicture * ppic, 
		  [in] int x,  
		  [in] int y,  
		  [in] int cx, 
		  [in] int cy, 
		  [in] OLE_XPOS_HIMETRIC xSrc, 
		  [in] OLE_YPOS_HIMETRIC ySrc, 
		  [in] OLE_XSIZE_HIMETRIC cxSrc, 
		  [in] OLE_YSIZE_HIMETRIC cySrc, 
		  [in] LPCRECT prcWBounds); 
		
		
		
		
		
		
		
		
		HRESULT MakePicture(
			[in, size_is(cbData)] byte * pbData,
			[in] int cbData,
			[out, retval] IPicture ** pppic);
		
		
	};

	




	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IVwGraphicsWin32") cpp_quote(",") cpp_quote("C955E295-A259-47D4-8158-4C7A3539D35E") cpp_quote(");") [ uuid("C955E295-A259-47D4-8158-4C7A3539D35E"), object, pointer_default(unique) ] interface IVwGraphicsWin32 : IVwGraphics
	{
		
		
		
		HRESULT Initialize(
			[in] HDC hdc);
		
		HRESULT GetDeviceContext(
			[out, retval] HDC * phdc);
		
		
		HRESULT SetMeasureDc(
			[in] HDC hdc);
		
		
		HRESULT SetClipRect(
			[in] RECT * prcClip);
		
		HRESULT GetTextStyleContext( [out, retval] HDC * ppContext);
	};


	
	
	
	
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("D888DB98-83A9-4592-AAD2-F18F6F74AB87") cpp_quote(",") cpp_quote("VwGraphicsWin32") cpp_quote(");") [ uuid(D888DB98-83A9-4592-AAD2-F18F6F74AB87) ] coclass VwGraphicsWin32
	{
		interface IVwGraphicsWin32;
	};
	#line 490 "c:\\develop\\fwrepo\\fw\\src\\kernel\\Render.idh"


	


	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IVwTextSource") cpp_quote(",") cpp_quote("6C0465AC-17C5-4C9C-8AF3-62221F2F7707") cpp_quote(");") [ uuid("6C0465AC-17C5-4C9C-8AF3-62221F2F7707"), object, pointer_default(unique) ] interface IVwTextSource : IUnknown
	{
		
		
		HRESULT Fetch(
			[in] int ichMin,
			[in] int ichLim,
			[out, size_is(ichLim - ichMin)] OLECHAR * prgchBuf);
		[propget] HRESULT Length(
			[out, retval] int * pcch);
		
		
		
		
		
		HRESULT FetchSearch(
			[in] int ichMin,
			[in] int ichLim,
			[out, size_is(ichLim - ichMin)] OLECHAR * prgchBuf);
		
		[propget] HRESULT LengthSearch(
			[out, retval] int * pcch);
		
		
		
		
		
		
		
		
		
		HRESULT GetCharProps(
			[in] int ich,
			[out] LgCharRenderProps * pchrp,
			[out] int * pichMin,
			[out] int * pichLim);
		
		HRESULT GetParaProps(
			[in] int ich,
			[out] LgParaRenderProps * pchrp,
			[out] int * pichMin,
			[out] int * pichLim);
		
		
		
		
		
		
		
		
		
		HRESULT GetCharStringProp(
			[in] int ich,
			[in] int nId, 
			[out] BSTR * pbstr,
			[out] int * pichMin,
			[out] int * pichLim);
		
		
		HRESULT GetParaStringProp(
			[in] int ich,
			[in] int nId, 
			[out] BSTR * pbstr,
			[out] int * pichMin,
			[out] int * pichLim);
		
		
		
		HRESULT GetSubString(
			[in] int ichMin,
			[in] int ichLim,
			[out, retval] ITsString ** pptss);
		
		HRESULT GetWsFactory(
			[out, retval] ILgWritingSystemFactory ** ppwsf);
		
		
		HRESULT LogToSearch(
			[in] int ichlog,
			[out, retval] int * pichSearch);
		
		
		
		
		
		
		HRESULT SearchToLog(
			[in] int ichSearch,
			[in] ComBool fAssocPrev,
			[out, retval] int * pichLog);
		
		HRESULT LogToRen(
			[in] int ichLog,
			[out, retval] int * pichRen);
		
		HRESULT RenToLog(
			[in] int ichRen,
			[out, retval] int * pichLog);
		
		
		
		
		
		HRESULT SearchToRen(
			[in] int ichSearch,
			[in] ComBool fAssocPrev,
			[out, retval] int * pichRen);
		
		HRESULT RenToSearch(
			[in] int ichRen,
			[out, retval] int * pichSearch);
	};


	



	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IVwJustifier") cpp_quote(",") cpp_quote("22D5E030-5239-4924-BF1B-6B4F2CBBABA5") cpp_quote(");") [ uuid("22D5E030-5239-4924-BF1B-6B4F2CBBABA5"), object, pointer_default(unique) ] interface IVwJustifier : IUnknown
	{
		
		
		
		HRESULT AdjustGlyphWidths(
			[in] IJustifyingRenderer * pjren,
			[in] int iGlyphMin,
			[in] int iGlyphLim,
			[in] float dxCurrentWidth,
			[in] float dxDesiredWidth);

		









	};

	






























































	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ILgSegment") cpp_quote(",") cpp_quote("3818E245-6A0B-45A7-A5D6-52694931279E") cpp_quote(");") [ uuid("3818E245-6A0B-45A7-A5D6-52694931279E"), object, pointer_default(unique) ] interface ILgSegment : IUnknown
	{
		
		HRESULT DrawText(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[in] RECT rcSrc,
			[in] RECT rcDst,
			[out] int * dxdWidth);

		
		
		
		HRESULT Recompute(
			[in] int ichBase,
			[in] IVwGraphics * pvg);
		[propget] HRESULT Width(   
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[out, retval] int * px);
		[propget] HRESULT RightOverhang( 
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[out, retval] int * px);
		[propget] HRESULT LeftOverhang( 
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[out, retval] int * px);
		[propget] HRESULT Height(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[out, retval] int * py);
		[propget] HRESULT Ascent(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[out, retval] int * py);
		HRESULT Extent(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[out] int* px, 
			[out] int* py);	 
		
		
		
		HRESULT BoundingRect(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[in] RECT rcSrc,
			[in] RECT rcDst,
			[out, retval] RECT * prcBounds);
		
		
		HRESULT GetActualWidth(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[in] RECT rcSrc,
			[in] RECT rcDst,
			[out] int * dxdWidth);
		
		[propget] HRESULT AscentOverhang(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[out, retval] int *py);
		[propget] HRESULT DescentOverhang(	
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[out, retval] int *py);

		
		[propget] HRESULT RightToLeft(
			[in] int ichBase,
			[out, retval] ComBool * pfResult);
		
		
		[propget] HRESULT DirectionDepth(
			[in] int ichBase,
			[out] int * pnDepth,
			[out,retval] ComBool * pfWeak);
		
		
		HRESULT SetDirectionDepth(
			[in] int ichwBase,
			[in] int nNewDepth);

		
		[propget] HRESULT WritingSystem(
			[in] int ichBase,
			[out,retval] int * pws);
		
		
		
		
		
		[propget] HRESULT Lim(
			[in] int ichBase,
			[out, retval] int * pdich);
		
		
		
		
		
		[propget] HRESULT LimInterest(
			[in] int ichBase,
			[out, retval] int * pdich);

		
		[propput] HRESULT EndLine( 
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[in] ComBool fNewVal);
		[propput] HRESULT StartLine( 
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[in] ComBool fNewVal);
		[propget] HRESULT StartBreakWeight(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[out, retval] LgLineBreak * plb);
		[propget] HRESULT EndBreakWeight(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[out, retval] LgLineBreak * plb);
		[propget] HRESULT Stretch( 
			[in] int ichBase,
			[out, retval] int * pxs);
		[propput] HRESULT Stretch(
			[in] int ichBase,
			[in] int xs);

		
		
		
		
		
		
		
		HRESULT IsValidInsertionPoint(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[in] int ich,
			[out, retval] LgIpValidResult * pipvr);
		HRESULT DoBoundariesCoincide(    
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[in] ComBool fBoundaryEnd,   
			[in] ComBool fBoundaryRight, 
			[out, retval] ComBool * pfResult);
		HRESULT DrawInsertionPoint(		
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[in] RECT rcSrc,		
			[in] RECT rcDst,
			[in] int ich,				
			[in] ComBool fAssocPrev,		
			[in] ComBool fOn,				
			[in] LgIPDrawMode dm);
		HRESULT PositionsOfIP(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[in] RECT rcSrc,		
			[in] RECT rcDst,
			[in] int ich,
			[in] ComBool fAssocPrev,		
			[in] LgIPDrawMode dm,
			[out] RECT * rectPrimary,	
			[out] RECT * rectSecondary, 
			[out] ComBool * pfPrimaryHere, 
			[out] ComBool * pfSecHere); 
										
		HRESULT DrawRange(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[in] RECT rcSrc,		
			[in] RECT rcDst,
			[in] int ichMin,			
			[in] int ichLim,
			[in] int ydTop,			
			[in] int ydBottom,		
			[in] ComBool bOn,
			[in] ComBool fIsLastLineOfSelection, 
			[out, retval] RECT * rsBounds);	
		HRESULT PositionOfRange(
			[in] int ichBase,
			[in] IVwGraphics* pvg,
			[in] RECT rcSrc,		
			[in] RECT rcDst,
			[in] int ichMin,
			[in] int ichim,
			[in] int ydTop,			
			[in] int ydBottom,		
			[in] ComBool fIsLastLineOfSelection, 
			[out] RECT * rsBounds,	
			[out, retval] ComBool * pfAnythingToDraw); 
		HRESULT PointToChar(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[in] RECT rcSrc,		
			[in] RECT rcDst,
			[in] POINT ptdClickPosition,	
			[out] int * pich,
			[out] ComBool * pfAssocPrev);	
		HRESULT ArrowKeyPosition(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[in,out] int * pich,
			[in, out] ComBool * pfAssocPrev,	
			[in] ComBool fRight,		
			[in] ComBool fMovingIn,		
			[out] ComBool * pfResult);	
		HRESULT ExtendSelectionPosition(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[in, out] int * pich,
			[in] ComBool fAssocPrevMatch,	
											
			[in] ComBool fAssocPrevNeeded,	
			[in] int ichAnchor,			
			[in] ComBool fRight,		
			[in] ComBool fMovingIn,		
			[out] ComBool * pfRet);		

		
		
		
		
		HRESULT GetCharPlacement(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[in] int ichMin,
			[in] int ichLim,
			[in] RECT rcSrc,		
			[in] RECT rcDst,
			
			[in] ComBool fSkipSpace,
			[in] int cxdMax , 
			[out] int * pcxd, 
			
			
			
			
			
			
			[out, size_is(cxdMax )] int * prgxdLefts,
			[out, size_is(cxdMax )] int * prgxdRights,
			[out, size_is(cxdMax )] int * prgydUnderTops);

		
		











		
		





		
		
		HRESULT DrawTextNoBackground(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[in] RECT rcSrc,
			[in] RECT rcDst,
			[out] int * dxdWidth);
	};

	
	typedef [v1_enum] enum
	{
		
		kestNoMore,
		
		kestMoreLines,
		
		
		
		kestHardBreak,
		
		
		
		kestBadBreak,
		
		
		
		kestOkayBreak,
		
		
		
		
		
		kestWsBreak,
		
		
		
		kestMoreWhtsp,
		
		kestNothingFit

	} LgEndSegmentType; 

	





	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IRenderEngine") cpp_quote(",") cpp_quote("7F4B8F79-2A40-408C-944B-848B14D65D23") cpp_quote(");") [ uuid("7F4B8F79-2A40-408C-944B-848B14D65D23"), object, pointer_default(unique) ] interface IRenderEngine : IUnknown
	{
		
		
		
		
		
		HRESULT InitRenderer(
			[in] IVwGraphics * pvg,
			[in] BSTR bstrData);
		
		
		[propget] HRESULT FontIsValid(
			[out, retval] ComBool * pfValid);

		
		
		
		
		[propget] HRESULT SegDatMaxLength(
			[out, retval] int * cb);

		
		HRESULT FindBreakPoint(
			[in] IVwGraphics * pvg,
			[in] IVwTextSource * pts,
			[in] IVwJustifier * pvjus,
			
			[in] int ichMin,
			
			
			
			
			
			[in] int ichLim,
			
			
			[in] int ichLimBacktrack,
			
			
			
			
			[in] ComBool fNeedFinalBreak,
			[in] ComBool fStartLine,			
			[in] int dxMaxWidth,				
			[in] LgLineBreak lbPref,			
			[in] LgLineBreak lbMax,				
			[in] LgTrailingWsHandling twsh,		
			[in] ComBool fParaRightToLeft,		

			[out] ILgSegment ** ppsegRet,		
			[out] int * pdichLimSeg,			
			[out] int * pdxWidth,				
			[out] LgEndSegmentType * pest,		
			[in] ILgSegment * psegPrev);		

		
		

		
		[propget] HRESULT ScriptDirection(
			[out, retval] int * pgrfsdc);

		
		[propget] HRESULT ClassId(
			[out, retval] GUID * pguid);

		
		[propget] HRESULT WritingSystemFactory(
			[out, retval] ILgWritingSystemFactory ** ppwsf);

		
		[propputref] HRESULT WritingSystemFactory(
			[in] ILgWritingSystemFactory * pwsf);
	};

	
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("6EACAB83-6BDC-49CA-8F66-8C116D3EEBD8") cpp_quote(",") cpp_quote("RomRenderEngine") cpp_quote(");") [ uuid(6EACAB83-6BDC-49CA-8F66-8C116D3EEBD8) ] coclass RomRenderEngine
	{
		interface IRenderEngine;
	};
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("1287735C-3CAD-41CD-986C-39D7C0DF0314") cpp_quote(",") cpp_quote("UniscribeEngine") cpp_quote(");") [ uuid(1287735C-3CAD-41CD-986C-39D7C0DF0314) ] coclass UniscribeEngine
	{
		interface IRenderEngine;
	};
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("62EBEEBF-14EA-43D9-A27A-EF013E14145A") cpp_quote(",") cpp_quote("GraphiteEngine") cpp_quote(");") [ uuid(62EBEEBF-14EA-43D9-A27A-EF013E14145A) ] coclass GraphiteEngine
	{
		interface IRenderEngine;
	};
	#line 1106 "c:\\develop\\fwrepo\\fw\\src\\kernel\\Render.idh"


	





	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IRenderingFeatures") cpp_quote(",") cpp_quote("75AFE861-3C17-4F16-851F-A36F5FFABCC6") cpp_quote(");") [ uuid("75AFE861-3C17-4F16-851F-A36F5FFABCC6"), object, pointer_default(unique) ] interface IRenderingFeatures : IUnknown
	{
		



		
		
		HRESULT GetFeatureIDs(
			[in] int cMax,                         
			[out, size_is(cMax)] int * prgFids,    
			[out] int * pcfid);			           

		
		HRESULT GetFeatureLabel(
			[in] int fid,
			[in] int nLanguage,
			[out] BSTR * pbstrLabel);

		
		
		HRESULT GetFeatureValues(
			[in] int fid,
			[in] int cfvalMax,                          
			[out, size_is(cfvalMax)] int * prgfval,     
			[out] int * pcfval,                         
			[out] int * pfvalDefault);                  

		
		HRESULT GetFeatureValueLabel(
			[in] int fid,
			[in] int fval,
			[in] int nLanguage,
			[out] BSTR * pbstrLabel);
	};

	







	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IJustifyingRenderer") cpp_quote(",") cpp_quote("1141174B-923F-4C43-BA43-8A326B76A3F2") cpp_quote(");") [ uuid("1141174B-923F-4C43-BA43-8A326B76A3F2"), object, pointer_default(unique) ] interface IJustifyingRenderer : IUnknown
	{
		
		HRESULT GetGlyphAttributeFloat(
			[in] int iGlyph,				
			[in] int kjgatId,				
			[in] int nLevel,				
			[out] float * pValueRet);		
		HRESULT GetGlyphAttributeInt(
			[in] int iGlyph,				
			[in] int kjgatId,				
			[in] int nLevel,				
			[out] int * pValueRet);			

		
		HRESULT SetGlyphAttributeFloat(
			[in] int iGlyph,				
			[in] int kjgatId,				
			[in] int nLevel,				
			[in] float value);				
		HRESULT SetGlyphAttributeInt(
			[in] int iGlyph,				
			[in] int kjgatId,				
			[in] int nLevel,				
			[in] int value);				
	};














































#line 1231 "c:\\develop\\fwrepo\\fw\\src\\kernel\\Render.idh"

#line 23 "C:\\develop\\fwrepo\\fw\\src\\Kernel\\FwKernelTlb.idl"
	#line 1 "c:\\develop\\fwrepo\\fw\\src\\kernel\\Language.idh"


































	
	
	
	interface IRenderEngine;
	interface ILgCharacterPropertyEngine;
	interface ILgCollatingEngine;
	interface ICollation;
	interface ILgWritingSystem;
	interface ILgWritingSystemFactory;

	
	
	

	
	typedef [v1_enum] enum LgLBP
	{
				 
		klbpAI,  
		klbpAL,  
		klbpB2,  
		klbpBA,  
		klbpBB,  
		klbpBK,  
		klbpCB,  
		klbpCL,  
		klbpCM,  
		klbpCR,  
		klbpEX,  
		klbpGL,  
		klbpHY,  
		klbpID,  
		klbpIN,  
		klbpIS,  
		klbpLF,  
		klbpNS,  
		klbpNU,  
		klbpOP,  
		klbpPO,  
		klbpPR,  
		klbpQU,  
		klbpSA,  
		klbpSG,  
		klbpSP,  
		klbpSY,  
		klbpXX,  
		klbpZW   
	} LgLBP;  

	





























	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ILgWritingSystem") cpp_quote(",") cpp_quote("9C0513AB-1AB9-4741-9C49-FA65FA83B7CC") cpp_quote(");") [ uuid("9C0513AB-1AB9-4741-9C49-FA65FA83B7CC"), object, pointer_default(unique) ] interface ILgWritingSystem : IUnknown
	{
		
		[propget] HRESULT Id(
			[out, retval] BSTR *pbstr);

		
		
		[propget] HRESULT Handle(
			[out, retval] int * pws);

		
		[propget] HRESULT LanguageName(
			[out, retval] BSTR * pbstr);

		
		
		
		[propget] HRESULT SpellCheckingId(
			[out, retval] BSTR *pbstr);

		
		
		[propget] HRESULT RightToLeftScript(
			[out, retval] ComBool * pfRightToLeft);

		
		
		
		
		[propget] HRESULT Renderer(
			[in] IVwGraphics * pvg,
			[out, retval] IRenderEngine ** ppreneng);

		
		
		[propget] HRESULT DefaultFontFeatures(
			[out, retval] BSTR * pbstr);

		
		[propget] HRESULT DefaultFontName(
			[out, retval] BSTR * pbstr);

		
		
		HRESULT InterpretChrp(
			[in, out] LgCharRenderProps * pchrp);

		
		[propget] HRESULT UseNfcContext(
			[out, retval] ComBool * pUseNfc);

		
		
		[propget] HRESULT IsWordForming(
			[in] int ch,
			[out, retval] ComBool *pfRet);

		
		[propget] HRESULT IcuLocale(
			[out, retval] BSTR *pbstr);
	};

	
	
	

	
	
	

	
	
	
	
	
	
	
	typedef [v1_enum] enum LgCollatingOptions
	{
		fcoDefault = 0,
		fcoIgnoreCase = 1,
		fcoDontIgnoreVariant = 2,
		fcoLim 
	} LgCollatingOptions; 

	





















	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ILgCollatingEngine") cpp_quote(",") cpp_quote("D27A3D8C-D3FE-4E25-9097-8F4A1FB30361") cpp_quote(");") [ uuid("D27A3D8C-D3FE-4E25-9097-8F4A1FB30361"), object, pointer_default(unique) ] interface ILgCollatingEngine : IUnknown
	{
		
		
		
		[propget] HRESULT SortKey(
			[in] BSTR bstrValue,
			[in] LgCollatingOptions colopt,
			[out, retval] BSTR * pbstrKey);

		
		
		

		
		
		
		
		[restricted] HRESULT SortKeyRgch(
			[in, size_is(cchIn)] const OLECHAR * pch,
			[in] int cchIn,
			[in] LgCollatingOptions colopt,
			[in] int cchMaxOut,
			[out, size_is(cchMaxOut)] OLECHAR * pchKey,
			[out] int * pcchOut);

		
		
		
		
		
		
		HRESULT Compare(
			[in] BSTR bstrValue1,
			[in] BSTR bstrValue2,
			[in] LgCollatingOptions colopt,
			[out, retval] int * pnVal);

		
		[propget] HRESULT WritingSystemFactory(
			[out, retval] ILgWritingSystemFactory ** ppwsf);
		
		[propputref] HRESULT WritingSystemFactory(
			[in] ILgWritingSystemFactory * pwsf);

		
		

		
		
		
		[propget] HRESULT SortKeyVariant(
			[in] BSTR bstrValue,
			[in] LgCollatingOptions colopt,
			[out, retval] VARIANT * psaKey);		

		
		
		
		
		
		
		HRESULT CompareVariant(
			[in] VARIANT saValue1,			
			[in] VARIANT saValue2,			
			[in] LgCollatingOptions colopt,
			[out, retval] int * pnVal);

		
		HRESULT Open(
			[in] BSTR bstrLocale);

		
		HRESULT Close();

		
	};

	
















	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ILgLineBreaker") cpp_quote(",") cpp_quote("F8D5FDE9-9695-4D63-8843-E27FD880BFF0") cpp_quote(");") [ uuid("F8D5FDE9-9695-4D63-8843-E27FD880BFF0"), object, pointer_default(unique) ] interface ILgLineBreaker : IUnknown
	{
		HRESULT Initialize(
			[in] BSTR bstrLocale);

		
		
		
		
		
		[restricted] HRESULT GetLineBreakProps(
			[in, size_is(cchIn)] const OLECHAR * prgchIn,
			[in] int cchIn,
			[out, size_is(cchIn)] byte * prglbOut);

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		[restricted] HRESULT GetLineBreakInfo(
			[in, size_is(cchIn)] const OLECHAR * prgchIn,
			[in] int cchIn,
			[in] int ichMin,
			[in] int ichLim,
			[out, size_is(ichLim - ichMin)] byte * prglbsOut,
			[out] int * pichBreak);

		
		
		HRESULT GetLineBreakText(
			[in] int cchMax,
			[out] OLECHAR * prgchOut,
			[out] int * pcchOut);
		
		[propput] HRESULT LineBreakText(
			[in, size_is(cchMax)] OLECHAR * prgchIn,
			[in] int cchMax);

		
		
		
		
		HRESULT LineBreakBefore(
			[in] int ichIn,
			[out] int * pichOut,
			[out] LgLineBreak * plbWeight);

		
		
		
		
		HRESULT LineBreakAfter(
			[in] int ichIn,
			[out] int * pichOut,
			[out] LgLineBreak * plbWeight);
	};

	














	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ILgWritingSystemFactory") cpp_quote(",") cpp_quote("CC2BD14F-ACCE-4246-9192-9C29441A5A09") cpp_quote(");") [ uuid("CC2BD14F-ACCE-4246-9192-9C29441A5A09"), object, pointer_default(unique) ] interface ILgWritingSystemFactory : IUnknown
	{
		
		
		
		
		[propget] HRESULT Engine(
			[in] BSTR bstrId,
			[out, retval] ILgWritingSystem ** ppwseng);

		
		
		
		
		[propget] HRESULT EngineOrNull(
			[in] int ws,
			[out, retval] ILgWritingSystem ** ppwseng);

		
		
		HRESULT GetWsFromStr(
			[in] BSTR bstr,
			[out, retval] int * pws);
		
		
		HRESULT GetStrFromWs(
			[in] int ws,
			[out, retval] BSTR * pbstr);

		
		
		HRESULT GetIcuLocaleFromWs(
			[in] int ws,
			[out, retval] BSTR * pbstr);

		
		[propget] HRESULT NumberOfWs(
			[out, retval] int * pcws);
		
		HRESULT GetWritingSystems(
			[out, size_is(cws)] int * rgws,
			[in] int cws);

		
		[propget] HRESULT Renderer(
			[in] int ws,
			[in] IVwGraphics * pvg,
			[out, retval] IRenderEngine ** ppre);
		
		[propget] HRESULT RendererFromChrp(
			[in] IVwGraphics * pvg,
			
			[in, out] LgCharRenderProps * pchrp,
			[out, retval] IRenderEngine ** ppre);

		
		[propget] HRESULT UserWs(
			[out, retval] int * pws);
		
		
		[propput] HRESULT UserWs(
			[in] int ws);
	};
















cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ILgIcuConverterEnumerator") cpp_quote(",") cpp_quote("8E6D558E-8755-4EA1-9FF6-039D375312E9") cpp_quote(");") [ uuid("8E6D558E-8755-4EA1-9FF6-039D375312E9"), object, pointer_default(unique) ] interface ILgIcuConverterEnumerator : IUnknown
{
	
	[propget] HRESULT Count(
		[out, retval] int * pcconv);

	
	[propget] HRESULT ConverterName(
		[in] int iconv,
		[out,retval] BSTR * pbstrName);

	
	[propget] HRESULT ConverterId(
		[in] int iconv,
		[out,retval] BSTR * pbstrName);

};
















cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ILgIcuTransliteratorEnumerator") cpp_quote(",") cpp_quote("50F2492C-6C46-48BA-8B7F-5F04153AB2CC") cpp_quote(");") [ uuid("50F2492C-6C46-48BA-8B7F-5F04153AB2CC"), object, pointer_default(unique) ] interface ILgIcuTransliteratorEnumerator : IUnknown
{
	
	[propget] HRESULT Count(
		[out, retval] int * pctrans);

	
	[propget] HRESULT TransliteratorName(
		[in] int itrans,
		[out,retval] BSTR * pbstrName);

	
	[propget] HRESULT TransliteratorId(
		[in] int iconv,
		[out,retval] BSTR * pbstrName);
};














cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ILgIcuLocaleEnumerator") cpp_quote(",") cpp_quote("08F649D0-D8AB-447B-AAB6-21F85CFA743C") cpp_quote(");") [ uuid("08F649D0-D8AB-447B-AAB6-21F85CFA743C"), object, pointer_default(unique) ] interface ILgIcuLocaleEnumerator : IUnknown
{
	
	[propget] HRESULT Count(
		[out, retval] int * pclocale);

	
	[propget] HRESULT Name(
		[in] int iloc,
		[out, retval] BSTR * pbstrName);

	
	[propget] HRESULT Language(
		[in] int iloc,
		[out, retval] BSTR * pbstrName);

	
	[propget] HRESULT Country(
		[in] int iloc,
		[out, retval] BSTR * pbstrName);

	
	[propget] HRESULT Variant(
		[in] int iloc,
		[out, retval] BSTR * pbstrName);

	
	
	
	[propget] HRESULT DisplayName(
		[in] int iloc,
		[in] BSTR bstrLocaleName,
		[out, retval] BSTR * pbstrName);

};















cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ILgIcuResourceBundle") cpp_quote(",") cpp_quote("C243C72A-0D15-44D9-ABCB-A6E875A7659A") cpp_quote(");") [ uuid("C243C72A-0D15-44D9-ABCB-A6E875A7659A"), object, pointer_default(unique) ] interface ILgIcuResourceBundle : IUnknown
{
	
	
	HRESULT Init(
		[in] BSTR bstrPath,
		[in] BSTR locale);

	
	[propget] HRESULT Key(
		[out, retval] BSTR * pbstrKey);

	
	[propget] HRESULT String(
		[out, retval] BSTR * pbstrString);

	
	
	[propget] HRESULT Name(
		[out, retval] BSTR * pbstrName);

	
	
	[propget] HRESULT GetSubsection(
		[in] BSTR bstrSectionName,
		[out, retval] ILgIcuResourceBundle ** pprb);

	
	
	[propget] HRESULT HasNext(
		[out, retval] ComBool * pfHasNext);

	
	
	[propget] HRESULT Next(
		[out, retval] ILgIcuResourceBundle ** pprb);

	
	[propget] HRESULT Size(
		[out, retval] int * pcrb);

	
	[propget] HRESULT StringEx(
		[in] int irb,
		[out, retval] BSTR * pbstr);
};





	
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("0D9900D2-1693-481F-AA70-7EA64F264EC4") cpp_quote(",") cpp_quote("LgUnicodeCollater") cpp_quote(");") [ uuid(0D9900D2-1693-481F-AA70-7EA64F264EC4) ] coclass LgUnicodeCollater
	{
		interface ILgCollatingEngine;
	};

	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("94FBFA34-21E5-4A1E-B576-BA5D76CC051A") cpp_quote(",") cpp_quote("LgLineBreaker") cpp_quote(");") [ uuid(94FBFA34-21E5-4A1E-B576-BA5D76CC051A) ] coclass LgLineBreaker
	{
		interface ILgLineBreaker;
	};

	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("9E729461-F80D-4796-BA17-086BC61907F1") cpp_quote(",") cpp_quote("LgIcuConverterEnumerator") cpp_quote(");") [ uuid(9E729461-F80D-4796-BA17-086BC61907F1) ] coclass LgIcuConverterEnumerator
	{
		interface ILgIcuConverterEnumerator;
	};
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("3F1FD0A4-B2B1-4589-BC82-9CEF5BA84F4E") cpp_quote(",") cpp_quote("LgIcuTransliteratorEnumerator") cpp_quote(");") [ uuid(3F1FD0A4-B2B1-4589-BC82-9CEF5BA84F4E) ] coclass LgIcuTransliteratorEnumerator
	{
		interface ILgIcuTransliteratorEnumerator;
	};
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("0DD7FC1A-AB97-4A39-882C-269760D86619") cpp_quote(",") cpp_quote("LgIcuResourceBundle") cpp_quote(");") [ uuid(0DD7FC1A-AB97-4A39-882C-269760D86619) ] coclass LgIcuResourceBundle
	{
		interface ILgIcuResourceBundle;
	};
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("E426656C-64F7-480E-92F4-D41A7BFFD066") cpp_quote(",") cpp_quote("LgIcuLocaleEnumerator") cpp_quote(");") [ uuid(E426656C-64F7-480E-92F4-D41A7BFFD066) ] coclass LgIcuLocaleEnumerator
	{
		interface ILgIcuLocaleEnumerator;
	};
#line 673 "c:\\develop\\fwrepo\\fw\\src\\kernel\\Language.idh"
#line 24 "C:\\develop\\fwrepo\\fw\\src\\Kernel\\FwKernelTlb.idl"
};
