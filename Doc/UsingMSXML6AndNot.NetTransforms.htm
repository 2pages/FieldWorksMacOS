<html>
   <head>
	  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">

	  <!-- generated by XLingPap1.xsl Version 2.2.99-->
	  <title>Why are we using MSXML6?</title><style type="text/css">.interblock { display: -moz-inline-box; display:inline-block; vertical-align: top; } </style></head>
   <body>
	  <center><b><big><big><big>Why are we using MSXML6?</big></big></big></b></center>
	  <center><b><big><big>And why we are not using .Net</big></big></b></center>
	  <center><i>Andy Black</i></center><br><center><small>2-April-2009</small></center>
	  <p>What is at issue is how to perform XSLT transforms the most efficiently.  We have several options:</p>
	  <ol style="list-style-type:decimal; ">
		 <li>Use .Net's built-in XSLT transform capability</li>
		 <li>Use Microsoft's MSXML package</li>
		 <li>Use some other transform (e.g. Saxon <a href="http://saxon.sourceforge.net/">http://saxon.sourceforge.net/</a>).
		 </li>
	  </ol>
	  <p>At least for .Net version 2, running timing tests show that .Net is at least four times slower than the MSXML6 package.  The
		 code can be found in Src\Utilities\XMLUtils\XmlUtils.cs, especially the TransformFileToFile() method (the one with four arguments).
	  </p>
	  <p>The main downside of using Saxon is that it is a Java application, so using it would require us to include some version of
		 Java in our installation package. That is, Saxon for XSLT version 1 is a Java-only application. I see there is a .Net version
		 of Saxon for XSLT 2.0 that we could investigate. This may well prove to be a good move, but we'll have to do some testing
		 to make sure it is indeed faster and also produces equivalent results. It will still mean adding something else to our installation
		 package, of course. Whether that is a little or a lot needs to be determined.
	  </p>
	  <p></p>
   </body>
</html>