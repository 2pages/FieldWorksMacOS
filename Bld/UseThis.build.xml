<?xml version="1.0"?>
<!-- Build file that can be run on an archived build. It registers the dlls and builds the
	database.
	This file will be copied to the archive directory.
-->
<project name="Archive" default="all" xmlns="http://fieldworks.sil.org/nant/fwnant.xsd">
	<property name="verbose" value="false"/>
	<property name="silent" value="true"/>
	<property name="unregister" value="false"/>
	<property name="config" value="debug"/>
	<property name="srcdir" value="."/>

	<target name="all" description="Copies and registers">
		<if test="${not property::exists('targetdir')}">
			<fail message="need to specify target directory!"/>
		</if>
		<call target="copy" cascade="false"/>
		<call target="usethis" cascade="false"/>
	</target>

	<target name="usethis" description="Registers version in current directory">
		<if test="${not property::exists('targetdir')}">
			<property name="targetdir" value="${srcdir}"/>
		</if>
		<call target="setroot" cascade="false"/>
		<call target="register" cascade="false"/>
		<call target="build-databases" cascade="false"/>
	</target>

	<!-- callable targets -->
	<target name="verbose">
		<property name="verbose" value="true"/>
		<property name="silent" value="false"/>
	</target>

	<target name="debug">
		<property name="config" value="debug"/>
	</target>

	<target name="release">
		<property name="config" value="release"/>
	</target>

	<target name="register">
		<property name="unregister" value="false"/>
		<call target="doregistercom" cascade="false"/>
		<call target="doregisternet" cascade="false"/>
		<call target="doregistry" cascade="false"/>
	</target>

	<target name="unregister">
		<property name="unregister" value="true"/>
		<call target="doregistercom" cascade="false"/>
		<call target="doregisternet" cascade="false"/>
	</target>

	<target name="setroot">
		<writeregistry hive="LocalMachine" key="SOFTWARE/SIL/FieldWorks/RootCodeDir"
			value="${targetdir}" />
		<writeregistry hive="LocalMachine" key="SOFTWARE/SIL/FieldWorks/RootDataDir"
			value="${targetdir}" />
		<writeregistry hive="LocalMachine" key="SOFTWARE\SIL\Icu40Dir"
			value="${targetdir}\Icu40" />
		<writeregistry hive="LocalMachine" key="SOFTWARE\SIL\Icu40DataDir"
			value="${targetdir}\Icu40\icudt40l" />
		<writeregistry hive="LocalMachine" key="SOFTWARE\SIL\SilEncConverters40\RootDir"
			value="${fwroot}\lib\release\" />
		<writeregistry hive="LocalMachine" key="SOFTWARE\SIL\SilEncConverters40\DeveloperPluginDir"
			value="${fwroot}\lib\release\EC\Plugins" />
	</target>

	<target name="copy">
		<copy todir="${targetdir}" verbose="${verbose}">
			<fileset basedir="${srcdir}/${config}">
				<include name="*.*"/>
			</fileset>
		</copy>
		<copy todir="${targetdir}" verbose="${verbose}">
			<fileset basedir="${srcdir}/Shared">
				<include name="**/*.*"/>
			</fileset>
		</copy>
	</target>

	<target name="build-databases" description="Build all databases">
		<property name="batch-working-dir" value="${targetdir}"/>

		<!-- make sure SQL server is running -->
		<property name="args" value="start"/>
		<property name="batch-file" value="db"/>
		<call target="call-batch"/>
		<property name="args" value=""/>

		<property name="batch-working-dir" value="${targetdir}/Data"/>

		<property name="batch-file" value="MakeTest"/>
		<call target="call-batch"/>

		<property name="batch-file" value="MakeLelaTeli2"/>
		<call target="call-batch" if="${file:exists('batch-working-dir + '/Lela-Teli 2.xml')}" failonerror="false"/>

		<property name="batch-file" value="MakeLelaTeli3"/>
		<call target="call-batch" if="${file:exists('batch-working-dir + '/Lela-Teli 3.xml')}" failonerror="false"/>
	</target>

	<!-- helper targets -->
	<target name="doregistercom">
		<comregisterex unregister="${unregister}" verbose="${verbose}" failonerror="false">
			<fileset>
				<include name="*.dll"/>
				<exclude name="PyTECkit.dll"/>
				<exclude name="*Tests.dll"/>
			</fileset>
		</comregisterex>
	</target>
	<target name="doregisternet">
		<regasm unregister="${unregister}" codebase="true" verbose="${verbose}" failonerror="false"
			silent="${silent}">
			<fileset>
				<include name="*.dll"/>
				<exclude name="PyTECkit.dll"/>
				<exclude name="*Tests.dll"/>
			</fileset>
		</regasm>
		<echo if="${unregister}"
			message="***** Ignore any error messages for regasm, if it was not able to find the assembly. *****"/>
	</target>

	<target name="doregistry">
		<writeregistry hive="LocalMachine" key="SOFTWARE\SIL\FieldWorks\RootCodeDir" value="${targetdir}" />
		<writeregistry hive="LocalMachine" key="SOFTWARE\SIL\FieldWorks\RootDataDir" value="${targetdir}" />
		<writeregistry hive="LocalMachine" key="SOFTWARE\SIL\Icu40Dir" value="${targetdir}\Icu40" />
		<writeregistry hive="LocalMachine" key="SOFTWARE\SIL\Icu40DataDir" value="${targetdir}\Icu40\icudt40l" />
		<writeregistry hive="LocalMachine" key="SOFTWARE\SIL\SilEncConverters40\RootDir"
			value="${fwroot}\lib\release\" />
		<writeregistry hive="LocalMachine" key="SOFTWARE\SIL\SilEncConverters40\DeveloperPluginDir"
			value="${fwroot}\lib\release\EC\Plugins" />
		<writeregistry hive="CurrentUser" key="Software\SIL\Fieldworks\Translation Editor\LatestProjectName"
			value="DEB-Debug"/>
		<writeregistry hive="CurrentUser" key="Software/SIL/Fieldworks/Translation Editor/LatestDatabaseName"
			value="TestLangProj"/>
	</target>

	<target name="call-batch" description="Calls a batch file">
		<tstamp />
		<call target="call-batch-internal" failonerror="false" cascade="false"/>
		<if test="${fw-call-batch-error}">
			<if test="${not property::exists('fw-build-error')}">
				<property name="fw-build-error"
					value="********* ${batch-file}.bat failed ********"/>
				<fail message="${fw-build-error}"/>
			</if>
		</if>
	</target>

	<target name="call-batch-internal" description="Calls a batch file">
		<!-- set ${fw-build-core-error} to true and at the end to false. If batch file fails,
			${fw-build-core-error} will remain true, so we know if anything happened -->
		<property name="fw-call-batch-error" value="true"/>
		<exec program="${targetdir}/Bin/wrapper.cmd"
			commandline="&quot;${batch-working-dir}&quot; &quot;${batch-working-dir}&quot; &quot;${batch-working-dir}&quot; &quot;${batch-file}.bat&quot; ${args}"
			workingdir="${batch-working-dir}"/>
		<property name="fw-call-batch-error" value="false"/>
	</target>
</project>
