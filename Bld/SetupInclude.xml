<?xml version="1.0" encoding="UTF-8"?>
<!-- Include file for all NAnt build files. Sets different settings. -->
<project name="FieldWorksSetup" default="all" xmlns="http://fieldworks.sil.org/nant/fwnant.xsd">
	<sysinfo failonerror="false"/>
	<if test="${not property::exists('BUILD_LEVEL')}">
		<if test="${property::exists('sys.env.BUILD_LEVEL')}">
			<property name="BUILD_LEVEL" value="${sys.env.BUILD_LEVEL}"/>
		</if>
		<if test="${not property::exists('sys.env.BUILD_LEVEL')}">
			<property name="BUILD_LEVEL" value="9"/>
		</if>
	</if>
	<if test="${not property::exists('debug')}">
		<property name="debug" value="true"/>
	</if>
	<if test="${not property::exists('config')}">
		<property name="config" value="Debug"/> <!-- Debug/Release/Bounds -->
	</if>
	<if test="${not property::exists('dir.fwobj')}">
		<property name="dir.fwobj" value="${fwroot}\Obj"/>
	</if>
	<if test="${not property::exists('dir.fwoutput')}">
		<property name="dir.fwoutput" value="${fwroot}\Output"/>
	</if>
	<if test="${not property::exists('dir.outputBase')}">
		<property name="dir.outputBase" value="${dir.fwoutput}\${config}"/>
	</if>
	<if test="${not property::exists('dir.buildOutputInterop')}">
		<property name="dir.buildOutputInterop" value="${dir.outputBase}"/>
	</if>
	<if test="${not property::exists('dir.fwoutputlib')}">
		<property name="dir.fwoutputlib" value="${fwroot}\Lib"/>
	</if>
	<if test="${not property::exists('dir.fwinstall')}">
		<property name="dir.fwinstall" value="${dir.fwoutput}\install"/>
	</if>
	<if test="${not property::exists('dir.fwdistfiles')}">
		<property name="dir.fwdistfiles" value="${fwroot}\DistFiles"/>
	</if>
	<if test="${not property::exists('dir.fwdistfiles.data')}">
		<property name="dir.fwdistfiles.data" value="${fwroot}\DistFiles\Data"/>
	</if>
	<if test="${not property::exists('dir.buildarchive')}">
		<property name="dir.buildarchive" value="${fwroot}\buildarchive"/>
	</if>
	<if test="${not property::exists('VSConvertBuildFile')}">
		<property name="VSConvertBuildFile" value="${fwroot}\Bld\VSConvert.build.xml" />
	</if>
	<if test="${not property::exists('dir.nantbuild')}">
		<property name="dir.nantbuild" value="${dir.fwobj}\NAntBuild"/>
	</if>
	<if test="${not property::exists('target')}">
		<property name="target" value="all" /> <!-- default target -->
	</if>
	<if test="${not property::exists('build-type')}">		<!-- for C++ .bat files -->
		<property name="build-type" value="d"/> <!-- b (bounds), d (for debug), r (for release), p (profile) -->
	</if>
	<if test="${not property::exists('build-action')}">	<!-- for C++ .bat files -->
		<property name="build-action" value="i"/> <!-- e (for erase), c (for clean), i (for incremental), ec (for erase complete), cc (for clean complete) -->
	</if>
	<if test="${not property::exists('bld-debug')}">
		<property name="bld-debug" value="true"/>
	</if>
	<if test="${not property::exists('bld-bounds')}">
		<property name="bld-bounds" value="false"/>
	</if>
	<if test="${not property::exists('bld-release')}">
		<property name="bld-release" value="false"/>
	</if>
	<if test="${not property::exists('platform')}">
		<property name="platform" value="UNIX" unless="${platform::is-win32()}"/>
		<property name="platform" value="WIN32" if="${platform::is-win32()}"/>
	</if>
	<if test="${not property::exists('XmlInclude')}">
		<property name="XmlInclude" value="${fwroot}\Bld\GlobalInclude.xml"/>
	</if>
	<if test="${not property::exists('UseVsPath')}">
		<property name="UseVsPath" value=""/>
	</if>
	<if test="${not property::exists('forcetests')}">
		<property name="forcetests" value="false"/>
	</if>
	<if test="${not property::exists('showTargetsRunInReport')}">
		<property name="showTargetsRunInReport" value="false"/>
	</if>
	<if test="${not property::exists('clean')}">
		<property name="clean" value="false"/>
	</if>
	<if test="${not property::exists('deleteOutput')}">
		<property name="deleteOutput" value="true"/>
	</if>
	<if test="${not property::exists('nobuild')}">
		<property name="nobuild" value="false"/>
	</if>
	<if test="${not property::exists('registerCom')}">
		<property name="registerCom" value="false"/>
	</if>
	<if test="${not property::exists('cpp-extra-params')}">
		<property name="cpp-extra-params" value=""/>
	</if>
	<if test="${not property::exists('dir.xmiOutput')}"> <!-- For XMI file transformations. -->
		<property name="dir.xmiOutput" value="${fwroot}\Output\XMI"/>
	</if>
	<if test="${not property::exists('output-is-lib')}">
		<property name="output-is-lib" value="false"/>
	</if>
	<if test="${not property::exists('verbose')}">
		<property name="verbose" value="false"/>
	</if>
	<if test="${not property::exists('cl.compiler')}">
		<property name="cl.compiler" value="cl"/>
	</if>
	<if test="${not property::exists('link.linker')}">
		<property name="link.linker" value="link"/>
	</if>
	<if test="${not property::exists('cl.xtraopts')}">
		<property name="cl.xtraopts" value=""/>
	</if>
	<if test="${not property::exists('link.xtraopts')}">
		<property name="link.xtraopts" value=""/>
	</if>
	<if test="${not property::exists('doLelaDBs')}">
		<property name="doLelaDBs" value="true"/>
	</if>
	<if test="${not property::exists('doTest')}">
		<property name="doTest" value="true"/>
	</if>
	<if test="${not property::exists('dir.sqlserverSILFWRoot')}">
		<!-- SQL Server 2005: to change the default location where your databases get created,
			start SQL Server Management Studio, right click on Server, Properties, Database
			Settings, Database default location. -->
		<readregistry
			property="sqlserver.InstanceName"
			key="SOFTWARE\Microsoft\Microsoft SQL Server\Instance Names\SQL\SILFW"
			hive="LocalMachine"/>
		<!-- first read default data directory -->
		<readregistry
			property="dir.sqlserverSILFWRoot"
			key="SOFTWARE\Microsoft\Microsoft SQL Server\${sqlserver.InstanceName}\Setup\SQLDataRoot"
			hive="LocalMachine"/>
		<!-- then, if it is set, we'll override with the specific directory-->
		<readregistry
			property="dir.sqlserverSILFWRoot"
			key="SOFTWARE\Microsoft\Microsoft SQL Server\${sqlserver.InstanceName}\MSSQLServer\DefaultData"
			hive="LocalMachine"
			failonerror="false"/>
	</if>
	<if test="${not property::exists('dir.sqlserverSILFWdata')}">
		<property name="dir.sqlserverSILFWdata" value="${dir.sqlserverSILFWRoot}\Data" unless="${string::ends-with(dir.sqlserverSILFWRoot, '\Data')}"/>
		<property name="dir.sqlserverSILFWdata" value="${dir.sqlserverSILFWRoot}" if="${string::ends-with(dir.sqlserverSILFWRoot, '\Data')}"/>
		<!-- This is used in MakeBlankLP.bat -->
		<setenv name="SQLDataDir" value="${dir.sqlserverSILFWdata}"/>
	</if>
	<if test="${not property::exists('dir.SampleData')}">
		<property name="dir.SampleData" value="${fwroot}\Output\SampleData"/>
	</if>
	<if test="${not property::exists('computername')}">
		<property name="computername" value="${sys.env.COMPUTERNAME}"/>
	</if>
	<if test="${not property::exists('haveDnbXCoreAdapterLibrary')}">
		<property name="haveDnbXCoreAdapterLibrary" value="${file::exists(fwroot + '\DistFiles\DnbXCoreAdapterLibrary.dll')}"/>
	</if>
	<if test="${not property::exists('haveTEAdapterLibrary')}">
		<property name="haveTEAdapterLibrary" value="${file::exists(fwroot + '\DistFiles\UIAdapters.dll')}"/>
	</if>
	<if test="${not property::exists('dir.wwoutput')}">
		<property name="dir.wwoutput" value="${fwroot}\Output\WWData"/>
	</if>
	<if test="${not property::exists('dir.safecopy')}">
		<property name="dir.safecopy" value="${dir.SampleData}"/>
	</if>
	<if test="${not property::exists('modulenames')}">
		<property name="modulenames" value="Cellar FeatSys Ling LangProj Notebk Scripture" />
	</if>
	<if test="${not property::exists('usefilecache')}">
		<property name="usefilecache" value="true"/>
	</if>

	<!-- replace c:\fw\DistFiles in the current path with the right fwroot directory -->
	<!-- We have to use the original value from the registry, so that we get the path that
	was not modified in a batch file that calls this build, and it also doesn't include
	the user part of the path -->
	<readregistry property="environment-path" key="SYSTEM\CurrentControlSet\Control\Session Manager\Environment\Path"
		hive="LocalMachine"/>
	<regex pattern="(?'start'.*;|^)(?'fwpath'.*)\\[Dd][Ii][Ss][Tt][Ff][Ii][Ll][Ee][Ss](?'end'.*)"
		input="${environment-path}" failonerror="false"/>
	<if test="${not property::exists('fwpath')}">
		<property name="start" value="${environment-path};"/>
		<property name="end" value=""/>
	</if>
	<property name="newpath" value="${start}${fwroot}\DistFiles${end}"/>
	<setenv name="Path" value="${newpath}" global="true"
			unless="${environment-path == newpath}"/>
	<!-- Add path for right version of Visual Studio if environment variable VSVERSION is set.
	The path can be set in the include file pathinclude.(VSVERSION). -->
	<if test="${property::exists('sys.env.VSVERSION')}">
		<include buildfile="${fwroot}\Bld\pathinclude.${sys.env.VSVERSION}.xml"/>
	</if>
	<!-- Determine if we are in the same Perforce branch or if we have changed branches -->
	<property name="samebranch" value="${property::get-value('fwroot') == property::get-value('fwpath')}" if="${property::exists('fwpath')}"/>
</project>
