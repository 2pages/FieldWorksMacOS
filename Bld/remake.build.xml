<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XML Spy v4.4 U (http://www.xmlspy.com) by Randy Regnier (SIL International) -->
<!-- Include for completely rebuild FieldWorks -->
<project name="remake" default="remakefw" xmlns="http://fieldworks.sil.org/nant/fwnant.xsd">
	<!-- -->
	<target name="remakefw" description="Completely rebuilds FieldWorks">
		<property name="remakeSfx" value="fw"/>
		<call target="remakeFOO" cascade="false"/>
		<call target="TestWixInstallerIntegrity" cascade="false"/>
	</target>
	<!-- -->
	<target name="remakeFOO" description="Do not call directly. This is called by the various main remake targets.">
		<tstamp/>
		<property name="build-action" value="cc register" if="${deleteOutput}"/>
		<call target="blow-away-output" failonerror="false" if="${deleteOutput}" cascade="false"/>
		<call target="ensureDistFilesDataFolder" failonerror="false" cascade="false"/>
		<call target="IcuData" failonerror="false" if="${deleteOutput}" cascade="false"/>
		<call target="remake${remakeSfx}-internal" failonerror="false" cascade="false"/>
		<if test="${not property::exists('fw-build-error')}">
			<!-- we build LelaTeli databases here so that it doesn't get build on the
			build machine. On the build machine we build it at the very end after
			we successfully build debug and release versions -->
			<call target="LelaTeli2-nodep" if="${doLelaDBs}" cascade="false"/>
			<call target="LelaTeli3-nodep" if="${doLelaDBs}" cascade="false"/>
			<if test="${fw-remake-internal-error}">
				<if test="${property::exists('fw-build-error')}">
					<property name="fw-build-error" value="${fw-build-error}; remake${remakeSfx} (${config}) failed"/>
				</if>
				<if test="${not property::exists('fw-build-error')}">
					<property name="fw-build-error" value="remake${remakeSfx} (${config}) failed"/>
				</if>
			</if>
		</if>
		<call target="nunitreport-text" cascade="false"/>
		<chkrefs/>
	</target>
	<!-- -->
	<target name="remakefw-internal" description="Completely rebuilds FieldWorks - don't call directly">
		<!-- copy NUnit extension dll to get rid of warning -->
		<copy file="${fwroot}\bin\NUnit\bin\nunit.core.extensions.dll" todir="${dir.outputBase}"
			failonerror="false" />
		<!-- set ${fw-remake-internal-error} to true and at the end to false. If batch file fails,
			${fw-remake-internal-error} will remain true, so we know if anything happened -->
		<property name="fw-remake-internal-error" value="true"/>
		<call target="remakefw-internal-core" cascade="false"/>
		<!-- LelaTeli databases are built in remakefw. -->
		<property name="fw-remake-internal-error" value="false"/>
	</target>
	<!-- -->
	<target name="remakefw-errorhandling" description="Call remakefw but handles errors">
		<call target="remakefw-internal" failonerror="false" cascade="false"/>
		<call target="nunitreport" failonerror="false" cascade="false"/>
		<call target="nunitreport-text" failonerror="false" cascade="false"/>
		<if test="${fw-remake-internal-error}">
			<if test="${property::exists('fw-build-error')}">
				<property name="fw-build-error" value="${fw-build-error}; remakefw (${config}) failed"/>
			</if>
			<if test="${not property::exists('fw-build-error')}">
				<property name="fw-build-error" value="remakefw (${config}) failed"/>
			</if>
		</if>
	</target>
	<!-- -->
	<target name="remakefw-failOnError" description="Exit build with fail if there was an error">
		<if test="${property::exists('fw-build-error')}">
			<fail message="Build of one or more components failed"/>
		</if>
		<if test="${property::exists('fw-test-error')}">
			<fail message="One or more unit tests failed"/>
		</if>
	</target>
	<!-- -->
	<target name="remakefw-internal-core" description="Completely rebuilds FieldWorks - don't call directly">
		<call target="requiredTestDatabases"/>
		<call target="mkall-internal-core"/>
	</target>
	<!-- -->
	<target name="remakefw-localize" description="Completely rebuilds FieldWorks with localizations for continuous build machine">
		<property name="remakeSfx" value="fw"/>
		<call target="remakeFOO" cascade="false"/>
		<!-- NOTE: we have to call localize here, although ci-installer depends on it, so we would do it later.
			However, we need the localized files for TestWixInstallerIntegrity. -->
		<call target="localize" cascade="false"
			unless="${property::exists('fw-build-error') or property::exists('fw-test-error')}"/>
		<call target="TestWixInstallerIntegrity" cascade="false"
			unless="${property::exists('fw-build-error') or property::exists('fw-test-error')}"/>
		<chkrefs/>
		<call target="remakefw-failOnError" cascade="true"/>
		<call target="ci-installer" cascade="false"/>
		<call target="nunitreport-text" cascade="true"/>
		<!-- want to report the result at the end again -->
	</target>
	<!-- -->
	<target name="requiredTestDatabases" description="The databases that are required for various tests."
		depends="Ethnologue,TestLangProj,BlankLP"/>
	<!-- -->
	<target name="blow-away-output" description="Delete output directories and other stuff"
		depends="clear-dirs,clean-bsc,UnloadSqlExtend,IcuData-clean">
		<property name="databaseName" value="Ethnologue"/>
		<call target="dropDB" cascade="false"/>
	</target>
	<!-- -->
	<target name="clear-dirs" description="Clear directories"
		depends="clear-src,clear-distfiles,clear-extensionfiles,clear-tempfiles,clean-misc">
		<delete dir="${fwroot}\Obj" failonerror="false"/>

		<!-- Make sure all the files in the output folder can be deleted -->
		<attrib readonly="false" failonerror="false">
			<fileset>
				<include name="${dir.fwoutput}\${config}\*.*" />
			</fileset>
		</attrib>

		<delete dir="${dir.fwoutput}" failonerror="false"/>
		<foreach item="String" in="Bounds Debug Release" delim=" " property="_dir">
			<delete failonerror="false" verbose="true">
				<fileset basedir="${fwroot}\lib\${_dir}\">
					<include name="Widgets.lib"/>
					<include name="Ling.lib"/>
					<include name="AfLib.lib"/>
					<include name="DebugProcs.lib"/>
					<include name="Generic.lib"/>
				</fileset>
			</delete>
		</foreach>
	</target>
	<!-- -->
	<target name="clear-tempfiles" description="Clear the temp. files generated by NUnit">
		<delete failonerror="false" verbose="false">
			<fileset basedir="${sys.env.TEMP}">
				<include name="nunit*/**"/>
				<include name="ECO*.tmp"/>
			</fileset>
		</delete>
		<delete failonerror="false" file="${fwroot}\Test\tsqlunit\sqltestsok.txt"/>
	</target>
	<!-- -->
	<target name="clear-src" description="Clear generated files in subdirectories of src">
		<foreach item="String" in="${modulenames}" delim=" " property="module">
			<delete file="${fwroot}\Src\FDO\${module}.cs" verbose="true" failonerror="false"/>
		</foreach>
		<delete failonerror="false" verbose="true">
			<fileset basedir="${fwroot}\src\">
				<include name="**/obj"/>
				<include name="**/bin"/>
				<include name="**/GeneratedAssemblyInfo.cs"/>
				<include name="**/collection.cpp"/>
				<include name="**/asserts.log"/>
				<include name="Common\\*.*"/>
				<include name="Common\COMInterfaces\FwCellar.cs"/>
				<include name="Common\COMInterfaces\FwKernel.cs"/>
				<include name="Common\COMInterfaces\Views.cs"/>
				<include name="Common\Framework\DbVersion.cs"/>
				<include name="FDO\FdoInterfaces.cs"/>
			</fileset>
		</delete>
	</target>
	<!-- -->
	<target name="clear-distfiles" description="Clear generated files in subdirectories of DistFiles">
		<delete failonerror="false" verbose="true">
			<fileset basedir="${dir.fwdistfiles}">
				<include name="XDE\allXde.xml"/>
				<include name="Templates\Blank*.*"/>
				<include name="Templates\*.log"/>
				<include name="**\asserts.log"/>
			</fileset>
		</delete>
		<delete dir="${dir.fwdistfiles}\Icu28" failonerror="false"/>
	</target>
	<!-- -->
	<target name="clear-extensionfiles" description="Clear extension files in subdirectories of DistFiles">
		<delete file="${dir.fwdistfiles}\Language Explorer\Configuration\Available Plugins\Concorder\RBRExtensions.dll" verbose="true" failonerror="false"/>
		<delete file="${dir.fwdistfiles}\Language Explorer\Configuration\Available Plugins\DeleteWordforms\RBRExtensions.dll" verbose="true" failonerror="false"/>
		<delete file="${dir.fwdistfiles}\Language Explorer\Configuration\Available Plugins\Respeller\RBRExtensions.dll" verbose="true" failonerror="false"/>
	</target>
	<!-- -->
	<target name="clean-bsc" description="Blow away the BSC directory if this is a debug cleancom build and BUILD_BSC=Y">
		<if test="${property::exists('sys.env.BUILD_BSC') and (sys.env.BUILD_BSC == 'Y' or sys.env.BUILD_BSC == 'y')}">
			<property name="bsc-dir" value="${fwroot}\Obj\SrcBrwsr"/>
			<if test="${property::exists('sys.env.BSC_INT_DIR')}">
				<property name="bsc-dir" value="${sys.env.BSC_INT_DIR}"/>
			</if>
			<delete dir="${bsc-dir}" failonerror="false"/>
		</if>
	</target>
	<!-- -->
	<target name="clean-misc" description="Blow away files that might still hang around from previous test runs">
		<delete failonerror="false" verbose="true">
			<fileset>
				<include name="${dir.fwdistfiles}\Templates\CopyOfBlankLangProj.mdf"/>
				<include name="${dir.fwdistfiles}\Templates\DummyDb_log.LDF"/>
			</fileset>
		</delete>
	</target>
	<!-- -->
	<target name="ensureDistFilesDataFolder" description="Make sure the Distfile\Data folder exists.">
		<mkdir dir="${dir.fwdistfiles.data}"/>
	</target>
	<!-- -->
	<target name="init-masterdb" description="Initialize master database"
		depends="mkdp,mkGenLib,icudlls,mkfwk,mkdba,mkcel,mklg,mkvw,register-So,cmNewLangProj,IcuData">
		<exec program="rundll32" commandline="${dir.fwoutput}\${config}\DbAccess.dll,ExtInitMSDE force" workingdir="${dir.fwoutput}\${config}"/>
	</target>
	<!-- -->
	<target name="TestLangProj" description="Build the TestLangProj database which is used in tests"
		depends="init-masterdb">
		<call target="TestLangProj-nodep" cascade="false"/>
	</target>
	<target name="TestLangProj-nodep" description="Build the TestLangProj database.">
		<property name="dir.srcProj" value="${fwroot}\test"/>
		<property name="dbzipfile" value="TestLangProj.zip"/>
		<property name="xmldatafile" value="TestLangProj.xml"/>
		<property name="databaseName" value="TestLangProj"/>
		<call target="makeDB-internal" unless="${clean}"/>
		<call target="safecopyDB" cascade="false" unless="${clean}"/>
	</target>
	<!-- -->
	<target name="BlankLP" description="Build the blank language project database."
		depends="init-masterdb">
		<call target="BlankLP-nodep" cascade="false"/>
	</target>
	<target name="BlankLP-nodep" description="Build the blank language project database.">
		<property name="batch-working-dir" value="${fwroot}\test"/>
		<property name="batch-file" value="MakeBlankLP"/>
		<call target="call-batch" failonerror="false"/>
		<property name="batch-working-dir" value="${fwroot}\bin"/>
	</target>
	<!-- -->
	<target name="LelaTeli2" description="Build the Lela-Teli 2 database."
		depends="init-masterdb">
		<call target="LelaTeli2-nodep" cascade="false"/>
	</target>
	<target name="LelaTeli2-nodep" description="Build the Lela-Teli 2 database.">
		<property name="dir.srcProj" value="${fwroot}\test"/>
		<property name="xmldatafile" value="Lela-Teli 2.xml"/>
		<property name="databaseName" value="Lela-Teli 2"/>
		<call target="makeDB-unzipped" unless="${clean}"/>
	</target>
	<!-- -->
	<target name="LelaTeli3" description="Build the Lela-Teli 3 database."
		depends="init-masterdb">
		<call target="LelaTeli3-nodep" cascade="false"/>
	</target>
	<target name="LelaTeli3-nodep" description="Build the Lela-Teli 3 database.">
		<property name="dir.srcProj" value="${fwroot}\test"/>
		<property name="xmldatafile" value="Lela-Teli 3.xml"/>
		<property name="databaseName" value="Lela-Teli 3"/>
		<call target="makeDB-unzipped" unless="${clean}"/>
	</target>
	<!-- -->
	<target name="fourdatabases" description="Build all four main FW databases."
		depends="init-masterdb">
		<call target="TestLangProj-nodep" cascade="false"/>
		<call target="BlankLP-nodep" cascade="false"/>
		<call target="LelaTeli2-nodep" cascade="false"/>
		<call target="LelaTeli3-nodep" cascade="false"/>
	</target>
	<target name="WixInstallerIntegrityTest" description="Check if anything just built will ruin the WIX installer">
		<property name="testWixIntegrity" value="yes"/>
		<call target="TestWixInstallerIntegrity" cascade="false"/>
	</target>
	<target name="TestWixInstallerIntegrity" description="Check if anything just built will ruin the WIX installer. This target should not be called directly. Instead call WixInstallerIntegrityTest.">
		<echo message="Cleanup ICU data files..."/>
		<call target="IcuData-nodep" cascade="true"/>
		<echo message=""/>
		<echo message="Testing WIX Installer Integrity..."/>
		<if test="${not property::exists('testWixIntegrity')}">
			<!-- Note: The presence of TestWixInstallerIntegrity.yes in the installer directory will override this. -->
			<property name="testWixIntegrity" value="no"/>
		</if>
		<exec workingdir="${fwroot}\Installer" program="WScript.exe" commandline="${fwroot}\Installer\TestWixInstallerIntegrity.js ${config} ${testWixIntegrity}"
			  failonerror="false" resultproperty="WixIntegrityResult" />
		<if test="${int::parse(WixIntegrityResult) != 0}">
			<if test="${int::parse(WixIntegrityResult) == -1}">
				<fail message="Error while testing WIX Installer integrity. See Installer\TestWixInstallerIntegrity.log for details."/>
			</if>
			<if test="${int::parse(WixIntegrityResult) == 1}">
				<fail message="There is at least one new file. You must inform the installer system. Run 'Update Files.htm' in the Installer folder. Use Internet Explorer 6 or later."/>
			</if>
			<if test="${int::parse(WixIntegrityResult) == 2}">
				<fail message="There is at least one deleted file which the installer is expecting to find. You must confirm these with the installer system. Run 'Update Files.htm' in the Installer folder. Use Internet Explorer 6 or later."/>
			</if>
			<if test="${int::parse(WixIntegrityResult) == 3}">
				<fail message="There is at least one deleted file which the installer is expecting to find, and at least one new file. You must inform the installer system. Run 'Update Files.htm' in the Installer folder. Use Internet Explorer 6 or later."/>
			</if>
		</if>
	</target>
	<!-- -->
	<target name="makeallregfree" description="Make all executables regfree">
		<foreach item="File" property="executable">
			<in>
				<items basedir="${dir.outputBase}">
					<include name="*.exe"/>
				</items>
			</in>
			<do>
				<call target="regfree" cascade="true"/>
			</do>
		</foreach>
	</target>
	<!-- -->
	<target name="ParatextManifests" description="Create manifest fragments for Paratext COM objects">
		<foreach item="File" property="dllFile">
			<in>
				<items basedir="${dir.fwdistfiles}">
					<include name="LanguageEngine.dll"/>
					<include name="ScriptureObjects.dll"/>
					<include name="ScriptureTextFile.dll"/>
				</items>
			</in>
			<do>
				<call target="createManifestFragment" cascade="true"/>
			</do>
		</foreach>
	</target>
	<target name="createManifestFragment">
		<property name="manifestFile" value="${dllFile}.fragment.manifest"/>
		<property name="manifestExists" value="${file::exists(manifestFile)}"/>
		<p4edit view="${manifestFile}" failonerror="false" if="${manifestExists}"/>
		<regfree executable="${dllFile}.fragment">
			<dlls>
				<include name="${dllFile}"/>
			</dlls>
		</regfree>
		<p4add file="${manifestFile}" failonerror="false" unless="${manifestExists}"/>
	</target>
	<target name="remakeNoLela" description="Remakefw, but without build the Lela Teli databases">
		<call target="skipLelaDBs"/>
		<call target="remakefw"/>
	</target>

</project>
