<?xml version="1.0" encoding="UTF-8"?>
<!-- Top-level NAnt build file for FieldWorks. -->
<project name="FieldWorks" default="all" xmlns="http://fieldworks.sil.org/nant/fwnant.xsd">
	<fwroot test="Bld/SetupInclude.xml"/>
	<!-- convert global include file so that we can use the properties defined in there -->
	<style style="${fwroot}/Bld/TransformGlobalInclude.xslt" in="${fwroot}/Bld/GlobalInclude.xml" out="${fwroot}/Bld/GlobalInclude.build.xml" unless="${file::up-to-date(fwroot + '/Bld/GlobalInclude.xml', fwroot + '/Bld/GlobalInclude.build.xml')}"/>
	<include buildfile="GlobalInclude.build.xml"/>
	<include buildfile="${fwroot}/Bld/SetupInclude.xml"/>
	<property name="nant.onfailure" value="endreportfailure"/>
	<property name="nant.onsuccess" value="endreportsuccess"/>
	<property name="passbyref" value="fw-build-error fw-test-error fw-acceptancetest-error fw-targets-run"/>
	<!--
		Set to showTargetsRunInReport property to 'true' to output the C# targets built during run.
		Otherwise, it should be 'false'.
	-->
	<property name="showTargetsRunInReport" value="false"/>
	<property name="passbyref" value="${passbyref} fw-targets-run" if="${showTargetsRunInReport}"/>
	<!-- -->
	<!-- ********************************************************************************** -->
	<!-- Add all projects below -->
	<!-- -->
	<target name="all" depends="mkall" description="Build all of the FieldWorks projects."/>
	<!-- -->
	<!-- ********************************************************************************** -->
	<!-- Add individual project targets below this point. -->
	<!-- -->
	<!-- -->
	<target name="IcuData" description="Unzip icu.zip file">
		<call target="IcuData-nodep" cascade="false"/>
	</target>
	<target name="IcuData-nodep">
		<!-- Using uptodate is not reliable because it doesn't realize extra files are in actual directory. -->
		<call target="IcuData-clean" cascade="true"/>
		<unzip zipfile="${fwroot}/DistFiles/Icu40.zip" todir="${fwroot}/DistFiles/Icu40"/>
	</target>
	<target name="IcuData-clean" description="Deletes ICU files">
		<delete verbose="false" failonerror="false">
			<fileset>
				<include name="${fwroot}/DistFiles/Icu40/*.*"/>
				<include name="${fwroot}/DistFiles/languages/*.xml"/>
				<!-- Not really ICU, but we need to clean out global ws store at same time to prevent
					 differing versions of ldml files from breaking builds on other branches.
					 This has different values on XP and Vista/7:
					 Windows XP: c:/Documents and Settings/All Users/Application Data
					 Windows 7: C:/ProgramData/
					 Linux: $HOME/.local/share
					 and it can also appear under SIL (when running the app) and NUnit.org (unit tests) -->
				<include name="${environment::get-folder-path('CommonApplicationData')}/SIL/WritingSystemStore/*.ldml"/>
				<include name="${environment::get-folder-path('CommonApplicationData')}/NUnit.org/WritingSystemStore/*.ldml"/>
				<include name="${environment::get-folder-path('LocalApplicationData')}/SIL/WritingSystemStore/*.ldml" if="${platform::is-unix()}"/>
				<include name="${environment::get-folder-path('LocalApplicationData')}/NUnit.org/WritingSystemStore/*.ldml" if="${platform::is-unix()}"/>
			</fileset>
		</delete>
		<delete dir="${fwroot}/DistFiles/Icu40/data" verbose="false" failonerror="false"/>
		<delete dir="${fwroot}/DistFiles/Icu40/icudt40l" verbose="false" failonerror="false"/>
	</target>
	<!-- -->
	<target name="FieldWorks" description="Build FieldWorks project." depends="BasicUtils,COMInterfaces,FDO,FdoUi,Framework,FwControls,FwCoreDlgs,FwResources,FwUtils,Reporting,RootSite,SilUtils,SimpleRootSite,xCoreInterfaces,XMLUtils,xWorks,TestUtils">
		<call target="FieldWorks-nodep" cascade="false"/>
	</target>
	<target name="FieldWorks-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/Common/FieldWorks"/>
		<call target="vsconvert-convert"/>
		<!-- I think the manifest file is needed only on MS Windows. -->
		<property name="executable" value="${dir.outputBase}/FieldWorks.exe" unless="${platform::is-unix()}"/>
		<call target="regfree" cascade="true" unless="${platform::is-unix()}"/>
	</target>
	<!-- -->
	<target name="SharpViews" description="Build SharpViews project." depends="FDO">
		<call target="SharpViews-nodep" cascade="false"/>
	</target>
	<target name="SharpViews-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/SharpViews/SharpViews"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
  <target name="SharpViewsDemo" description="Build demo of SharpViewsDemo project." depends="">
	<call target="SharpViewsDemo-nodep" cascade="false"/>
  </target>
  <target name="SharpViewsDemo-nodep">
	<property name="dir.srcProj" value="${fwroot}/Samples/SharpViewsDemo"/>
	<call target="vsconvert-convert"/>
	<!-- I think the manifest file is needed only on MS Windows. -->
	<regfree executable="${dir.outputBase}/SharpViewsDemo.exe" verbose="${verbose}">
	  <dlls basedir="${dir.outputBase}">
		<include name="FwKernel.dll"/>
		<include name="FwComponents.dll"/>
	  </dlls>
	  <fragments basedir="${dir.fwdistfiles}">
		<include name="*.fragment.manifest"/>
	  </fragments>
	</regfree>
  </target>
	<target name="SharpViewsFdoDemo" description="Build demo of SharpViewsFdoDemo project." depends="COMInterfaces,FDO">
		<call target="SharpViewsFdoDemo-nodep" cascade="false"/>
	</target>
	<target name="SharpViewsFdoDemo-nodep">
		<property name="dir.srcProj" value="${fwroot}/Samples/SharpViewsFdoDemo"/>
		<call target="vsconvert-convert"/>
		<!-- I think the manifest file is needed only on MS Windows. -->
		<regfree executable="${dir.outputBase}/SharpViewsFdoDemo.exe" verbose="${verbose}">
			<dlls basedir="${dir.outputBase}">
				<include name="FwKernel.dll"/>
				<include name="Language.dll"/>
				<include name="Views.dll"/>
			</dlls>
		</regfree>
	</target><!-- -->
  <target name="FwResources" description="Build FwResources project.">
		<call target="FwResources-nodep" cascade="false"/>
	</target>
	<target name="FwResources-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/FwResources"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="UnicodeCharEditor" description="Build the UnicodeCharEditor program." depends="BasicUtils,COMInterfaces,CoreImpl,FwControls,FwCoreDlgs,FwResources,FwUtils,Reporting,xCoreInterfaces,XMLUtils">
		<call target="UnicodeCharEditor-nodep" cascade="false"/>
	</target>
	<target name="UnicodeCharEditor-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/UnicodeCharEditor"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="MigrateSqlDbs" description="Build the MigrateSqlDbs program." depends="BasicUtils,FDO,FwControls,FwResources,FwUtils">
		<call target="MigrateSqlDbs-nodep" cascade="false" unless="${platform::is-unix()}"/>
	</target>
	<target name="MigrateSqlDbs-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/MigrateSqlDbs"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="COMInterfaces" description="Build COMInterfaces project."
		depends="mktlbs,BasicUtils,mkfwk,Ethnologue">
		<call target="COMInterfaces-nodep" cascade="false"/>
	</target>
	<target name="COMInterfaces-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/Common/COMInterfaces"/>
		<call target="vsconvert-convert"/>
		<!-- entry for class the Implments IPictureFactory-->
		<echo message="17A2E876-2968-11E0-8046-0019DBF4566E libManagedComBridge.so COMInterfaces.dll SIL.FieldWorks.Common.COMInterfaces.ManagedPictureFactory
"
			file="${dir.outputBase}/COMInterfaces.compmap" append="false"
			if="${platform::is-unix()}"/>
		<!-- IPictureFactory GUID-->
		<echo message="110B7E88-2968-11E0-B493-0019DBF4566E libManagedComBridge.so
"
			file="${dir.outputBase}/COMInterfaces.compmap" append="true"
			if="${platform::is-unix()}"/>
		<call target="rebuild-compmap" cascade="true" if="${platform::is-unix()}"/>
	</target>
	<!-- -->
	<target name="CoreImpl" description="Build CoreImpl project." depends="mktlbs,BasicUtils,COMInterfaces,mkfwk,Ethnologue,mklg,mkvw,mkgre,CopyDlls,MakeRngDtd">
		<call target="CoreImpl-nodep" cascade="false"/>
	</target>
	<target name="CoreImpl-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/Common/CoreImpl"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="MakeRngDtd" description="Builds rng and dtd validation files">
		<exec program="${fwroot}/Bin/GenerateFwSchema.exe" managed="Auto"
			commandline="${fwroot}/Src/FDO/MasterFieldWorksModel.xml ${dir.outputBase}/fwdata.rng"/>
		<exec program="${fwroot}/Bin/GenerateFwSchema.exe" managed="Auto"
			commandline="${fwroot}/Src/FDO/MasterFieldWorksModel.xml ${dir.outputBase}/fwdata.dtd"/>
		<copy todir="${dir.outputBase}" failonerror="false">
			<fileset>
				<include name="${fwroot}/Bin/rxp.exe"/>
			</fileset>
		</copy>
	</target>
	<target name="Reporting" description="Build Reporting project." depends="BasicUtils">
		<call target="Reporting-nodep" cascade="false"/>
	</target>
	<target name="Reporting-nodep" description="Build Reporting project.">
		<property name="dir.srcProj" value="${fwroot}/Src/Utilities/Reporting"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="BasicUtils" description="Build BasicUtils project." depends="SilUtils">
		<call target="BasicUtils-nodep" cascade="false"/>
	</target>
	<target name="BasicUtils-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/Utilities/BasicUtils"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="ZipUtils" description="Build ZipUtils project." depends="TestUtils,COMInterfaces">
		<call target="ZipUtils-nodep" cascade="false"/>
	</target>
	<target name="ZipUtils-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/Common/ZipUtils"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="FwUtils" description="Build FwUtils project." depends="BasicUtils,FwResources,
			COMInterfaces,CoreImpl,mkfwk,mklg,SilUtils,xCoreInterfaces,SharedScrUtils">
		<call target="FwUtils-nodep" cascade="false"/>
	</target>
	<target name="FwUtils-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/Common/FwUtils"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="Design" description="Build Design project.">
		<call target="Design-nodep" cascade="false"/>
	</target>
	<target name="Design-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/Common/Controls/Design"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="FwControls" description="Build FwControls project."
		depends="Design,BasicUtils,COMInterfaces,CoreImpl,XMLUtils,FwUtils,FDO,ScrUtilsInterfaces,SharedScrUtils,TestUtils,xCore">
		<call target="FwControls-nodep" cascade="false"/>
	</target>
	<target name="FwControls-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/Common/Controls/FwControls"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="ScrUtilsInterfaces" description="Build ScrUtilsInterfaces project." depends="FwResources,BasicUtils,SharedScrUtils,TestUtils,COMInterfaces">
		<call target="ScrUtilsInterfaces-nodep" cascade="false"/>
	</target>
	<target name="ScrUtilsInterfaces-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/Common/ScrUtilsInterfaces"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="ScriptureUtils" description="Build ScriptureUtils project."
			depends="COMInterfaces,ProjectUnpacker,FwUtils,BasicUtils,ScrUtilsInterfaces,EncConvertersDlls,FwResources,SharedScrUtils,TestUtils">
		<call target="ScriptureUtils-nodep" cascade="false"/>
	</target>
	<target name="ScriptureUtils-nodep" description="Build ScriptureUtils project.">
		<property name="dir.srcProj" value="${fwroot}/Src/Common/ScriptureUtils"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="ProjectUnpacker" description="Build ProjectUnpacker project." depends="BasicUtils,ZipUtils">
		<call target="ProjectUnpacker-nodep" cascade="false"/>
	</target>
	<target name="ProjectUnpacker-nodep" description="Build ProjectUnpacker project.">
		<property name="dir.srcProj" value="${fwroot}/Src/ProjectUnpacker"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="TestUtils" description="Build TestUtils project." depends="COMInterfaces,CoreImpl,BasicUtils,copy-nmockDll">
		<call target="TestUtils-nodep" if="${doTest or string::starts-with(target, 'buildtest')}" cascade="false"/>
	</target>
	<target name="TestUtils-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/TestUtils"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="PhraseTranslationHelper" description="Build PhraseTranslationHelper project." depends="SilUtils,SharedScrUtils,SharedScrControls">
		<call target="PhraseTranslationHelper-nodep" cascade="false"/>
	</target>
	<target name="PhraseTranslationHelper-nodep" description="Build PhraseTranslationHelper project.">
		<property name="dir.srcProj" value="${fwroot}/Lib/src/PhraseTranslationHelper"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="SilUtils" description="Build SilUtils project.">
		<call target="SilUtils-nodep" cascade="false"/>
	</target>
	<target name="SilUtils-nodep" description="Build SilUtils project.">
		<property name="dir.srcProj" value="${fwroot}/Lib/src/SilUtils"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="Ethnologue" description="Build Ethnologue project.">
		<call target="Ethnologue-nodep" cascade="false"/>
	</target>
	<target name="Ethnologue-nodep" description="Build Ethnologue project.">
		<property name="dir.srcProj" value="${fwroot}/Lib/src/Ethnologue"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="TeUIAdapters" description="Build SilSidePane Adapterproject." depends="SilSidePane">
		<call target="TeUIAdapters-nodep" cascade="false"/>
	</target>
	<target name="TeUIAdapters-nodep" description="Build TeUIAdapters project.">
		<property name="dir.srcProj" value="${fwroot}/Src/XCore/SilSidePaneAdapter"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="SilSidePane" description="Build SilSidePane project.">
		<call target="SilSidePane-nodep" cascade="false"/>
	</target>
	<target name="SilSidePane-nodep" description="Build SilSidePane project.">
		<property name="dir.srcProj" value="${fwroot}/Src/XCore/SilSidePane"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="FlexUIAdapter" description="Build FlexUIAdapter project.">
		<call target="FlexUIAdapter-nodep" cascade="false"/>
	</target>
	<target name="FlexUIAdapter-nodep" description="Build FlexUIAdapter project.">
		<property name="dir.srcProj" value="${fwroot}/Src/XCore/XCoreAdapterSilSidePane"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="ObjectBrowser" description="Build ObjectBrowser project.">
		<call target="ObjectBrowser-nodep" cascade="false"/>
	</target>
	<target name="ObjectBrowser-nodep" description="Build ObjectBrowser project.">
		<property name="dir.srcProj" value="${fwroot}/Lib/src/ObjectBrowser"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="SharedScrUtils" description="Build SharedScrUtils project."
			depends="SilUtils">
		<call target="SharedScrUtils-nodep" cascade="false"/>
	</target>
	<target name="SharedScrUtils-nodep">
		<property name="dir.srcProj" value="${fwroot}/Lib/src/SharedScrUtils"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="SharedScrControls" description="Build SharedScrControls project."
			depends="SilUtils,SharedScrUtils">
		<call target="SharedScrControls-nodep" cascade="false"/>
	</target>
	<target name="SharedScrControls-nodep">
		<property name="dir.srcProj" value="${fwroot}/Lib/src/SharedScrControls"/>
		<call target="vsconvert-convert"/>
	</target>
	<target name="AllFDO" description="Build all the FDO projects." depends="FDO"/>
	<!-- ,UtilsTests,FwUtilsTests,ScrUtilsInterfacesTests -->
	<target name="FDO" description="Build FDO project."
		depends="BasicUtils,COMInterfaces,CoreImpl,mklg,mkvw,XMLUtils,PhonEnvValidator,
			copy-nmockDll,FwUtils,BasicUtils,ScrUtilsInterfaces,FwResources,
			Reporting,SilUtils,PhraseTranslationHelper,SharedScrUtils,ZipUtils,TestUtils,ProjectUnpacker,setupRegistry,GenerateFilesFromModel">
		<call target="FDO-nodep" cascade="false"/>
	</target>
	<target name="FDO-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/FDO"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="FDOToPa" description="Build FDO interface to PA project." depends="FDO,BasicUtils,COMInterfaces">
		<call target="FDOToPa-nodep" cascade="false"/>
	</target>
	<target name="FDOToPa-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/FdoToPa"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="FdoUi" description="Build FdoUi project." depends="COMInterfaces,CoreImpl,FDO,RootSite,xCoreInterfaces,XMLViews,LexTextControls,Reporting,Widgets,FwResources,FwControls,Framework,Filters">
		<call target="FdoUi-nodep" cascade="false"/>
	</target>
	<target name="FdoUi-nodep" description="Build FdoUi project.">
		<property name="dir.srcProj" value="${fwroot}/Src/FdoUi"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="FwPrintLayoutComponents" description="Build FwPrintLayoutComponents project."
			depends="FwCoreDlgControls,FDO,mkfwk,FwResources,SimpleRootSite,BasicUtils,COMInterfaces, Framework">
		<call target="FwPrintLayoutComponents-nodep" cascade="false"/>
	</target>
	<target name="FwPrintLayoutComponents-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/Common/FwPrintLayoutComponents"/>
		<call target="vsconvert-convert"/>
	</target>
	<!--FwCoreDlgControls,FwCoreDlgs-->
	<target name="FwCoreDlgControls" description="Build FwCoreDlgControls project."
		depends="FwResources,COMInterfaces,CoreImpl,BasicUtils,FwUtils,FDO,FwControls,
			RootSite,SilUtils,xCoreInterfaces,Keyboarding">
		<call target="FwCoreDlgControls-nodep" cascade="false"/>
	</target>
	<target name="FwCoreDlgControls-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/FwCoreDlgs/FwCoreDlgControls"/>
		<call target="vsconvert-convert"/>
	</target>
	<target name="FwCoreDlgs" description="Build FwCoreDlgs project."
		depends="RootSite,FwResources,COMInterfaces,FDO,CoreImpl,FwControls,BasicUtils,
			FwUtils,SimpleRootSite,copy-nmockDll,mkgre,
			FwCoreDlgControls,Widgets,xCoreInterfaces,TestUtils,ensureDistFilesDataFolder,
			EncConvertersDlls,Filters,XMLUtils,FwControls,SharedScrUtils,ScrUtilsInterfaces">
		<!-- TestUtils,ScrUtilsInterfaces are only for tests. -->
		<call target="FwCoreDlgs-nodep" cascade="false"/>
	</target>
	<target name="FwCoreDlgs-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/FwCoreDlgs"/>
		<call target="vsconvert-convert"/>
	</target>
	<target name="SimpleRootSite" description="Build SimpleRootSite project."
		depends="COMInterfaces,CoreImpl,BasicUtils,
				xCoreInterfaces,UIAdapterInterfaces,TestUtils,CacheLight,SilUtils,
				Reporting,ManagedVwDrawRootBuffered,copy-uiAutomation,Keyboarding">
		<!-- Uses TestUtils and CacheLight needed for tests. -->
		<call target="SimpleRootSite-nodep" cascade="false"/>
	</target>
	<target name="SimpleRootSite-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/Common/SimpleRootSite"/>
		<call target="vsconvert-convert"/>
		<!-- adding interfaces to compmap is done in SimpleRootSite's buildinclude.xml
			because we need them for SimpleRootSiteTests -->
	</target>
	<!-- -->
	<target name="zook" depends="EncConvertersDlls">
		<call target="IcuData" cascade="true"/>
	</target>
	<!-- -->
	<target name="RootSite" description="Build RootSite project." depends="COMInterfaces,CoreImpl,BasicUtils,FDO,
		FwControls,xCoreInterfaces,FwResources,FwUtils,UIAdapterInterfaces,
		SimpleRootSite,TestUtils,mkfwk,mkgre">
		<!-- Uses TestUtils for tests. -->
		<call target="RootSite-nodep" cascade="false"/>
	</target>
	<target name="RootSite-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/Common/RootSite"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="PrintLayout" description="Build PrintLayout project." depends="COMInterfaces,FDO,
		SimpleRootSite,FwPrintLayoutComponents,BasicUtils,Framework,RootSite,FwResources,FwUtils,xCoreInterfaces,
		ScrUtilsInterfaces">
		<!-- ScrUtilsInterfaces for tests only -->
		<call target="PrintLayout-nodep" cascade="false"/>
	</target>
	<target name="PrintLayout-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/Common/PrintLayout"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="UIAdapterInterfaces" description="Build UIAdapterInterfaces project." depends="xCoreInterfaces, BasicUtils">
		<call target="UIAdapterInterfaces-nodep" cascade="false"/>
	</target>
	<target name="UIAdapterInterfaces-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/Common/UIAdapterInterfaces"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<!-- Framework is dependant on ScriptureUtils only for the tests. We should rewrite our tests
		to get rid of that dependency. -->
	<target name="Framework" description="Build Framework project." depends="FwResources,COMInterfaces,CoreImpl,copy-nmockDll,
		FDO,FwControls,FwCoreDlgs,FwCoreDlgControls,BasicUtils,RootSite,FwUtils,xCoreInterfaces,mkfwk,SimpleRootSite,copy-uiAutomation,
		UIAdapterInterfaces,Design,TestUtils,SilUtils,
		Reporting,Widgets,XMLUtils">
		<!-- ScriptureUtils,TestUtils are only used for the tests. -->
		<call target="Framework-nodep" cascade="false"/>
	</target>
	<target name="Framework-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/Common/Framework"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="MenuExtender" description="Menu extension classes" depends="BasicUtils,xCoreInterfaces,TestUtils,COMInterfaces">
		<call target="MenuExtender-nodep" cascade="false"/>
	</target>
	<target name="MenuExtender-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/Common/Controls/MenuExtender"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="RunAddConverter" description="Build RunAddConverter project." depends="FwCoreDlgs,Framework,
		COMInterfaces,RootSite,FwControls,xCoreInterfaces,BasicUtils">
		<call target="RunAddConverter-nodep" cascade="false"/>
	</target>
	<target name="RunAddConverter-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/Utilities/RunAddConverter"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="Widgets" description="Build (C#) Widgets project."
		depends="COMInterfaces,CoreImpl,BasicUtils,xCoreInterfaces,FwResources,RootSite,TestUtils,SimpleRootSite,FDO,Reporting">
		<!-- TestUtils is only for tests. -->
		<call target="Widgets-nodep" cascade="false"/>
	</target>
	<target name="Widgets-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/Common/Controls/Widgets"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="CSharpLinker" description="Build (C#) CSharpLinker project." depends="COMInterfaces,SimpleRootSite,FDO,FdoUi">
		<call target="CSharpLinker-nodep" cascade="false"/>
	</target>
	<target name="CSharpLinker-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/NoteBk/CSharpLinker"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="Sfm2Xml" description="Build Sfm2Xml project" depends="EncConvertersDlls,BasicUtils">
		<call target="Sfm2Xml-nodep" cascade="false"/>
	</target>
	<target name="Sfm2Xml-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/Utilities/SfmToXml"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="SplitGridView" description="Build the SplitGrid view project."
		depends="COMInterfaces,FDO,Framework,RootSite,SimpleRootSite,FwControls,BasicUtils,TestUtils">
		<call target="SplitGridView-nodep" cascade="false"/>
	</target>
	<target name="SplitGridView-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/Common/Controls/SplitGridView"/>
		<call target="vsconvert-convert"/>
	</target>
	<!-- -->
	<target name="ScrChecks" description="Build ScrChecks project."
		depends="SharedScrUtils,BasicUtils,SilUtils,TestUtils">
		<!-- BasicUtils,SilUtils and TestUtils for tests -->
		<call target="ScrChecks-nodep" cascade="false"/>
	</target>
	<target name="ScrChecks-nodep">
		<property name="dir.srcProj" value="${fwroot}/Lib/src/ScrChecks"/>
		<call target="vsconvert-convert"/>
		<copy todir="${fwroot}/DistFiles/Editorial Checks">
			<fileset basedir="${dir.outputBase}">
				<include name="ScrChecks.dll" />
				<include name="ScrChecks.pdb" />
			</fileset>
		</copy>
	</target>
	<target name="FwRemoteDatabaseConnectorService" description="FwRemoteDatabaseConnectorService" depends="BasicUtils,COMInterfaces,FDO,FieldWorks">
		<call target="FwRemoteDatabaseConnectorService-nodep" cascade="false"/>
	</target>
	<target name="FwRemoteDatabaseConnectorService-nodep">
		<property name="dir.srcProj" value="${fwroot}/Src/Common/FwRemoteDatabaseConnectorService"/>
		<call target="vsconvert-convert"/>
		<property name="executable" value="${dir.outputBase}/FwRemoteDatabaseConnectorService.exe" unless="${platform::is-unix()}"/>
		<call target="regfree" cascade="true" unless="${platform::is-unix()}"/>
	</target>
	<!-- -->
	<target name="GenerateFilesFromModel" description="Generate C# and C++ files from database model"
			depends="GenerateFilesFromModel-build,GenerateFilesFromModel-clean"/>
	<target name="GenerateFilesFromModel-common">
		<fileset basedir="${fwroot}/Src/FDO" id="GeneratedFiles">
			<include name="Generated*.cs"/>
			<include name="DomainImpl/FDOGenerated.cs"/>
			<include name="DomainImpl/Generated*.cs"/>
			<include name="Infrastructure/Impl/Generated*.cs"/>
			<include name="InOC/Generated*.cs"/>
			<include name="${dir.fwoutputCommon}/CellarConstants.h"/>
			<include name="${dir.fwoutputCommon}/CellarBaseConstants.h"/>
			<include name="${fwroot}/Src/Common/CoreImpl/CellarPropertyType.cs"/>
		</fileset>
	</target>
	<target name="GenerateFilesFromModel-build" depends="GenerateFilesFromModel-common" unless="${clean}">
		<property name="dir.srcProj" value="${fwroot}/Src/FDO"/>
		<uptodate property="uptodate" verbose="${verbose}">
			<sourcefiles basedir="${dir.srcProj}">
				<!-- bug in NAnt 0.91alpha1 - fails with 'Object must implement IConvertible'
				<include name="${assembly::get-location(task::get-assembly('fdogenerate'))}"/>
				-->
				<include name="${nant::get-base-directory()}/extensions/common/neutral/FwTasks/FdoGenerate.dll"/>
				<include name="buildinclude.xml"/>
				<include name="FDOTests/buildinclude.xml"/>
				<include name="MasterFieldWorksModel.xml"/>
				<include name="FDOGenerate/*"/>
				<include name="CmTypes.txt"/>
			</sourcefiles>
			<targetfiles refid="GeneratedFiles"/>
		</uptodate>
		<echo message="Generating FDO files" unless="${uptodate}"/>
		<echo message="Generated FDO files up to date" if="${uptodate}" />
		<if test="${(not uptodate) or property::exists('buildingInstallers')}">
			<!-- generate C# files used in FDO -->
			<fdogenerate
					xml="${dir.srcProj}/MasterFieldWorksModel.xml"
					outdir="${dir.srcProj}"
					outputfile="DomainImpl/FDOGenerated.cs"
					template="${dir.srcProj}/FDOGenerate/main.vm.cs"/>
			<!-- generate constants for C++ code -->
			<fdogenerate
					xml="${dir.srcProj}/MasterFieldWorksModel.xml"
					outdir="${dir.fwoutputCommon}"
					outputfile="CellarConstants.h"
					template="${dir.srcProj}/FDOGenerate/CellarConstants.vm.h"/>
			<!-- generate base type files -->
			<echo append="false" file="${dir.fwoutputCommon}/CellarBaseConstants.h"
>// Generated by target '${target::get-current-target()}' from CmTypes.txt
// *** DO NOT EDIT ***
#ifdef _MSC_VER
#pragma once
#endif
#ifndef CELLARBASECONSTANTS_H
#define CELLARBASECONSTANTS_H 1

typedef enum CellarModuleDefns
{
</echo>

			<echo append="false" file="${fwroot}/Src/Common/CoreImpl/CellarPropertyType.cs"
>// Generated by target '${target::get-current-target()}' from CmTypes.txt
// *** DO NOT EDIT ***
namespace SIL.CoreImpl
{
	/// &lt;summary&gt;Types of properties in "Cellar" database. &lt;/summary&gt;
	public enum CellarPropertyType : int
	{
</echo>
			<property name="value" value=""/>
			<foreach item="Line" in="${dir.srcProj}/CmTypes.txt" delim="=" property="name,value">
				<property name="value" value="${string::substring(value, 0, string::index-of(value, ' '))}"
					if="${string::contains(value, ' ')}"/>
				<echo append="true" file="${dir.fwoutputCommon}/CellarBaseConstants.h"
					unless="${string::starts-with(name, '//') or string::get-length(name) == 0}"
>	kcpt${name} = ${value},
</echo>
				<echo append="true" file="${fwroot}/Src/Common/CoreImpl/CellarPropertyType.cs"
					unless="${string::starts-with(name, '//') or string::get-length(name) == 0}"
>		/// &lt;summary/&gt;
		${name} = ${value},
</echo>
			</foreach>

			<echo append="true" file="${dir.fwoutputCommon}/CellarBaseConstants.h"
>} CellarModuleDefns;
#endif</echo>
			<echo append="true" file="${fwroot}/Src/Common/CoreImpl/CellarPropertyType.cs"
>		/// &lt;summary/&gt;
		OwningAtomic = OwningAtom,
		/// &lt;summary/&gt;
		ReferenceAtomic = ReferenceAtom,
	}
}
</echo>
		</if>
	</target>
	<target name="GenerateFilesFromModel-clean" depends="GenerateFilesFromModel-common" if="${clean}">
		<delete verbose="true">
			<fileset refid="GeneratedFiles"/>
		</delete>
	</target>

		<!-- ********************************************************************************** -->
	<!-- Add project includes here -->
	<!-- -->
	<include buildfile="${fwroot}/Bld/TE.build.xml"/>
	<include buildfile="${fwroot}/Bld/WordWorks.build.xml"/>
	<include buildfile="${fwroot}/Bld/CacheLight.build.xml"/>
	<include buildfile="${fwroot}/Bld/Samples.build.xml"/>
	<include buildfile="${fwroot}/Bld/OvernightBuildMachine.build.xml"/>
	<include buildfile="${fwroot}/Bld/mkall.build.xml"/>
	<include buildfile="${fwroot}/Bld/remake.build.xml"/>
	<include buildfile="${fwroot}/Bld/autobuild.build.xml"/>
	<include buildfile="${fwroot}/Bld/acceptancetests.build.xml"/>
	<include buildfile="${fwroot}/Bld/Installer.build.xml"/>
	<property name="noIncludeSpecialTargets" value="true"/>
	<include buildfile="${VSConvertBuildFile}"/>
	<include buildfile="${fwroot}/Bld/VSConvert-shared.build.xml"/>
	<include buildfile="${fwroot}/Bld/Localize.build.xml"/>
	<include buildfile="${fwroot}/Bld/SpecialTargets.xml"/>
	<call target="setenvLinux"/>
</project>
